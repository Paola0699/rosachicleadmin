[{"C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\index.js":"1","C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\reportWebVitals.js":"2","C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\Home.jsx":"3","C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\common\\Switch.js":"4","C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\common\\Helmet.js":"5","C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\saleCrud\\newsale.jsx":"6","C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\saleCrud\\salescat.jsx":"7","C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\productCrud\\products.jsx":"8","C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\saleCrud\\sales.jsx":"9","C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\generalbalance.jsx":"10","C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\outcomesCrud\\newoutcome.jsx":"11","C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\outcomesCrud\\outcomes.jsx":"12","C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\Login\\index.jsx":"13","C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\productCrud\\index.jsx":"14","C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\firebaseElements\\firebase.js":"15","C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\common\\breadcrum.jsx":"16","C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\common\\navbar.jsx":"17"},{"size":702,"mtime":1611632465612,"results":"18","hashOfConfig":"19"},{"size":375,"mtime":1611632465721,"results":"20","hashOfConfig":"19"},{"size":1558,"mtime":1612206475292,"results":"21","hashOfConfig":"19"},{"size":1091,"mtime":1611632465612,"results":"22","hashOfConfig":"19"},{"size":403,"mtime":1611632465612,"results":"23","hashOfConfig":"19"},{"size":17503,"mtime":1612206475442,"results":"24","hashOfConfig":"19"},{"size":9591,"mtime":1612206475452,"results":"25","hashOfConfig":"19"},{"size":11772,"mtime":1612206475422,"results":"26","hashOfConfig":"19"},{"size":11888,"mtime":1613173406877,"results":"27","hashOfConfig":"19"},{"size":15322,"mtime":1613173406877,"results":"28","hashOfConfig":"19"},{"size":14417,"mtime":1612206485106,"results":"29","hashOfConfig":"19"},{"size":12441,"mtime":1613173406877,"results":"30","hashOfConfig":"19"},{"size":4211,"mtime":1613174010013,"results":"31","hashOfConfig":"19"},{"size":19078,"mtime":1613173406877,"results":"32","hashOfConfig":"19"},{"size":623,"mtime":1612206475452,"results":"33","hashOfConfig":"19"},{"size":369,"mtime":1612206475322,"results":"34","hashOfConfig":"19"},{"size":6108,"mtime":1612206475322,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"g1tjon",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"38"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"38"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"38"},"C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\index.js",[],["76","77"],"C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\reportWebVitals.js",[],"C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\Home.jsx",[],"C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\common\\Switch.js",[],"C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\common\\Helmet.js",[],"C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\saleCrud\\newsale.jsx",["78"],"import Navbar from \"../common/navbar\"\r\nimport Breadcrum from \"../common/breadcrum\"\r\nimport { useEffect, useRef, useState } from 'react'\r\nimport firebase from '../../firebaseElements/firebase'\r\nimport { Modal } from 'react-responsive-modal'\r\nimport 'react-responsive-modal/styles.css';\r\nimport CurrencyFormat from 'react-currency-format';\r\nimport Swal from 'sweetalert2'\r\n\r\nconst db = firebase.firestore();\r\nconst quantityButtonStyle = {\r\n    backgroundColor: 'transparent',\r\n    border: '1px solid #ddd',\r\n    padding: '.5rem .8rem',\r\n    fontWeight: '900',\r\n    borderRadius: '4px 0px 0px 4px'\r\n}\r\nconst productQuantityStyle = {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    padding: '.5rem .8rem',\r\n    border: '1px solid rgb(221, 221, 221)'\r\n}\r\n\r\nfunction Newsale() {\r\n    const [categoriesList, setCategoriesList] = useState([])\r\n    const [productsList, setProductsList] = useState([])\r\n    const [filteredProductsList, setFilteredProductsList] = useState([])\r\n    const [orderProducts, setOrderProducts] = useState([])\r\n    const [open, setOpen] = useState(false);\r\n    const [payMethod, setPayMethod] = useState('cash')\r\n\r\n    useEffect(() => {\r\n        db.collection(\"products\").onSnapshot(doc => {\r\n            let allProducts = doc.docs.map(product => {\r\n                return {\r\n                    id: product.id,\r\n                    ...product.data()\r\n                }\r\n            })\r\n            setProductsList(allProducts);\r\n            db.collection(\"categories\").onSnapshot(doc => {\r\n                let allCategories = doc.docs.map(category => {\r\n                    return {\r\n                        id: category.id,\r\n                        ...category.data()\r\n                    }\r\n                })\r\n                setCategoriesList(allCategories);\r\n                setFilteredProductsList(allProducts.filter(product => product.category === allCategories[0].name))\r\n            });\r\n        });\r\n    }, [])\r\n    const filterProducts = filterBy => {\r\n        setFilteredProductsList(productsList.filter(product => product.category === filterBy))\r\n    }\r\n    const getCurrentOrderProducts = product => {\r\n        const i = orderProducts.map(e => e.id).findIndex(ele => ele === product.id);\r\n        let aux = orderProducts.map(e => e)\r\n        return [i, aux];\r\n    }\r\n    const addProduct = product => {\r\n        let [i, aux] = getCurrentOrderProducts(product)\r\n        if (i === -1)\r\n            aux.push({ quantity: 1, ...product })\r\n        else\r\n            aux[i].quantity++;\r\n        setOrderProducts(aux)\r\n    }\r\n    const moreProduct = product => {\r\n        let [i, aux] = getCurrentOrderProducts(product)\r\n        aux[i].quantity++;\r\n        setOrderProducts(aux)\r\n    }\r\n    const lessProduct = product => {\r\n        let [i, aux] = getCurrentOrderProducts(product)\r\n        if (product.quantity === 1)\r\n            aux.splice(i, 1)\r\n        else\r\n            aux[i].quantity--;\r\n        setOrderProducts(aux)\r\n    }\r\n    const totalOrder = () => {\r\n        const reducer = (accumulator, product) => accumulator + (product.quantity * product.price);\r\n        return orderProducts.reduce(reducer, 0)\r\n    }\r\n    const order = () => {\r\n        if (payMethod === 'debit' || payMethod === 'credit') {\r\n            console.log('handeled')\r\n            Swal.fire({\r\n                title: '¿Pasó la tarjeta?',\r\n                text: \"Confirma el cobro en tu terminal antes de registrar la compra\",\r\n                icon: 'question',\r\n                showCancelButton: true,\r\n                confirmButtonColor: '#e91e63',\r\n                cancelButtonColor: '#bdbdbd ',\r\n                confirmButtonText: 'Si',\r\n                cancelButtonText: 'No'\r\n            }).then(result => {\r\n                setOrderOnDB(result)\r\n            })\r\n        } else {\r\n            Swal.fire({\r\n                title: '¿El cobro fue correcto?',\r\n                text: \"Confirma el cobro antes de registrar la compra\",\r\n                icon: 'question',\r\n                showCancelButton: true,\r\n                confirmButtonColor: '#e91e63',\r\n                cancelButtonColor: '#bdbdbd ',\r\n                confirmButtonText: 'Si',\r\n                cancelButtonText: 'No'\r\n            }).then(result => {\r\n                setOrderOnDB(result)\r\n            })\r\n\r\n        }\r\n    }\r\n    const setOrderOnDB = result => {\r\n        if (result.value) {\r\n            let order = {\r\n                paymethod: payMethod,\r\n                date: firebase.firestore.Timestamp.now(),\r\n                toprint: true,\r\n                products: orderProducts.map(product => {\r\n                    return {\r\n                        name: product.name,\r\n                        price: product.price,\r\n                        cost: product.cost,\r\n                        quantity: product.quantity,\r\n                        id: product.id,\r\n                        category: product.category\r\n                    }\r\n                })\r\n            }\r\n            db.collection('orders').add(order).then(() => {\r\n                Swal.fire(\r\n                    '¡Ordenado!',\r\n                    'La orden está siendo preparada',\r\n                    'success'\r\n                )\r\n                setOrderProducts([]);\r\n            }).catch(error =>\r\n                Swal.fire(\r\n                    'Error!',\r\n                    `Ocurrio un error: ${error}`,\r\n                    'warning'\r\n                )\r\n            );\r\n            setOpen(false);\r\n        }\r\n    }\r\n    return (<>\r\n        <div>\r\n            <Navbar />\r\n            <section className=\"hero is-primary\">\r\n                <div className=\"hero-body\">\r\n                    <div className=\"container\">\r\n                        <h1 className=\"title\">Nueva Venta</h1>\r\n                        <h2 className=\"subtitle\">Generar Venta</h2>\r\n                        <Breadcrum parent='Ventas' children='Nueva Venta' />\r\n                    </div>\r\n                </div>\r\n            </section>\r\n            <section className=\"section\">\r\n                <div className=\"container\">\r\n                    <div className='columns'>\r\n                        <div className=\"column\">\r\n                            <label>Seleccione Categoría:</label>\r\n                            <div className=\"field has-addons\">\r\n                                <div className=\"control is-expanded\">\r\n                                    <div className=\"select is-fullwidth\">\r\n                                        <select onChange={e => filterProducts(e.target.value)} name=\"country\">\r\n                                            {categoriesList.map(cat =>\r\n                                                <option key={cat.id} value={cat.name}> {cat.name} </option>\r\n                                            )}\r\n                                        </select>\r\n                                    </div>\r\n                                </div>\r\n                                {/* <div className=\"control\">\r\n                                    <button type=\"submit\" className=\"button is-success\">Seleccionar</button>\r\n                                </div> */}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className='columns'>\r\n                        <div className=\"column\">\r\n                            <div className='card'>\r\n                                <header className=\"card-header\">\r\n                                    <p className=\"card-header-title\">\r\n                                        Productos de la  Categoría\r\n                                    </p>\r\n                                </header>\r\n                                <div className=\"card-content\" style={{ overflow: 'scroll', height: '20rem' }}>\r\n                                    <div className=\"content\">\r\n                                        <table className=\"table is-hoverable\">\r\n                                            <tr>\r\n                                                <th>Producto</th>\r\n                                                <th>Descripción</th>\r\n                                                <th>Precio</th>\r\n                                            </tr>\r\n                                            {filteredProductsList.map(product =>\r\n                                                <tr onClick={() => addProduct(product)} key={product.id}>\r\n                                                    <td>{product.name} </td>\r\n                                                    <td>{product.description} </td>\r\n                                                    <td>  <CurrencyFormat decimalScale={2} fixedDecimalScale={true}\r\n                                                        value={product.price} displayType={'text'} thousandSeparator={true}\r\n                                                        prefix={'$'} /></td>\r\n                                                </tr>\r\n                                            )}\r\n                                        </table>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"column\">\r\n                            <div className='card'>\r\n                                <header className=\"card-header\">\r\n                                    <p className=\"card-header-title\">\r\n                                        Productos en la Orden\r\n                                    </p>\r\n                                </header>\r\n                                <div className=\"card-content\" style={{ overflow: 'scroll', height: '20rem' }}>\r\n                                    <div className=\"content\">\r\n                                        <table className=\"table is-hoverable\">\r\n                                            <tr>\r\n                                                <th>Producto</th>\r\n                                                <th>Descripción</th>\r\n                                                <th>Cantidad</th>\r\n                                                <th>Precio Unitario</th>\r\n                                                <th>Total</th>\r\n                                            </tr>\r\n                                            {orderProducts.map(product =>\r\n                                                <tr key={product.id}>\r\n                                                    <td>{product.name} </td>\r\n                                                    <td>{product.description} </td>\r\n                                                    <td><div style={{ display: 'flex' }}>\r\n                                                        <button onClick={() => lessProduct(product)} style={quantityButtonStyle}>-</button>\r\n                                                        <div style={productQuantityStyle}> {product.quantity} </div>\r\n                                                        <button onClick={() => moreProduct(product)} style={quantityButtonStyle}>+</button>\r\n                                                    </div>\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        <CurrencyFormat decimalScale={2} fixedDecimalScale={true}\r\n                                                            value={product.price} displayType={'text'} thousandSeparator={true}\r\n                                                            prefix={'$'} />\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        <CurrencyFormat decimalScale={2} fixedDecimalScale={true}\r\n                                                            value={product.price * product.quantity} displayType={'text'} thousandSeparator={true}\r\n                                                            prefix={'$'} />\r\n                                                    </td>\r\n                                                </tr>)}\r\n                                        </table>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <br />\r\n                            <button onClick={() => setOpen(true)} disabled={orderProducts.length > 0 ? false : true} className='button is-success is-fullwidth'>CONFIRMAR ORDEN</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        </div>\r\n        <Modal open={open} onClose={() => setOpen(false)} center >\r\n            <div style={{ padding: '2.5rem' }}>\r\n                <div className=\"modal-header\">\r\n                    <h1 class=\"title\">Confirmar Orden</h1>\r\n                    <h2 class=\"subtitle\">Confirmación de la orden</h2>\r\n                </div>\r\n                <div className=\"modal-body\">\r\n                    <br />\r\n                    <div className=\"user-status table-responsive products-table\">\r\n                        <table className=\"table table-bordernone mb-0\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th scope=\"col\">Cantidad</th>\r\n                                    <th scope=\"col\">Producto</th>\r\n                                    <th scope=\"col\">Descripción</th>\r\n                                    <th scope=\"col\">Precio Unitario</th>\r\n                                    <th scope=\"col\">Total</th>\r\n                                </tr>\r\n                            </thead>\r\n                            {orderProducts.map(product =>\r\n                                <tr key={product.id}>\r\n                                    <td>{product.quantity} </td>\r\n                                    <td>{product.name} </td>\r\n                                    <td>{product.description} </td>\r\n                                    <td>\r\n                                        <CurrencyFormat decimalScale={2} fixedDecimalScale={true}\r\n                                            value={product.price} displayType={'text'} thousandSeparator={true}\r\n                                            prefix={'$'} />\r\n                                    </td>\r\n                                    <td>\r\n                                        <CurrencyFormat decimalScale={2} fixedDecimalScale={true}\r\n                                            value={product.price * product.quantity} displayType={'text'} thousandSeparator={true}\r\n                                            prefix={'$'} />\r\n                                    </td>\r\n                                </tr>\r\n                            )}\r\n                            <tr>\r\n                                <td></td>\r\n                                <td></td>\r\n                                <td></td>\r\n                                <td className='is-success'>Total a pagar</td>\r\n                                <td className='is-success'>\r\n                                    <CurrencyFormat decimalScale={2} fixedDecimalScale={true}\r\n                                        value={totalOrder()} displayType={'text'} thousandSeparator={true}\r\n                                        prefix={'$'} />\r\n                                </td>\r\n                            </tr>\r\n                            <tbody>\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                    <div>\r\n                        <div className=\"row\" style={{ /* backgroundColor: '#f5f5f5', */ padding: '3%', marginTop: '4%' }}>\r\n                            <div className='col'><b>Método de pago</b></div>\r\n                            <div className='columns'>\r\n                                <div className=\"column\" >\r\n                                    <label className=\"d-block\" >\r\n                                        <input onChange={() => setPayMethod('cash')} className=\"radio_animated\" id=\"edo-ani3\" type=\"radio\" name=\"rdo-ani2\" defaultChecked />Efectivo\r\n                            </label>\r\n                                </div>\r\n                                <div className=\"column\" >\r\n                                    <label className=\"d-block\">\r\n                                        <input onChange={() => setPayMethod('debit')} className=\"radio_animated\" id=\"edo-ani4\" type=\"radio\" name=\"rdo-ani2\" />Tarjeta de debito\r\n                            </label>\r\n                                </div>\r\n                                <div className=\"column\" >\r\n                                    <label className=\"d-block\">\r\n                                        <input onChange={() => setPayMethod('credit')} className=\"radio_animated\" id=\"edo-ani4\" type=\"radio\" name=\"rdo-ani2\" /> Tarjeta de credito\r\n                            </label>\r\n                                </div>\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"modal-footer\">\r\n                    <button onClick={order} className=\"button is-success\">Ordenar</button>\r\n                    <button className=\"button\" onClick={() => setOpen(false)}>Cancelar</button>\r\n                </div>\r\n            </div>\r\n        </Modal>\r\n    </>)\r\n}\r\nexport default Newsale;","C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\saleCrud\\salescat.jsx",["79"],"import Navbar from \"../common/navbar\"\r\nimport Breadcrum from \"../common/breadcrum\"\r\nimport DataTable from 'react-data-table-component';\r\nimport CurrencyFormat from 'react-currency-format';\r\nimport { useEffect, useState } from \"react\";\r\nimport firebase from '../../firebaseElements/firebase'\r\n\r\n\r\nconst db = firebase.firestore();\r\n\r\n\r\nconst columns = [\r\n    {\r\n        name: 'Producto',\r\n        selector: 'name',\r\n        sortable: true,\r\n    },\r\n    {\r\n        name: 'Fecha',\r\n        cell: row => row.date.toDate().toLocaleString('es-MX', {\r\n            weekday: 'long',\r\n            year: 'numeric',\r\n            month: 'long',\r\n            day: 'numeric'\r\n        }),\r\n        sortable: true,\r\n        right: true,\r\n    },\r\n    {\r\n        name: 'Cantidad',\r\n        selector: 'quantity',\r\n        sortable: true,\r\n        right: true,\r\n    },\r\n\r\n    {\r\n        name: 'Precio Unitario',\r\n        selector: row => row.price,\r\n        cell: row => <CurrencyFormat\r\n            decimalScale={2}\r\n            fixedDecimalScale={true}\r\n            value={row.price}\r\n            displayType={'text'}\r\n            thousandSeparator={true}\r\n            prefix={'$'}\r\n        />,\r\n        sortable: true,\r\n        right: true,\r\n    },\r\n\r\n    {\r\n        name: 'Monto Total',\r\n        selector: row => row.price *row.quantity,\r\n        cell: row => <CurrencyFormat\r\n            decimalScale={2}\r\n            fixedDecimalScale={true}\r\n            value={row.price *row.quantity}\r\n            displayType={'text'}\r\n            thousandSeparator={true}\r\n            prefix={'$'}\r\n        />,\r\n        sortable: true,\r\n        right: true,\r\n    },\r\n    \r\n];\r\n\r\nconst customStyles = {\r\n    header: {\r\n        style: {\r\n            fontSize: '22px',\r\n            color: 'white',\r\n            backgroundColor: '#e91e63',\r\n            minHeight: '56px',\r\n            paddingLeft: '16px',\r\n            paddingRight: '8px',\r\n        },\r\n    },\r\n    headRow: {\r\n        style: {\r\n            backgroundColor: '#fafafa',\r\n            minHeight: '56px',\r\n            borderBottomWidth: '1.5px',\r\n            borderBottomColor: '#1293e1',\r\n            borderBottomStyle: 'solid',\r\n        },\r\n        denseStyle: {\r\n            minHeight: '32px',\r\n        },\r\n    },\r\n    headCells: {\r\n        style: {\r\n            fontSize: '1rem',\r\n            fontWeight: 700,\r\n            color: '#616161',\r\n            paddingLeft: '16px',\r\n            paddingRight: '16px',\r\n        },\r\n        activeSortStyle: {\r\n            color: '#1293e1',\r\n            '&:focus': {\r\n                outline: 'none',\r\n            },\r\n            '&:hover:not(:focus)': {\r\n                color: '#1293e1',\r\n            },\r\n        },\r\n        inactiveSortStyle: {\r\n            '&:focus': {\r\n                outline: 'none',\r\n                color: '#1293e1',\r\n            },\r\n            '&:hover': {\r\n                color: '#4dbbff',\r\n            },\r\n        },\r\n    },\r\n};\r\n\r\nfunction Salescat() {\r\n    const [startDate, setStartDate] = useState('');\r\n    const [finalDate, setFinalDate] = useState('');\r\n    const [category, setCategory] = useState('');\r\n    const [categoriesList, setCategoriesList] = useState([])\r\n    const [allProducts, setAllProducts] = useState([])\r\n    const [totalCost, setTotalCost] = useState(0)\r\n    const [totalPrice, setTotalPrice] = useState(0)\r\n\r\n    useEffect(() => {\r\n        getAllData()\r\n        console.log('effect')\r\n    },[startDate,finalDate,category])\r\n    \r\n    useEffect(() => {\r\n            db.collection(\"categories\").onSnapshot(doc => {\r\n                let allCategories = doc.docs.map(category => {\r\n                    return {\r\n                        id: category.id,\r\n                        ...category.data()\r\n                    }\r\n                })\r\n                setCategoriesList(allCategories);\r\n            });\r\n    }, [])\r\n    const getAllData = async () => {\r\n        if (startDate && finalDate) {\r\n            const querySnapshot = await db.collection(\"orders\")\r\n                .where('date', '>', toDate(startDate, 0, 0, 0))\r\n                .where('date', '<=', toDate(finalDate, 23, 59, 59))\r\n                .get()\r\n\r\n            const allProducts = []\r\n            querySnapshot.docs.forEach(sale => {\r\n                sale.data().products.forEach(product=>{\r\n                    if(product.category===category){\r\n                        allProducts.push({\r\n                            ...product,\r\n                            date: sale.data().date\r\n                        })\r\n                    }\r\n                }) \r\n            })\r\n            setTotalCost(totalOrder(allProducts,'cost'))\r\n            setTotalPrice(totalOrder(allProducts,'price'))\r\n            setAllProducts(allProducts)\r\n        }\r\n    }\r\n    const totalOrder = (products,concept) => {\r\n        const reducer = (accumulator, product) => accumulator + (product.quantity * product[concept]);\r\n        return products.reduce(reducer, 0)\r\n    }\r\n    const toDate = (text, h, m, s) => {\r\n        const dataAux = text.split('-')\r\n        const temDate = new Date(Number(dataAux[0]), Number(dataAux[1]) - 1, Number(dataAux[2]), h, m, s)\r\n        return firebase.firestore.Timestamp.fromDate(temDate)\r\n    }\r\n    return (\r\n        <div>\r\n            <Navbar />\r\n            <section class=\"hero is-primary\">\r\n                <div class=\"hero-body\">\r\n                    <div class=\"container\">\r\n                        <h1 class=\"title\">Ventas por Categoría</h1>\r\n                        <h2 class=\"subtitle\">Consulta las ventas por categoría</h2>\r\n                        <Breadcrum  parent='Ventas' children='Ventas por Categoría' />\r\n                    </div>\r\n                </div>\r\n            </section>\r\n            <section class=\"section\">\r\n                <div class=\"container\">\r\n                    <div className='columns'>\r\n                        <div className='column is-4'>\r\n                            <div class=\"field\">\r\n                                <label class=\"label\">Fecha de inicio</label>\r\n                                <div class=\"control\">\r\n                                    <input onChange={e => setStartDate(e.target.value)}  class=\"input\" type=\"date\" placeholder=\"Nombre del producto\" />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className='column is-4'>\r\n                            <div class=\"field\">\r\n                                <label class=\"label\">Fecha de Fin</label>\r\n                                <div class=\"control\">\r\n                                    <input onChange={e => setFinalDate(e.target.value)} class=\"input\" type=\"date\" placeholder=\"Nombre del producto\" />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className='column is-4'>\r\n                            <div class=\"field\">\r\n                                <label class=\"label\">Categoría</label>\r\n                                <div class=\"control\">\r\n                                    <div class=\"select is-fullwidth\">\r\n                                        <select onChange={e => setCategory(e.target.value)}>\r\n                                            <option selected disabled>Seleccione una categoría</option>\r\n                                            {categoriesList.map(cat =>\r\n                                                <option key={cat.id} value={cat.name}> {cat.name} </option>\r\n                                            )}\r\n                                        </select>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"table-container\">\r\n                        <table className='table' style={{ marginBottom: '2%', textAlign: 'center', width: '100%' }}>\r\n                            <tr>\r\n                                <th className='ocultar-div'><small>Costos de </small><br />Producción</th>\r\n                                <th className='ocultar-div'><small>Precio</small><br />Venta</th>\r\n                                <th className='is-success'><small>Ganancias </small><br />Netas</th>\r\n                            </tr>\r\n                            <tr>\r\n                                <td className='ocultar-div'><CurrencyFormat decimalScale={2} fixedDecimalScale={true} value={totalCost} displayType={'text'} thousandSeparator={true} prefix={'$'} /></td>\r\n                                <td className='ocultar-div'><CurrencyFormat decimalScale={2} fixedDecimalScale={true} value={totalPrice} displayType={'text'} thousandSeparator={true} prefix={'$'} /></td>\r\n                                <td><b style={{ fontSize: '1.1rem' }}><CurrencyFormat decimalScale={2} fixedDecimalScale={true} value={totalPrice-totalCost} displayType={'text'} thousandSeparator={true} prefix={'$'} /></b></td>\r\n                            </tr>\r\n                        </table>\r\n                    </div>\r\n\r\n                    <DataTable\r\n                        columns={columns}\r\n                        data={allProducts}\r\n                        pagination={true}\r\n                        customStyles={customStyles}\r\n                        paginationComponentOptions={{ rowsPerPageText: 'Filas por pagina:', rangeSeparatorText: 'de' }}\r\n                    />\r\n                </div>\r\n            </section>\r\n          \r\n        </div>\r\n    )\r\n}\r\nexport default Salescat;","C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\productCrud\\products.jsx",[],"C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\saleCrud\\sales.jsx",["80"],"C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\generalbalance.jsx",["81"],"C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\outcomesCrud\\newoutcome.jsx",["82"],"import Navbar from \"../common/navbar\"\r\nimport Breadcrum from \"../common/breadcrum\"\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faUpload } from '@fortawesome/free-solid-svg-icons'\r\nimport { useEffect, useState, useRef } from \"react\";\r\nimport firebase from '../../firebaseElements/firebase'\r\nimport Swal from 'sweetalert2'\r\n\r\nconst db = firebase.firestore();\r\n\r\nfunction Newoutcome() {\r\n    const [kind, setKind] = useState('');\r\n    const [outcomeKind, setOutcomeKind] = useState('Gasto General');\r\n    const [concept, setConcept] = useState('');\r\n    const [quantity, setQuantity] = useState(0);\r\n    const [date, setDate] = useState('');\r\n    const [description, setDescription] = useState('');\r\n    const [paymethod, setPaymethod] = useState('');\r\n    const [responsable, setResponsable] = useState('');\r\n    const [authorizer, setAuthorizer] = useState('');\r\n    const [fileName, setFileName] = useState('');\r\n\r\n    const ticket = useRef(null);\r\n    const kindRef = useRef(null);\r\n    const outcomeKindRef = useRef(null);\r\n    const conceptRef = useRef(null);\r\n    const quantityRef = useRef(null);\r\n    const dateRef = useRef(null);\r\n    const descriptionRef = useRef(null);\r\n    const paymethodRRef = useRef(null);\r\n    const responsableRef = useRef(null);\r\n    const authorizerRef = useRef(null);\r\n\r\n    const refs=[ticket,\r\n        kindRef,\r\n        conceptRef,\r\n        quantityRef,\r\n        dateRef,\r\n        descriptionRef,\r\n        paymethodRRef,\r\n        responsableRef,\r\n        authorizerRef\r\n    ]\r\n\r\n    const save = async () => {\r\n        console.log('working')\r\n        let storageRef = firebase.storage().ref();\r\n        const ticketImg = storageRef.child(`outcomes/${Date.now()}.webp`);\r\n\r\n        await ticketImg.put(ticket.current.files[0])\r\n        const downloadURL = await ticketImg.getDownloadURL()\r\n        const newOutcome = {\r\n            kind: kind,\r\n            concept: concept,\r\n            quantity: Number(quantity),\r\n            date: toDate(date, 12, 0, 0),\r\n            description: description,\r\n            paymethod: paymethod,\r\n            responsable: responsable,\r\n            authorizer: authorizer,\r\n            ticketImg: downloadURL,\r\n            status: 'Pendiente'\r\n        }\r\n        if(outcomeKind) \r\n            newOutcome.outcomeKind = outcomeKind\r\n        db.collection('outcomes').add(newOutcome).then(() => {\r\n            Swal.fire(\r\n                'Registrado!',\r\n                'El movimiento se registro con exito',\r\n                'success'\r\n            )\r\n            refs.forEach(ref=>ref.current.value='')\r\n            //outcomeKindRef.current.value='Gasto General'\r\n            //ticket.current.files[0]=''\r\n            setFileName('')\r\n        }).catch(error =>\r\n            Swal.fire(\r\n                'Error!',\r\n                `Ocurrio un error: ${error}`,\r\n                'warning'\r\n            )\r\n        );\r\n        console.log(downloadURL)\r\n        console.log('saved')\r\n    }\r\n    const toDate = (text, h, m, s) => {\r\n        const dataAux = text.split('-')\r\n        const temDate = new Date(Number(dataAux[0]), Number(dataAux[1]) - 1, Number(dataAux[2]), h, m, s)\r\n        return firebase.firestore.Timestamp.fromDate(temDate)\r\n    }\r\n    return (\r\n        <div>\r\n            <Navbar />\r\n            <section class=\"hero is-primary\">\r\n                <div class=\"hero-body\">\r\n                    <div class=\"container\">\r\n                        <h1 class=\"title\">Nuevo Gasto</h1>\r\n                        <h2 class=\"subtitle\">Dar de alta un nuevo gasto o ingreso</h2>\r\n                        <Breadcrum  parent='Gastos e Ingresos' children='Nuevo Gasto' />\r\n                    </div>\r\n                </div>\r\n            </section>\r\n            <section class=\"section\">\r\n                <div class=\"container\">\r\n                    <div className='columns'>\r\n                        <div className=\"column\">\r\n                            <div className='card'>\r\n                                <header class=\"card-header\">\r\n                                    <p class=\"card-header-title\">\r\n                                        Información General\r\n                                    </p>\r\n                                </header>\r\n                                <div class=\"card-content\">\r\n                                    <div class=\"content\">\r\n                                        <div class=\"field\">\r\n                                            <label class=\"label\">*Tipo de Movimiento</label>\r\n                                            <div class=\"control\">\r\n                                                <div class=\"select is-fullwidth\">\r\n                                                    <select ref={kindRef} onChange={e => setKind(e.target.value)} >\r\n                                                        <option selected disabled>Movimiento</option>\r\n                                                        <option>Gasto</option>\r\n                                                        <option>Ingreso</option>\r\n                                                    </select>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        {kind === 'Gasto' ? <div class=\"field\">\r\n                                            <label class=\"label\">*Tipo de Gasto</label>\r\n                                            <div class=\"control\">\r\n                                                <div class=\"select is-fullwidth\">\r\n                                                    <select ref={outcomeKindRef} defaultChecked={'Gasto General'} onChange={e => setOutcomeKind(e.target.value)}>\r\n                                                        <option>Gasto General</option>\r\n                                                        <option>Gasto Operativo</option>\r\n                                                        <option>Gasto Administrativo</option>\r\n                                                    </select>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div> : null}\r\n\r\n                                        <div class=\"field\">\r\n                                            <label class=\"label\">*Concepto</label>\r\n                                            <div class=\"control\">\r\n                                                <input ref={conceptRef} onChange={e => setConcept(e.target.value)} class=\"input\" type=\"text\" placeholder=\"Nombre del producto\" />\r\n                                            </div>\r\n                                        </div>\r\n                                        <div class=\"field\">\r\n                                            <label class=\"label\">*Importe</label>\r\n                                            <div class=\"control\">\r\n                                                <input ref={quantityRef} onChange={e => setQuantity(e.target.value)} class=\"input\" type=\"number\" placeholder=\"Nombre del producto\" />\r\n                                            </div>\r\n                                        </div>\r\n                                        <div class=\"field\">\r\n                                            <label class=\"label\">*Fecha pago/cobro</label>\r\n                                            <div class=\"control\">\r\n                                                <input ref={dateRef} onChange={e => setDate(e.target.value)} class=\"input\" type=\"date\" placeholder=\"Nombre del producto\" />\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        <div class=\"field\">\r\n                                            <label class=\"label\">*Comentario/Descripción</label>\r\n                                            <div class=\"control\">\r\n                                                <textarea ref={descriptionRef} onChange={e => setDescription(e.target.value)} class=\"textarea\" placeholder=\"\"></textarea>\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        <div class=\"field\">\r\n                                            <label class=\"label\">*Método de pago/cobro</label>\r\n                                            <div class=\"control\">\r\n                                                <div class=\"select is-fullwidth\">\r\n                                                    <select ref={paymethodRRef} onChange={e => setPaymethod(e.target.value)}>\r\n                                                        <option selected disabled>Método</option>\r\n                                                        <option>Efectivo</option>\r\n                                                        <option>Cheque</option>\r\n                                                        <option>Tarjeta de Crédito</option>\r\n                                                        <option>Tarjeta de Débito</option>\r\n                                                        <option>Transferencia Electrónica</option>\r\n                                                    </select>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div class=\"field\">\r\n                                            <label class=\"label\">*Responsable</label>\r\n                                            <div class=\"control\">\r\n                                                <div class=\"select is-fullwidth\">\r\n                                                    <select ref={responsableRef} onChange={e => setResponsable(e.target.value)}>\r\n                                                        <option selected disabled value=\"\">Seleccione</option>\r\n                                                        <option value='juanPerez'>Juan Pérez</option>\r\n                                                    </select>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div class=\"field\">\r\n                                            <label class=\"label\">*Autoriza</label>\r\n                                            <div class=\"control\">\r\n                                                <div class=\"select is-fullwidth\">\r\n                                                    <select ref={authorizerRef} onChange={e => setAuthorizer(e.target.value)}>\r\n                                                        <option selected disabled value=\"\">Seleccione</option>\r\n                                                        <option value='sanjuanero'>Guillermo Sanjuanero</option>\r\n                                                    </select>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"column\">\r\n                            <div className='card'>\r\n                                <header class=\"card-header\">\r\n                                    <p class=\"card-header-title\">\r\n                                        Comprobante de Pago/Cobro\r\n                                    </p>\r\n                                </header>\r\n                                <div class=\"card-content\">\r\n                                    <div class=\"content\">\r\n                                        <article class=\"message is-success\">\r\n                                            <div class=\"message-body\">\r\n                                                Requisitos del Comprobante\r\n                                                <br />\r\n                                                Para que tu Cobro/Pago sea válido, deberás anexar una imagen de tu comprobante. Este comprobante deberá ser: <strong>Ticket de compra, Factura, Recibo, Comprobante de Tranferencia Bancaria </strong>.\r\n                                                <br /> Es necesario que el monto del comprobante y la fecha coincidan con los datos ingresados en el sistema, de otro modo, este no será tomado en cuenta.\r\n                                            </div>\r\n                                        </article>\r\n\r\n                                        <div class=\"file has-name is-boxed is-fullwidth\">\r\n                                            <label class=\"file-label\">\r\n                                                <input onChange={e => setFileName(e.target.files[0].name)} ref={ticket} class=\"file-input\" type=\"file\" name=\"resume\" />\r\n                                                <span class=\"file-cta\">\r\n                                                    <span class=\"file-icon\">\r\n                                                        <FontAwesomeIcon icon={faUpload} />\r\n                                                    </span>\r\n                                                    <span class=\"file-label is-center\" style={{ textAlign: 'center' }}>\r\n                                                        Seleccione un archivo\r\n                                                    </span>\r\n                                                </span>\r\n                                                <span class=\"file-name\" style={{ textAlign: 'center' }}>\r\n                                                    {fileName}\r\n                                                </span>\r\n                                            </label>\r\n                                        </div>\r\n                                        <br />\r\n                                        <button onClick={save} className='button is-fullwidth is-success'>REGISTRAR</button>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        </div>\r\n    )\r\n}\r\nexport default Newoutcome;","C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\outcomesCrud\\outcomes.jsx",["83","84","85"],"C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\Login\\index.jsx",["86","87"],"C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\productCrud\\index.jsx",["88","89","90","91"],"C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\firebaseElements\\firebase.js",[],"C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\common\\breadcrum.jsx",["92","93"],"function Breadcrum(props) {\r\n    const { parent, children} = props;\r\n    return (\r\n        <nav className=\"breadcrumb is-small\" aria-label=\"breadcrumbs\">\r\n            <ul>\r\n                <li><a href=\"#\">{parent}</a></li>\r\n                <li className=\"is-active\"><a href=\"#\">{children}</a></li>\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\nexport default Breadcrum;","C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\common\\navbar.jsx",["94","95","96","97","98","99","100","101","102","103","104","105","106","107"],"import logo from \"../../assets/images/logos/logo3.png\"\r\nimport { Link } from 'react-router-dom'\r\nimport firebase from '../../firebaseElements/firebase'\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n\r\n    // Get all \"navbar-burger\" elements\r\n    const $navbarBurgers = Array.prototype.slice.call(document.querySelectorAll('.navbar-burger'), 0);\r\n\r\n    // Check if there are any navbar burgers\r\n    if ($navbarBurgers.length > 0) {\r\n\r\n        // Add a click event on each of them\r\n        $navbarBurgers.forEach(el => {\r\n            el.addEventListener('click', () => {\r\n\r\n                // Get the target from the \"data-target\" attribute\r\n                const target = el.dataset.target;\r\n                const $target = document.getElementById(target);\r\n\r\n                // Toggle the \"is-active\" class on both the \"navbar-burger\" and the \"navbar-menu\"\r\n                el.classList.toggle('is-active');\r\n                $target.classList.toggle('is-active');\r\n\r\n            });\r\n        });\r\n    }\r\n\r\n});\r\n\r\nfunction close(){\r\n    firebase.auth().signOut().then(function() {\r\n        console.log('Sign-out uccessful')\r\n      }).catch(function(error) {\r\n        // An error happened.\r\n      }); \r\n}\r\n\r\nfunction Navbar() {\r\n    return (\r\n        <div>\r\n            <nav className=\"navbar is-primary\" role=\"navigation\" aria-label=\"main navigation\">\r\n                <div className=\"navbar-brand\">\r\n                    <a className=\"navbar-item\" href=\"https://bulma.io\">\r\n                        <img src={logo} />\r\n                    </a>\r\n\r\n                    <a role=\"button\" className=\"navbar-burger\" aria-label=\"menu\" aria-expanded=\"false\" data-target=\"navbarBasicExample\">\r\n                        <span aria-hidden=\"true\"></span>\r\n                        <span aria-hidden=\"true\"></span>\r\n                        <span aria-hidden=\"true\"></span>\r\n                    </a>\r\n                </div>\r\n\r\n                <div id=\"navbarBasicExample\" className=\"navbar-menu\">\r\n                    <div className=\"navbar-start\">\r\n                        <div className=\"navbar-item has-dropdown is-hoverable\">\r\n                            <a className=\"navbar-link\">\r\n                                Productos\r\n                            </a>\r\n\r\n                            <div className=\"navbar-dropdown\">\r\n                                <Link to={`${process.env.PUBLIC_URL}/producto`}>\r\n                                    <a className=\"navbar-item\">\r\n                                        Nuevo Producto\r\n                                    </a>\r\n                                </Link>\r\n                                <Link to={`${process.env.PUBLIC_URL}/productos`}>\r\n                                    <a className=\"navbar-item\">\r\n                                        Todos los productos\r\n                                    </a>\r\n                                </Link>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"navbar-item has-dropdown is-hoverable\">\r\n                            <a className=\"navbar-link\">\r\n                                Gastos e Ingresos\r\n                            </a>\r\n\r\n                            <div className=\"navbar-dropdown\">\r\n                                <Link to={`${process.env.PUBLIC_URL}/alta-gasto`}>\r\n                                    <a className=\"navbar-item\">\r\n                                        Alta de Gastos e Ingresos\r\n                                    </a>\r\n                                </Link>\r\n                                <Link to={`${process.env.PUBLIC_URL}/gastos`}>\r\n                                    <a className=\"navbar-item\">\r\n                                        Consultar Gastos e Ingresos\r\n                                    </a>\r\n                                </Link>\r\n                                <Link to={`${process.env.PUBLIC_URL}/balance-general`}>\r\n                                    <a className=\"navbar-item\">\r\n                                        Balance General\r\n                            </a>\r\n                                </Link>\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n                        <div className=\"navbar-item has-dropdown is-hoverable\">\r\n                            <a className=\"navbar-link\">\r\n                                Ventas\r\n                            </a>\r\n\r\n                            <div className=\"navbar-dropdown\">\r\n                                <Link to={`${process.env.PUBLIC_URL}/nueva-venta`}>\r\n                                    <a className=\"navbar-item\">\r\n                                        Nueva Venta\r\n                                </a>\r\n                                </Link>\r\n                                <Link to={`${process.env.PUBLIC_URL}/ventas`}>\r\n                                    <a className=\"navbar-item\">\r\n                                        Ventas Generales\r\n                                </a>\r\n                                </Link>\r\n                                <Link to={`${process.env.PUBLIC_URL}/ventas-desglosado`}>\r\n                                    <a className=\"navbar-item\">\r\n                                        Ventas por Categoria\r\n                                </a>\r\n                                </Link>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                    <div className=\"navbar-end\">\r\n                        <div className=\"navbar-item\">\r\n                            <div className=\"buttons\">\r\n                                <Link onClick={close} to={`${process.env.PUBLIC_URL}`}>\r\n                                    <a className=\"button is-link is-outlined\">\r\n                                        Cerrar Sesión\r\n                                    </a>\r\n                                </Link>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    );\r\n}\r\nexport default Navbar;",{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","replacedBy":"111"},{"ruleId":"112","severity":1,"message":"113","line":3,"column":21,"nodeType":"114","messageId":"115","endLine":3,"endColumn":27},{"ruleId":"116","severity":1,"message":"117","line":132,"column":7,"nodeType":"118","endLine":132,"endColumn":37,"suggestions":"119"},{"ruleId":"116","severity":1,"message":"117","line":118,"column":8,"nodeType":"118","endLine":118,"endColumn":30,"suggestions":"120"},{"ruleId":"116","severity":1,"message":"117","line":39,"column":8,"nodeType":"118","endLine":39,"endColumn":30,"suggestions":"121"},{"ruleId":"112","severity":1,"message":"122","line":5,"column":10,"nodeType":"114","messageId":"115","endLine":5,"endColumn":19},{"ruleId":"112","severity":1,"message":"123","line":14,"column":7,"nodeType":"114","messageId":"115","endLine":14,"endColumn":11},{"ruleId":"116","severity":1,"message":"117","line":167,"column":8,"nodeType":"118","endLine":167,"endColumn":36,"suggestions":"124"},{"ruleId":"112","severity":1,"message":"125","line":179,"column":19,"nodeType":"114","messageId":"115","endLine":179,"endColumn":32},{"ruleId":"112","severity":1,"message":"126","line":12,"column":18,"nodeType":"114","messageId":"115","endLine":12,"endColumn":29},{"ruleId":"127","severity":1,"message":"128","line":69,"column":21,"nodeType":"129","endLine":69,"endColumn":62},{"ruleId":"116","severity":1,"message":"130","line":64,"column":6,"nodeType":"118","endLine":64,"endColumn":8,"suggestions":"131"},{"ruleId":"132","severity":1,"message":"133","line":232,"column":19,"nodeType":"129","endLine":232,"endColumn":86},{"ruleId":"132","severity":1,"message":"133","line":305,"column":19,"nodeType":"129","endLine":305,"endColumn":86},{"ruleId":"132","severity":1,"message":"133","line":338,"column":19,"nodeType":"129","endLine":338,"endColumn":86},{"ruleId":"132","severity":1,"message":"133","line":6,"column":21,"nodeType":"129","endLine":6,"endColumn":33},{"ruleId":"132","severity":1,"message":"133","line":7,"column":43,"nodeType":"129","endLine":7,"endColumn":55},{"ruleId":"127","severity":1,"message":"128","line":45,"column":25,"nodeType":"129","endLine":45,"endColumn":43},{"ruleId":"132","severity":1,"message":"134","line":48,"column":21,"nodeType":"129","endLine":48,"endColumn":137},{"ruleId":"132","severity":1,"message":"134","line":58,"column":29,"nodeType":"129","endLine":58,"endColumn":56},{"ruleId":"132","severity":1,"message":"134","line":64,"column":37,"nodeType":"129","endLine":64,"endColumn":64},{"ruleId":"132","severity":1,"message":"134","line":69,"column":37,"nodeType":"129","endLine":69,"endColumn":64},{"ruleId":"132","severity":1,"message":"134","line":77,"column":29,"nodeType":"129","endLine":77,"endColumn":56},{"ruleId":"132","severity":1,"message":"134","line":83,"column":37,"nodeType":"129","endLine":83,"endColumn":64},{"ruleId":"132","severity":1,"message":"134","line":88,"column":37,"nodeType":"129","endLine":88,"endColumn":64},{"ruleId":"132","severity":1,"message":"134","line":93,"column":37,"nodeType":"129","endLine":93,"endColumn":64},{"ruleId":"132","severity":1,"message":"134","line":102,"column":29,"nodeType":"129","endLine":102,"endColumn":56},{"ruleId":"132","severity":1,"message":"134","line":108,"column":37,"nodeType":"129","endLine":108,"endColumn":64},{"ruleId":"132","severity":1,"message":"134","line":113,"column":37,"nodeType":"129","endLine":113,"endColumn":64},{"ruleId":"132","severity":1,"message":"134","line":118,"column":37,"nodeType":"129","endLine":118,"endColumn":64},{"ruleId":"132","severity":1,"message":"134","line":131,"column":37,"nodeType":"129","endLine":131,"endColumn":79},"no-native-reassign",["135"],"no-negated-in-lhs",["136"],"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getAllData'. Either include it or remove the dependency array.","ArrayExpression",["137"],["138"],["139"],"'useEffect' is defined but never used.","'data' is assigned a value but never used.",["140"],"'querySnapshot' is assigned a value but never used.","'getUserType' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'db'. Either include it or remove the dependency array.",["141"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-global-assign","no-unsafe-negation",{"desc":"142","fix":"143"},{"desc":"144","fix":"145"},{"desc":"144","fix":"146"},{"desc":"147","fix":"148"},{"desc":"149","fix":"150"},"Update the dependencies array to be: [startDate, finalDate, category, getAllData]",{"range":"151","text":"152"},"Update the dependencies array to be: [startDate, finalDate, getAllData]",{"range":"153","text":"154"},{"range":"155","text":"154"},"Update the dependencies array to be: [startDate, finalDate, kind, getAllData]",{"range":"156","text":"157"},"Update the dependencies array to be: [db]",{"range":"158","text":"159"},[3422,3452],"[startDate, finalDate, category, getAllData]",[3387,3409],"[startDate, finalDate, getAllData]",[1498,1520],[5064,5092],"[startDate, finalDate, kind, getAllData]",[2024,2026],"[db]"]