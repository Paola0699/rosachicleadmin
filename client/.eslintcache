[{"C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\index.js":"1","C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\reportWebVitals.js":"2","C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\Home.jsx":"3","C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\common\\Switch.js":"4","C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\common\\Helmet.js":"5","C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\saleCrud\\newsale.jsx":"6","C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\saleCrud\\salescat.jsx":"7","C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\productCrud\\products.jsx":"8","C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\saleCrud\\sales.jsx":"9","C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\generalbalance.jsx":"10","C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\outcomesCrud\\newoutcome.jsx":"11","C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\outcomesCrud\\outcomes.jsx":"12","C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\Login\\index.jsx":"13","C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\productCrud\\index.jsx":"14","C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\firebaseElements\\firebase.js":"15","C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\common\\breadcrum.jsx":"16","C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\common\\navbar.jsx":"17","C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\common\\navbargeneral.jsx":"18"},{"size":702,"mtime":1611632465612,"results":"19","hashOfConfig":"20"},{"size":375,"mtime":1611632465721,"results":"21","hashOfConfig":"20"},{"size":1558,"mtime":1612206475292,"results":"22","hashOfConfig":"20"},{"size":1091,"mtime":1611632465612,"results":"23","hashOfConfig":"20"},{"size":403,"mtime":1611632465612,"results":"24","hashOfConfig":"20"},{"size":18953,"mtime":1613185547891,"results":"25","hashOfConfig":"20"},{"size":9951,"mtime":1613181590723,"results":"26","hashOfConfig":"20"},{"size":12558,"mtime":1613239892813,"results":"27","hashOfConfig":"20"},{"size":12256,"mtime":1613181541673,"results":"28","hashOfConfig":"20"},{"size":15683,"mtime":1613180995083,"results":"29","hashOfConfig":"20"},{"size":15324,"mtime":1613187403500,"results":"30","hashOfConfig":"20"},{"size":13993,"mtime":1613235896139,"results":"31","hashOfConfig":"20"},{"size":4213,"mtime":1613233863147,"results":"32","hashOfConfig":"20"},{"size":19109,"mtime":1613186139023,"results":"33","hashOfConfig":"20"},{"size":623,"mtime":1612206475452,"results":"34","hashOfConfig":"20"},{"size":369,"mtime":1612206475322,"results":"35","hashOfConfig":"20"},{"size":5732,"mtime":1613196205012,"results":"36","hashOfConfig":"20"},{"size":4829,"mtime":1613196570272,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"g1tjon",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"40"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"40"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"40"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"40"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"40"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"40"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"40"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"40"},"C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\index.js",[],["84","85"],"C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\reportWebVitals.js",[],"C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\Home.jsx",[],"C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\common\\Switch.js",[],"C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\common\\Helmet.js",[],"C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\saleCrud\\newsale.jsx",["86"],"import Navbar from \"../common/navbar\"\r\nimport Navbargen from \"../common/navbargeneral\"\r\nimport Breadcrum from \"../common/breadcrum\"\r\nimport { useEffect, useRef, useState } from 'react'\r\nimport firebase from '../../firebaseElements/firebase'\r\nimport { Modal } from 'react-responsive-modal'\r\nimport 'react-responsive-modal/styles.css';\r\nimport CurrencyFormat from 'react-currency-format';\r\nimport Swal from 'sweetalert2'\r\nimport { Redirect } from \"react-router-dom\"\r\n\r\n\r\nconst db = firebase.firestore();\r\nconst quantityButtonStyle = {\r\n    backgroundColor: 'transparent',\r\n    border: '1px solid #ddd',\r\n    padding: '.5rem .8rem',\r\n    fontWeight: '900',\r\n    borderRadius: '4px 0px 0px 4px'\r\n}\r\nconst productQuantityStyle = {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    padding: '.5rem .8rem',\r\n    border: '1px solid rgb(221, 221, 221)'\r\n}\r\n\r\nfunction Newsale() {\r\n    const [categoriesList, setCategoriesList] = useState([])\r\n    const [productsList, setProductsList] = useState([])\r\n    const [filteredProductsList, setFilteredProductsList] = useState([])\r\n    const [orderProducts, setOrderProducts] = useState([])\r\n    const [open, setOpen] = useState(false);\r\n    const [payMethod, setPayMethod] = useState('cash')\r\n    const [redirect, setRedirect] = useState(false)\r\n    const [usertype, setUser] = useState('')\r\n    firebase.auth().onAuthStateChanged(function (user) {\r\n        if (user) {\r\n            db.collection(\"accounts\").doc(user.uid).onSnapshot((doc) => {\r\n                if (doc.data().type === 'admin') {\r\n                    setUser(\"admin\")\r\n                }\r\n                else setUser(\"user\")\r\n            })\r\n        } else {\r\n            setRedirect(true)\r\n            console.log(\"No estoy loggeado\")\r\n        }\r\n    });\r\n\r\n    useEffect(() => {\r\n        db.collection(\"products\").onSnapshot(doc => {\r\n            let allProducts = doc.docs.map(product => {\r\n                return {\r\n                    id: product.id,\r\n                    ...product.data()\r\n                }\r\n            })\r\n            setProductsList(allProducts);\r\n            db.collection(\"categories\").onSnapshot(doc => {\r\n                let allCategories = doc.docs.map(category => {\r\n                    return {\r\n                        id: category.id,\r\n                        ...category.data()\r\n                    }\r\n                })\r\n                setCategoriesList(allCategories);\r\n                setFilteredProductsList(allProducts.filter(product => product.category === allCategories[0].name))\r\n            });\r\n        });\r\n    }, [])\r\n    const filterProducts = filterBy => {\r\n        setFilteredProductsList(productsList.filter(product => product.category === filterBy))\r\n    }\r\n    const getCurrentOrderProducts = product => {\r\n        const i = orderProducts.map(e => e.id).findIndex(ele => ele === product.id);\r\n        let aux = orderProducts.map(e => e)\r\n        return [i, aux];\r\n    }\r\n    const addProduct = product => {\r\n        let [i, aux] = getCurrentOrderProducts(product)\r\n        if (i === -1)\r\n            aux.push({ quantity: 1, ...product })\r\n        else\r\n            aux[i].quantity++;\r\n        setOrderProducts(aux)\r\n    }\r\n    const moreProduct = product => {\r\n        let [i, aux] = getCurrentOrderProducts(product)\r\n        aux[i].quantity++;\r\n        setOrderProducts(aux)\r\n    }\r\n    const lessProduct = product => {\r\n        let [i, aux] = getCurrentOrderProducts(product)\r\n        if (product.quantity === 1)\r\n            aux.splice(i, 1)\r\n        else\r\n            aux[i].quantity--;\r\n        setOrderProducts(aux)\r\n    }\r\n    const totalOrder = () => {\r\n        const reducer = (accumulator, product) => accumulator + (product.quantity * product.price);\r\n        return orderProducts.reduce(reducer, 0)\r\n    }\r\n    const order = () => {\r\n        if (payMethod === 'debit' || payMethod === 'credit') {\r\n            console.log('handeled')\r\n            Swal.fire({\r\n                title: '¿Pasó la tarjeta?',\r\n                text: \"Confirma el cobro en tu terminal antes de registrar la compra\",\r\n                icon: 'question',\r\n                showCancelButton: true,\r\n                confirmButtonColor: '#e91e63',\r\n                cancelButtonColor: '#bdbdbd ',\r\n                confirmButtonText: 'Si',\r\n                cancelButtonText: 'No'\r\n            }).then(result => {\r\n                setOrderOnDB(result)\r\n            })\r\n        } else {\r\n            Swal.fire({\r\n                title: '¿El cobro fue correcto?',\r\n                text: \"Confirma el cobro antes de registrar la compra\",\r\n                icon: 'question',\r\n                showCancelButton: true,\r\n                confirmButtonColor: '#e91e63',\r\n                cancelButtonColor: '#bdbdbd ',\r\n                confirmButtonText: 'Si',\r\n                cancelButtonText: 'No'\r\n            }).then(result => {\r\n                setOrderOnDB(result)\r\n            })\r\n\r\n        }\r\n    }\r\n    const setOrderOnDB = result => {\r\n        if (result.value) {\r\n            let order = {\r\n                paymethod: payMethod,\r\n                date: firebase.firestore.Timestamp.now(),\r\n                toprint: true,\r\n                products: orderProducts.map(product => {\r\n                    return {\r\n                        name: product.name,\r\n                        price: product.price,\r\n                        cost: product.cost,\r\n                        quantity: product.quantity,\r\n                        id: product.id,\r\n                        category: product.category\r\n                    }\r\n                })\r\n            }\r\n            db.collection('orders').add(order).then(() => {\r\n                Swal.fire(\r\n                    '¡Ordenado!',\r\n                    'La orden está siendo preparada',\r\n                    'success'\r\n                )\r\n                setOrderProducts([]);\r\n            }).catch(error =>\r\n                Swal.fire(\r\n                    'Error!',\r\n                    `Ocurrio un error: ${error}`,\r\n                    'warning'\r\n                )\r\n            );\r\n            setOpen(false);\r\n        }\r\n    }\r\n    return redirect ? <Redirect to='/' /> : (\r\n        <>\r\n            <div>\r\n                {usertype === \"admin\" ? <Navbar /> : <Navbargen/>}\r\n                <section className=\"hero is-primary\">\r\n                    <div className=\"hero-body\">\r\n                        <div className=\"container\">\r\n                            <h1 className=\"title\">Nueva Venta</h1>\r\n                            <h2 className=\"subtitle\">Generar Venta</h2>\r\n                            <Breadcrum parent='Ventas' children='Nueva Venta' />\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n                <section className=\"section\">\r\n                    <div className=\"container\">\r\n                        <div className='columns'>\r\n                            <div className=\"column\">\r\n                                <label>Seleccione Categoría:</label>\r\n                                <div className=\"field has-addons\">\r\n                                    <div className=\"control is-expanded\">\r\n                                        <div className=\"select is-fullwidth\">\r\n                                            <select onChange={e => filterProducts(e.target.value)} name=\"country\">\r\n                                                {categoriesList.map(cat =>\r\n                                                    <option key={cat.id} value={cat.name}> {cat.name} </option>\r\n                                                )}\r\n                                            </select>\r\n                                        </div>\r\n                                    </div>\r\n                                    {/* <div className=\"control\">\r\n                                    <button type=\"submit\" className=\"button is-success\">Seleccionar</button>\r\n                                </div> */}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className='columns'>\r\n                            <div className=\"column\">\r\n                                <div className='card'>\r\n                                    <header className=\"card-header\">\r\n                                        <p className=\"card-header-title\">\r\n                                            Productos de la  Categoría\r\n                                    </p>\r\n                                    </header>\r\n                                    <div className=\"card-content\" style={{ overflow: 'scroll', height: '20rem' }}>\r\n                                        <div className=\"content\">\r\n                                            <table className=\"table is-hoverable\">\r\n                                                <tr>\r\n                                                    <th>Producto</th>\r\n                                                    <th>Descripción</th>\r\n                                                    <th>Precio</th>\r\n                                                </tr>\r\n                                                {filteredProductsList.map(product =>\r\n                                                    <tr onClick={() => addProduct(product)} key={product.id}>\r\n                                                        <td>{product.name} </td>\r\n                                                        <td>{product.description} </td>\r\n                                                        <td>  <CurrencyFormat decimalScale={2} fixedDecimalScale={true}\r\n                                                            value={product.price} displayType={'text'} thousandSeparator={true}\r\n                                                            prefix={'$'} /></td>\r\n                                                    </tr>\r\n                                                )}\r\n                                            </table>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"column\">\r\n                                <div className='card'>\r\n                                    <header className=\"card-header\">\r\n                                        <p className=\"card-header-title\">\r\n                                            Productos en la Orden\r\n                                    </p>\r\n                                    </header>\r\n                                    <div className=\"card-content\" style={{ overflow: 'scroll', height: '20rem' }}>\r\n                                        <div className=\"content\">\r\n                                            <table className=\"table is-hoverable\">\r\n                                                <tr>\r\n                                                    <th>Producto</th>\r\n                                                    <th>Descripción</th>\r\n                                                    <th>Cantidad</th>\r\n                                                    <th>Precio Unitario</th>\r\n                                                    <th>Total</th>\r\n                                                </tr>\r\n                                                {orderProducts.map(product =>\r\n                                                    <tr key={product.id}>\r\n                                                        <td>{product.name} </td>\r\n                                                        <td>{product.description} </td>\r\n                                                        <td><div style={{ display: 'flex' }}>\r\n                                                            <button onClick={() => lessProduct(product)} style={quantityButtonStyle}>-</button>\r\n                                                            <div style={productQuantityStyle}> {product.quantity} </div>\r\n                                                            <button onClick={() => moreProduct(product)} style={quantityButtonStyle}>+</button>\r\n                                                        </div>\r\n                                                        </td>\r\n                                                        <td>\r\n                                                            <CurrencyFormat decimalScale={2} fixedDecimalScale={true}\r\n                                                                value={product.price} displayType={'text'} thousandSeparator={true}\r\n                                                                prefix={'$'} />\r\n                                                        </td>\r\n                                                        <td>\r\n                                                            <CurrencyFormat decimalScale={2} fixedDecimalScale={true}\r\n                                                                value={product.price * product.quantity} displayType={'text'} thousandSeparator={true}\r\n                                                                prefix={'$'} />\r\n                                                        </td>\r\n                                                    </tr>)}\r\n                                            </table>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <br />\r\n                                <button onClick={() => setOpen(true)} disabled={orderProducts.length > 0 ? false : true} className='button is-success is-fullwidth'>CONFIRMAR ORDEN</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n            </div>\r\n            <Modal open={open} onClose={() => setOpen(false)} center >\r\n                <div style={{ padding: '2.5rem' }}>\r\n                    <div className=\"modal-header\">\r\n                        <h1 class=\"title\">Confirmar Orden</h1>\r\n                        <h2 class=\"subtitle\">Confirmación de la orden</h2>\r\n                    </div>\r\n                    <div className=\"modal-body\">\r\n                        <br />\r\n                        <div className=\"user-status table-responsive products-table\">\r\n                            <table className=\"table table-bordernone mb-0\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th scope=\"col\">Cantidad</th>\r\n                                        <th scope=\"col\">Producto</th>\r\n                                        <th scope=\"col\">Descripción</th>\r\n                                        <th scope=\"col\">Precio Unitario</th>\r\n                                        <th scope=\"col\">Total</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                {orderProducts.map(product =>\r\n                                    <tr key={product.id}>\r\n                                        <td>{product.quantity} </td>\r\n                                        <td>{product.name} </td>\r\n                                        <td>{product.description} </td>\r\n                                        <td>\r\n                                            <CurrencyFormat decimalScale={2} fixedDecimalScale={true}\r\n                                                value={product.price} displayType={'text'} thousandSeparator={true}\r\n                                                prefix={'$'} />\r\n                                        </td>\r\n                                        <td>\r\n                                            <CurrencyFormat decimalScale={2} fixedDecimalScale={true}\r\n                                                value={product.price * product.quantity} displayType={'text'} thousandSeparator={true}\r\n                                                prefix={'$'} />\r\n                                        </td>\r\n                                    </tr>\r\n                                )}\r\n                                <tr>\r\n                                    <td></td>\r\n                                    <td></td>\r\n                                    <td></td>\r\n                                    <td className='is-success'>Total a pagar</td>\r\n                                    <td className='is-success'>\r\n                                        <CurrencyFormat decimalScale={2} fixedDecimalScale={true}\r\n                                            value={totalOrder()} displayType={'text'} thousandSeparator={true}\r\n                                            prefix={'$'} />\r\n                                    </td>\r\n                                </tr>\r\n                                <tbody>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                        <div>\r\n                            <div className=\"row\" style={{ /* backgroundColor: '#f5f5f5', */ padding: '3%', marginTop: '4%' }}>\r\n                                <div className='col'><b>Método de pago</b></div>\r\n                                <div className='columns'>\r\n                                    <div className=\"column\" >\r\n                                        <label className=\"d-block\" >\r\n                                            <input onChange={() => setPayMethod('cash')} className=\"radio_animated\" id=\"edo-ani3\" type=\"radio\" name=\"rdo-ani2\" defaultChecked />Efectivo\r\n                            </label>\r\n                                    </div>\r\n                                    <div className=\"column\" >\r\n                                        <label className=\"d-block\">\r\n                                            <input onChange={() => setPayMethod('debit')} className=\"radio_animated\" id=\"edo-ani4\" type=\"radio\" name=\"rdo-ani2\" />Tarjeta de debito\r\n                            </label>\r\n                                    </div>\r\n                                    <div className=\"column\" >\r\n                                        <label className=\"d-block\">\r\n                                            <input onChange={() => setPayMethod('credit')} className=\"radio_animated\" id=\"edo-ani4\" type=\"radio\" name=\"rdo-ani2\" /> Tarjeta de credito\r\n                            </label>\r\n                                    </div>\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"modal-footer\">\r\n                        <button onClick={order} className=\"button is-success\">Ordenar</button>\r\n                        <button className=\"button\" onClick={() => setOpen(false)}>Cancelar</button>\r\n                    </div>\r\n                </div>\r\n            </Modal>\r\n        </>)\r\n}\r\nexport default Newsale;","C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\saleCrud\\salescat.jsx",["87"],"import Navbar from \"../common/navbar\"\r\nimport Breadcrum from \"../common/breadcrum\"\r\nimport DataTable from 'react-data-table-component';\r\nimport CurrencyFormat from 'react-currency-format';\r\nimport { useEffect, useState } from \"react\";\r\nimport firebase from '../../firebaseElements/firebase'\r\nimport { Redirect } from \"react-router-dom\"\r\n\r\n\r\nconst db = firebase.firestore();\r\n\r\n\r\nconst columns = [\r\n    {\r\n        name: 'Producto',\r\n        selector: 'name',\r\n        sortable: true,\r\n    },\r\n    {\r\n        name: 'Fecha',\r\n        cell: row => row.date.toDate().toLocaleString('es-MX', {\r\n            weekday: 'long',\r\n            year: 'numeric',\r\n            month: 'long',\r\n            day: 'numeric'\r\n        }),\r\n        sortable: true,\r\n        right: true,\r\n    },\r\n    {\r\n        name: 'Cantidad',\r\n        selector: 'quantity',\r\n        sortable: true,\r\n        right: true,\r\n    },\r\n\r\n    {\r\n        name: 'Precio Unitario',\r\n        selector: row => row.price,\r\n        cell: row => <CurrencyFormat\r\n            decimalScale={2}\r\n            fixedDecimalScale={true}\r\n            value={row.price}\r\n            displayType={'text'}\r\n            thousandSeparator={true}\r\n            prefix={'$'}\r\n        />,\r\n        sortable: true,\r\n        right: true,\r\n    },\r\n\r\n    {\r\n        name: 'Monto Total',\r\n        selector: row => row.price *row.quantity,\r\n        cell: row => <CurrencyFormat\r\n            decimalScale={2}\r\n            fixedDecimalScale={true}\r\n            value={row.price *row.quantity}\r\n            displayType={'text'}\r\n            thousandSeparator={true}\r\n            prefix={'$'}\r\n        />,\r\n        sortable: true,\r\n        right: true,\r\n    },\r\n    \r\n];\r\n\r\nconst customStyles = {\r\n    header: {\r\n        style: {\r\n            fontSize: '22px',\r\n            color: 'white',\r\n            backgroundColor: '#e91e63',\r\n            minHeight: '56px',\r\n            paddingLeft: '16px',\r\n            paddingRight: '8px',\r\n        },\r\n    },\r\n    headRow: {\r\n        style: {\r\n            backgroundColor: '#fafafa',\r\n            minHeight: '56px',\r\n            borderBottomWidth: '1.5px',\r\n            borderBottomColor: '#1293e1',\r\n            borderBottomStyle: 'solid',\r\n        },\r\n        denseStyle: {\r\n            minHeight: '32px',\r\n        },\r\n    },\r\n    headCells: {\r\n        style: {\r\n            fontSize: '1rem',\r\n            fontWeight: 700,\r\n            color: '#616161',\r\n            paddingLeft: '16px',\r\n            paddingRight: '16px',\r\n        },\r\n        activeSortStyle: {\r\n            color: '#1293e1',\r\n            '&:focus': {\r\n                outline: 'none',\r\n            },\r\n            '&:hover:not(:focus)': {\r\n                color: '#1293e1',\r\n            },\r\n        },\r\n        inactiveSortStyle: {\r\n            '&:focus': {\r\n                outline: 'none',\r\n                color: '#1293e1',\r\n            },\r\n            '&:hover': {\r\n                color: '#4dbbff',\r\n            },\r\n        },\r\n    },\r\n};\r\n\r\nfunction Salescat() {\r\n    const [startDate, setStartDate] = useState('');\r\n    const [finalDate, setFinalDate] = useState('');\r\n    const [category, setCategory] = useState('');\r\n    const [categoriesList, setCategoriesList] = useState([])\r\n    const [allProducts, setAllProducts] = useState([])\r\n    const [totalCost, setTotalCost] = useState(0)\r\n    const [totalPrice, setTotalPrice] = useState(0)\r\n    const [redirect, setRedirect] = useState(false);\r\n\r\n    firebase.auth().onAuthStateChanged(function (user) {\r\n        if (user) {\r\n            // User is signed in.\r\n        } else {\r\n           setRedirect(true)\r\n           console.log(\"No estoy loggeado\")\r\n        }\r\n    });\r\n\r\n    useEffect(() => {\r\n        getAllData()\r\n        console.log('effect')\r\n    },[startDate,finalDate,category])\r\n    \r\n    useEffect(() => {\r\n            db.collection(\"categories\").onSnapshot(doc => {\r\n                let allCategories = doc.docs.map(category => {\r\n                    return {\r\n                        id: category.id,\r\n                        ...category.data()\r\n                    }\r\n                })\r\n                setCategoriesList(allCategories);\r\n            });\r\n    }, [])\r\n    const getAllData = async () => {\r\n        if (startDate && finalDate) {\r\n            const querySnapshot = await db.collection(\"orders\")\r\n                .where('date', '>', toDate(startDate, 0, 0, 0))\r\n                .where('date', '<=', toDate(finalDate, 23, 59, 59))\r\n                .get()\r\n\r\n            const allProducts = []\r\n            querySnapshot.docs.forEach(sale => {\r\n                sale.data().products.forEach(product=>{\r\n                    if(product.category===category){\r\n                        allProducts.push({\r\n                            ...product,\r\n                            date: sale.data().date\r\n                        })\r\n                    }\r\n                }) \r\n            })\r\n            setTotalCost(totalOrder(allProducts,'cost'))\r\n            setTotalPrice(totalOrder(allProducts,'price'))\r\n            setAllProducts(allProducts)\r\n        }\r\n    }\r\n    const totalOrder = (products,concept) => {\r\n        const reducer = (accumulator, product) => accumulator + (product.quantity * product[concept]);\r\n        return products.reduce(reducer, 0)\r\n    }\r\n    const toDate = (text, h, m, s) => {\r\n        const dataAux = text.split('-')\r\n        const temDate = new Date(Number(dataAux[0]), Number(dataAux[1]) - 1, Number(dataAux[2]), h, m, s)\r\n        return firebase.firestore.Timestamp.fromDate(temDate)\r\n    }\r\n    return redirect ? <Redirect to='/' /> :(\r\n        <div>\r\n            <Navbar />\r\n            <section class=\"hero is-primary\">\r\n                <div class=\"hero-body\">\r\n                    <div class=\"container\">\r\n                        <h1 class=\"title\">Ventas por Categoría</h1>\r\n                        <h2 class=\"subtitle\">Consulta las ventas por categoría</h2>\r\n                        <Breadcrum  parent='Ventas' children='Ventas por Categoría' />\r\n                    </div>\r\n                </div>\r\n            </section>\r\n            <section class=\"section\">\r\n                <div class=\"container\">\r\n                    <div className='columns'>\r\n                        <div className='column is-4'>\r\n                            <div class=\"field\">\r\n                                <label class=\"label\">Fecha de inicio</label>\r\n                                <div class=\"control\">\r\n                                    <input onChange={e => setStartDate(e.target.value)}  class=\"input\" type=\"date\" placeholder=\"Nombre del producto\" />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className='column is-4'>\r\n                            <div class=\"field\">\r\n                                <label class=\"label\">Fecha de Fin</label>\r\n                                <div class=\"control\">\r\n                                    <input onChange={e => setFinalDate(e.target.value)} class=\"input\" type=\"date\" placeholder=\"Nombre del producto\" />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className='column is-4'>\r\n                            <div class=\"field\">\r\n                                <label class=\"label\">Categoría</label>\r\n                                <div class=\"control\">\r\n                                    <div class=\"select is-fullwidth\">\r\n                                        <select onChange={e => setCategory(e.target.value)}>\r\n                                            <option selected disabled>Seleccione una categoría</option>\r\n                                            {categoriesList.map(cat =>\r\n                                                <option key={cat.id} value={cat.name}> {cat.name} </option>\r\n                                            )}\r\n                                        </select>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"table-container\">\r\n                        <table className='table' style={{ marginBottom: '2%', textAlign: 'center', width: '100%' }}>\r\n                            <tr>\r\n                                <th className='ocultar-div'><small>Costos de </small><br />Producción</th>\r\n                                <th className='ocultar-div'><small>Precio</small><br />Venta</th>\r\n                                <th className='is-success'><small>Ganancias </small><br />Netas</th>\r\n                            </tr>\r\n                            <tr>\r\n                                <td className='ocultar-div'><CurrencyFormat decimalScale={2} fixedDecimalScale={true} value={totalCost} displayType={'text'} thousandSeparator={true} prefix={'$'} /></td>\r\n                                <td className='ocultar-div'><CurrencyFormat decimalScale={2} fixedDecimalScale={true} value={totalPrice} displayType={'text'} thousandSeparator={true} prefix={'$'} /></td>\r\n                                <td><b style={{ fontSize: '1.1rem' }}><CurrencyFormat decimalScale={2} fixedDecimalScale={true} value={totalPrice-totalCost} displayType={'text'} thousandSeparator={true} prefix={'$'} /></b></td>\r\n                            </tr>\r\n                        </table>\r\n                    </div>\r\n\r\n                    <DataTable\r\n                        columns={columns}\r\n                        data={allProducts}\r\n                        pagination={true}\r\n                        customStyles={customStyles}\r\n                        paginationComponentOptions={{ rowsPerPageText: 'Filas por pagina:', rangeSeparatorText: 'de' }}\r\n                    />\r\n                </div>\r\n            </section>\r\n          \r\n        </div>\r\n    )\r\n}\r\nexport default Salescat;","C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\productCrud\\products.jsx",[],"C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\saleCrud\\sales.jsx",["88"],"import Navbar from \"../common/navbar\"\r\nimport Breadcrum from \"../common/breadcrum\"\r\nimport DataTable from 'react-data-table-component';\r\nimport CurrencyFormat from 'react-currency-format';\r\nimport { useEffect, useState } from \"react\";\r\nimport firebase from '../../firebaseElements/firebase'\r\nimport { Modal } from 'react-responsive-modal'\r\nimport memoize from 'memoize-one';\r\nimport 'react-responsive-modal/styles.css';\r\nimport { Redirect } from \"react-router-dom\"\r\n\r\n\r\nconst db = firebase.firestore();\r\nconst columns = memoize((details, setDetails) => [\r\n    {\r\n        name: 'Folio',\r\n        selector: 'id',\r\n        sortable: true,\r\n    },\r\n    {\r\n        name: 'Fecha',\r\n        cell: row => row.date.toDate().toLocaleString('es-MX', {\r\n            weekday: 'long',\r\n            year: 'numeric',\r\n            month: 'long',\r\n            day: 'numeric'\r\n        }),\r\n        sortable: true,\r\n        right: true,\r\n    },\r\n\r\n    {\r\n        name: 'Monto',\r\n        selector: row => row.total,\r\n        cell: row => <CurrencyFormat\r\n            decimalScale={2}\r\n            fixedDecimalScale={true}\r\n            value={row.total}\r\n            displayType={'text'}\r\n            thousandSeparator={true}\r\n            prefix={'$'}\r\n        />,\r\n        sortable: true,\r\n        right: true,\r\n    },\r\n\r\n    {\r\n        name: 'Detalles',\r\n        cell: row => <div className='is-flex'><button onClick={() => { details(true); setDetails(row) }} className='button is-success' style={{ marginRight: '2%' }}>Detalles</button></div>,\r\n        right: true,\r\n    },\r\n]);\r\n\r\nconst customStyles = {\r\n    header: {\r\n        style: {\r\n            fontSize: '22px',\r\n            color: 'white',\r\n            backgroundColor: '#e91e63',\r\n            minHeight: '56px',\r\n            paddingLeft: '16px',\r\n            paddingRight: '8px',\r\n        },\r\n    },\r\n    headRow: {\r\n        style: {\r\n            backgroundColor: '#fafafa',\r\n            minHeight: '56px',\r\n            borderBottomWidth: '1.5px',\r\n            borderBottomColor: '#1293e1',\r\n            borderBottomStyle: 'solid',\r\n        },\r\n        denseStyle: {\r\n            minHeight: '32px',\r\n        },\r\n    },\r\n    headCells: {\r\n        style: {\r\n            fontSize: '1rem',\r\n            fontWeight: 700,\r\n            color: '#616161',\r\n            paddingLeft: '16px',\r\n            paddingRight: '16px',\r\n        },\r\n        activeSortStyle: {\r\n            color: '#1293e1',\r\n            '&:focus': {\r\n                outline: 'none',\r\n            },\r\n            '&:hover:not(:focus)': {\r\n                color: '#1293e1',\r\n            },\r\n        },\r\n        inactiveSortStyle: {\r\n            '&:focus': {\r\n                outline: 'none',\r\n                color: '#1293e1',\r\n            },\r\n            '&:hover': {\r\n                color: '#4dbbff',\r\n            },\r\n        },\r\n    },\r\n};\r\n\r\n\r\n\r\nfunction Sales() {\r\n    const [startDate, setStartDate] = useState('');\r\n    const [finalDate, setFinalDate] = useState('');\r\n    const [salesResume, setSalesResume] = useState('');\r\n    const [totalCash, setTotalCash] = useState(0);\r\n    const [totalDebit, setTotalDebit] = useState(0);\r\n    const [totalCredit, setTotalCredit] = useState(0);\r\n    const [open, setOpen] = useState(false);\r\n    const [orderDetail, setorderDetail] = useState();\r\n    const [defaultDate, setDefaultDate] =useState();\r\n    const [redirect, setRedirect] = useState(false);\r\n\r\n    firebase.auth().onAuthStateChanged(function (user) {\r\n        if (user) {\r\n            // User is signed in.\r\n        } else {\r\n           setRedirect(true)\r\n           console.log(\"No estoy loggeado\")\r\n        }\r\n    });\r\n\r\n\r\n    useEffect(() => {\r\n        getAllData()\r\n        console.log('effect')\r\n    }, [startDate, finalDate])\r\n    useEffect(()=>{\r\n        const today = new Date()\r\n        let month = today.getMonth()+1 <= 9 ?  `0${today.getMonth()+1}` :today.getMonth()+1\r\n        let day = today.getDate() <= 9 ?  `0${today.getDate()}` : today.getDate()\r\n        let customDate = `${today.getFullYear()}-${month}-${day}`\r\n\r\n\r\n        console.log(customDate)\r\n        setDefaultDate(customDate)\r\n        setStartDate(customDate)\r\n        setFinalDate(customDate)\r\n        \r\n    },[])\r\n    const getAllData = async () => {\r\n        if (startDate && finalDate) {\r\n            const querySnapshot = await db.collection(\"orders\")\r\n                .where('date', '>', toDate(startDate, 0, 0, 0))\r\n                .where('date', '<=', toDate(finalDate, 23, 59, 59))\r\n                .get()\r\n\r\n            const orders = querySnapshot.docs.map(sale => {\r\n                return {\r\n                    id: sale.id,\r\n                    ...sale.data(),\r\n                    total: totalOrder(sale.data().products)\r\n                }\r\n            })\r\n            setTotalCash(setTotalByPaymethod(orders, 'cash'))\r\n            setTotalDebit(setTotalByPaymethod(orders, 'debit'))\r\n            setTotalCredit(setTotalByPaymethod(orders, 'credit'))\r\n            setSalesResume(orders)\r\n        }\r\n    }\r\n    const setTotalByPaymethod = (orders, paymethod) => {\r\n        const reducer = (accumulator, order) => accumulator + totalOrder(order.products);\r\n        return orders.filter(order => order.paymethod === paymethod).reduce(reducer, 0);\r\n    }\r\n    const totalOrder = products => {\r\n        const reducer = (accumulator, product) => accumulator + (product.quantity * product.price);\r\n        return products.reduce(reducer, 0)\r\n    }\r\n\r\n    const toDate = (text, h, m, s) => {\r\n        const dataAux = text.split('-')\r\n        const temDate = new Date(Number(dataAux[0]), Number(dataAux[1]) - 1, Number(dataAux[2]), h, m, s)\r\n        return firebase.firestore.Timestamp.fromDate(temDate)\r\n    }\r\n    return redirect ? <Redirect to='/' /> :(\r\n        <div>\r\n            <Navbar />\r\n            <section class=\"hero is-primary\">\r\n                <div class=\"hero-body\">\r\n                    <div class=\"container\">\r\n                        <h1 class=\"title\">Ventas Generales</h1>\r\n                        <h2 class=\"subtitle\">Consulta las ventas generales</h2>\r\n                        <Breadcrum parent='Ventas' children='Ventas Generales' />\r\n                    </div>\r\n                </div>\r\n            </section>\r\n            <section class=\"section\">\r\n                <div class=\"container\">\r\n                    <div className='columns'>\r\n                        <div className='column is-6'>\r\n                            <div class=\"field\">\r\n                                <label class=\"label\">Fecha de inicio</label>\r\n                                <div class=\"control\">\r\n                                    <input defaultValue={defaultDate} onChange={e => setStartDate(e.target.value)} class=\"input\" type=\"date\" placeholder=\"Nombre del producto\" />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className='column is-6'>\r\n                            <div class=\"field\">\r\n                                <label class=\"label\">Fecha de Fin</label>\r\n                                <div class=\"control\">\r\n                                    <input defaultValue={defaultDate} onChange={e => setFinalDate(e.target.value)} class=\"input\" type=\"date\" placeholder=\"Nombre del producto\" />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"table-container\">\r\n                        <table className='table' style={{ marginBottom: '2%', textAlign: 'center', width: '100%' }}>\r\n                            <tr>\r\n                                <th className='ocultar-div'><small>Pagos </small><br />Efectivo</th>\r\n                                <th className='ocultar-div'><small>Pagos </small><br />Tarjeta Crédito</th>\r\n                                <th className='ocultar-div'><small>Pagos </small><br />Tarjeta Débito</th>\r\n                                <th className='is-success'><small>Total </small><br />Ventas</th>\r\n                            </tr>\r\n                            <tr>\r\n                                <td className='ocultar-div'><CurrencyFormat decimalScale={2} fixedDecimalScale={true} value={totalCash} displayType={'text'} thousandSeparator={true} prefix={'$'} /></td>\r\n                                <td className='ocultar-div'><CurrencyFormat decimalScale={2} fixedDecimalScale={true} value={totalCredit} displayType={'text'} thousandSeparator={true} prefix={'$'} /></td>\r\n                                <td className='ocultar-div'><CurrencyFormat decimalScale={2} fixedDecimalScale={true} value={totalDebit} displayType={'text'} thousandSeparator={true} prefix={'$'} /></td>\r\n                                <td><b style={{ fontSize: '1.1rem' }}><CurrencyFormat decimalScale={2} fixedDecimalScale={true} value={totalCash + totalCredit + totalDebit} displayType={'text'} thousandSeparator={true} prefix={'$'} /></b></td>\r\n                            </tr>\r\n                        </table>\r\n                    </div>\r\n\r\n                    <DataTable\r\n                        columns={columns(setOpen, setorderDetail)}\r\n                        data={salesResume}\r\n                        pagination={true}\r\n                        customStyles={customStyles}\r\n                        paginationComponentOptions={{ rowsPerPageText: 'Filas por pagina:', rangeSeparatorText: 'de' }}\r\n                    />\r\n                </div>\r\n            </section>\r\n            {orderDetail ? <Modal open={open} onClose={() => setOpen(false)} center >\r\n\r\n                <div style={{ padding: '3rem' }}>\r\n                    <div class=\"container\">\r\n                        <h1 class=\"title\">\r\n                            {orderDetail.id}\r\n                        </h1>\r\n                        <h2 class=\"subtitle\">\r\n                            {orderDetail.date.toDate().toLocaleString('es-MX', {\r\n                                weekday: 'long',\r\n                                year: 'numeric',\r\n                                month: 'long',\r\n                                day: 'numeric'\r\n                            })}\r\n                        </h2>\r\n                    </div>\r\n                    <div className=\"modal-body\">\r\n                        <br />\r\n                        <br />\r\n                        <div class=\"table-container\">\r\n                            <table class=\"table is-fullwidth\">\r\n                                <tr>\r\n                                    <th>Producto</th>\r\n                                    <th>Cantidad</th>\r\n                                    <th>Precio Unitario</th>\r\n                                    <th>Total</th>\r\n                                </tr>\r\n                                {orderDetail.products.map(product =>\r\n                                    <tr>\r\n                                        <td>{product.name} </td>\r\n                                        <td>{product.quantity}</td>\r\n                                        <td><CurrencyFormat decimalScale={2} fixedDecimalScale={true} value={product.price} displayType={'text'} thousandSeparator={true} prefix={'$'} /> </td>\r\n                                        <td><CurrencyFormat decimalScale={2} fixedDecimalScale={true} value={product.price * product.quantity} displayType={'text'} thousandSeparator={true} prefix={'$'} /> </td>\r\n                                    </tr>\r\n                                )}\r\n                                <tr>\r\n                                    <td></td>\r\n                                    <td></td>\r\n                                    <td className='is-success'>TOTAL</td>\r\n                                    <td className='is-success'><b><CurrencyFormat decimalScale={2} fixedDecimalScale={true} value={orderDetail.total} displayType={'text'} thousandSeparator={true} prefix={'$'}/></b> </td>\r\n                                </tr>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"modal-footer\">\r\n\r\n                    </div>\r\n                </div>\r\n            </Modal> : null}\r\n        </div>\r\n    )\r\n}\r\nexport default Sales;","C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\generalbalance.jsx",["89"],"import Navbar from \"./common/navbar\"\r\nimport Breadcrum from \"./common/breadcrum\"\r\nimport CurrencyFormat from 'react-currency-format';\r\nimport { useEffect, useState } from \"react\";\r\nimport firebase from '../firebaseElements/firebase'\r\nimport { Redirect } from \"react-router-dom\"\r\n\r\nconst db = firebase.firestore();\r\n\r\nfunction Balance() {\r\n    const [startDate, setStartDate] = useState('');\r\n    const [finalDate, setFinalDate] = useState('');\r\n    const [generalOutcom, setGeneralOutcome] = useState(0);\r\n    const [operativeOutcome, setOperativeOutcome] = useState(0);\r\n    const [administrativeOutcome, setAdministrativeOutcome] = useState(0);\r\n    const [totalOutcome, setTotalOutcome] = useState(0);\r\n    const [otherIncomes, setOtherIncomes] = useState(0);\r\n    const [salesByCategory, setSalesByCategory] = useState([])\r\n    const [generalSales, setGeneralSales] = useState(0)\r\n    const [sumOfIncomes, setSumOfIncomes] = useState(0)\r\n    const [defaultDate, setDefaultDate] =useState();\r\n    const [redirect, setRedirect] = useState(false);\r\n\r\n    firebase.auth().onAuthStateChanged(function (user) {\r\n        if (user) {\r\n            // User is signed in.\r\n        } else {\r\n           setRedirect(true)\r\n           console.log(\"No estoy loggeado\")\r\n        }\r\n    });\r\n\r\n    useEffect(()=>{\r\n        const today = new Date()\r\n        let month = today.getMonth()+1 <= 9 ?  `0${today.getMonth()+1}` :today.getMonth()+1\r\n        let day = today.getDate() <= 9 ?  `0${today.getDate()}` : today.getDate()\r\n        let customDate = `${today.getFullYear()}-${month}-${day}`\r\n\r\n\r\n        console.log(customDate)\r\n        setDefaultDate(customDate)\r\n        setStartDate(customDate)\r\n        setFinalDate(customDate)\r\n        \r\n    },[])\r\n\r\n    useEffect(() => {\r\n        getAllData()\r\n        console.log('effect')\r\n    }, [startDate, finalDate])\r\n\r\n    const getAllData = async () => {\r\n        if (startDate && finalDate) {\r\n            const querySnapshot = await db.collection(\"outcomes\")\r\n                .where('date', '>', toDate(startDate, 0, 0, 0))\r\n                .where('date', '<=', toDate(finalDate, 23, 59, 59))\r\n                .get()\r\n\r\n            const allOutcomes = querySnapshot.docs.map(sale => {\r\n                return {\r\n                    id: sale.id,\r\n                    ...sale.data()\r\n                }\r\n            })\r\n            setGeneralOutcome(getTotal(allOutcomes.filter(outcome => {return outcome.outcomeKind === 'Gasto General' && outcome.status==='Autorizado'})))\r\n            setOperativeOutcome(getTotal(allOutcomes.filter(outcome => {return outcome.outcomeKind === 'Gasto Operativo' && outcome.status==='Autorizado'})))\r\n            setAdministrativeOutcome(getTotal(allOutcomes.filter(outcome => {return outcome.outcomeKind === 'Gasto Administrativo' && outcome.status==='Autorizado'})))\r\n            const tempOtherIncomes = getTotal(allOutcomes.filter(outcome => outcome.kind === 'Ingreso'))\r\n            setOtherIncomes(tempOtherIncomes)\r\n            setTotalOutcome(getTotal(allOutcomes.filter(o => o.kind === 'Gasto')))\r\n\r\n            const querySnapshot2 = await db.collection(\"orders\")\r\n                .where('date', '>', toDate(startDate, 0, 0, 0))\r\n                .where('date', '<=', toDate(finalDate, 23, 59, 59))\r\n                .get()\r\n\r\n            const allIncomes = querySnapshot2.docs.map(sale => {\r\n                return {\r\n                    id: sale.id,\r\n                    ...sale.data()\r\n                }\r\n            })\r\n\r\n            const categoriesData = await db.collection(\"categories\").get()\r\n            const allCategories = categoriesData.docs.map(cat => {\r\n                return {\r\n                    id: cat.id,\r\n                    ...cat.data()\r\n                }\r\n            })\r\n            const externCategories = allCategories.filter(c => c.extern === true)\r\n\r\n            const [totalGeneralSales, externTotals, totalIncomes] = totalGeneralSalesAndTotalSalesByCategory(allIncomes, externCategories)\r\n            setGeneralSales(totalGeneralSales)\r\n            setSalesByCategory(externTotals)\r\n            setSumOfIncomes(totalIncomes + tempOtherIncomes)\r\n        }\r\n    }\r\n    const getTotal = filteredOutcome => {\r\n        const reducer = (accumulator, outcome) => accumulator + (outcome.quantity);\r\n        return filteredOutcome.reduce(reducer, 0)\r\n    }\r\n    const totalGeneralSalesAndTotalSalesByCategory = (allIncomes, externCategories) => {\r\n\r\n        let allProducts = []\r\n        allIncomes.forEach(order => {\r\n            order.products.forEach(product => {\r\n                if (!externCategories.some(cat => cat.name === product.category))\r\n                    allProducts.push(product)\r\n                else {\r\n                    const i = externCategories.map(c => c.name).findIndex(c => c === product.category)\r\n                    externCategories[i].productsSold ? externCategories[i].productsSold.push(product) : externCategories[i].productsSold = [product]\r\n                }\r\n            })\r\n        });\r\n\r\n        const reducer = (accumulator, product) => accumulator + (product.quantity * product.price);\r\n\r\n        externCategories.forEach(c => {\r\n            if (c.productsSold)\r\n                c.total = c.productsSold.reduce(reducer, 0)\r\n            else\r\n                c.total = 0\r\n        })\r\n\r\n        const salesNotExtern = allProducts.reduce(reducer, 0)\r\n        const getSumOfTotals = (accumulator, category) => accumulator + category.total;\r\n        const totalIncomes = salesNotExtern + externCategories.reduce(getSumOfTotals, 0)\r\n\r\n        return [salesNotExtern, externCategories, totalIncomes]\r\n    }\r\n\r\n    const toDate = (text, h, m, s) => {\r\n        const dataAux = text.split('-')\r\n        const temDate = new Date(Number(dataAux[0]), Number(dataAux[1]) - 1, Number(dataAux[2]), h, m, s)\r\n        return firebase.firestore.Timestamp.fromDate(temDate)\r\n    }\r\n    return  redirect ? <Redirect to='/' /> :(\r\n        <div>\r\n            <Navbar />\r\n            <section class=\"hero is-primary\">\r\n                <div class=\"hero-body\">\r\n                    <div class=\"container\">\r\n                        <h1 class=\"title\">Balance General </h1>\r\n                        <h2 class=\"subtitle\">Consulta la relación entre gastos e ingresos.</h2>\r\n                        <Breadcrum parent='Gastos e Ingresos' children='Balance General' />\r\n                    </div>\r\n                </div>\r\n            </section>\r\n            <section class=\"section\">\r\n                <div class=\"container\">\r\n                    <div className='columns'>\r\n                        <div className='column is-6'>\r\n                            <div class=\"field\">\r\n                                <label class=\"label\">Fecha de inicio</label>\r\n                                <div class=\"control\">\r\n                                    <input defaultValue={defaultDate}  onChange={e => setStartDate(e.target.value)} class=\"input\" type=\"date\" placeholder=\"Nombre del producto\" />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className='column is-6'>\r\n                            <div class=\"field\">\r\n                                <label class=\"label\">Fecha de Fin</label>\r\n                                <div class=\"control\">\r\n                                    <input defaultValue={defaultDate}  onChange={e => setFinalDate(e.target.value)} class=\"input\" type=\"date\" placeholder=\"Nombre del producto\" />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                    <div className='table-container'>\r\n                        <table className='table' style={{ marginBottom: '2%', width: '100%' }}>\r\n                            <tbody >\r\n                                <tr style={{ textAlign: 'center' }}>\r\n                                    <th colSpan='2' className='is-success'>GASTOS</th>\r\n                                    <th colSpan='2' className='is-info'>INGRESOS</th>\r\n                                </tr>\r\n                                <tr>\r\n                                    <th>Concepto</th>\r\n                                    <th style={{ borderRight: '1px solid #dee2e6' }}>Monto</th>\r\n                                    <th>Concepto</th>\r\n                                    <th>Monto</th>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Gastos en General</td>\r\n                                    <td style={{ borderRight: '1px solid #dee2e6' }}>\r\n                                        <CurrencyFormat\r\n                                            decimalScale={2}\r\n                                            fixedDecimalScale={true}\r\n                                            value={generalOutcom}\r\n                                            displayType={'text'}\r\n                                            thousandSeparator={true}\r\n                                            prefix={'$'}\r\n                                        />\r\n                                    </td>\r\n\r\n                                    <td >Ventas en General</td>\r\n                                    <td >\r\n                                        <CurrencyFormat\r\n                                            decimalScale={2}\r\n                                            fixedDecimalScale={true}\r\n                                            value={generalSales}\r\n                                            displayType={'text'}\r\n                                            thousandSeparator={true}\r\n                                            prefix={'$'}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Gastos Operativos</td>\r\n                                    <td style={{ borderRight: '1px solid #dee2e6' }}>\r\n                                        <CurrencyFormat\r\n                                            decimalScale={2}\r\n                                            fixedDecimalScale={true}\r\n                                            value={operativeOutcome}\r\n                                            displayType={'text'}\r\n                                            thousandSeparator={true}\r\n                                            prefix={'$'}\r\n                                        />\r\n                                    </td>\r\n                                    <td >Otros Ingresos</td>\r\n                                    <td >\r\n                                        <CurrencyFormat\r\n                                            decimalScale={2}\r\n                                            fixedDecimalScale={true}\r\n                                            value={otherIncomes}\r\n                                            displayType={'text'}\r\n                                            thousandSeparator={true}\r\n                                            prefix={'$'}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Gastos Administrativos</td>\r\n                                    <td style={{ borderRight: '1px solid #dee2e6' }}>\r\n                                        <CurrencyFormat\r\n                                            decimalScale={2}\r\n                                            fixedDecimalScale={true}\r\n                                            value={administrativeOutcome}\r\n                                            displayType={'text'}\r\n                                            thousandSeparator={true}\r\n                                            prefix={'$'}\r\n                                        />\r\n                                    </td>\r\n                                    {/* <td >Polka Donuts</td>\r\n                                    <td >\r\n                                        <CurrencyFormat\r\n                                            decimalScale={2}\r\n                                            fixedDecimalScale={true}\r\n                                            value={250}\r\n                                            displayType={'text'}\r\n                                            thousandSeparator={true}\r\n                                            prefix={'$'}\r\n                                        />\r\n                                    </td> */}\r\n                                    <td colSpan='2' className='is-info' style={{ textAlign: 'center' }}>\r\n                                        Proveedores Externos\r\n                                    </td>\r\n                                </tr>\r\n                                {salesByCategory.map(c =>\r\n                                    <tr>\r\n                                        <td></td>\r\n                                        <td style={{ borderRight: '1px solid #dee2e6' }}>\r\n                                        </td>\r\n                                        <td > {c.name} </td>\r\n                                        <td >\r\n                                            <CurrencyFormat\r\n                                                decimalScale={2}\r\n                                                fixedDecimalScale={true}\r\n                                                value={c.total}\r\n                                                displayType={'text'}\r\n                                                thousandSeparator={true}\r\n                                                prefix={'$'}\r\n                                            />\r\n                                        </td>\r\n                                    </tr>\r\n                                )}\r\n                                <tr style={{ fontWeight: '900', backgroundColor: '#e0e0e0' }}>\r\n                                    <td >TOTAL GASTOS</td>\r\n                                    <td> <CurrencyFormat decimalScale={2} fixedDecimalScale={true} value={totalOutcome} displayType={'text'} thousandSeparator={true} prefix={'$'} /></td>\r\n                                    <td >TOTAL INGRESOS</td>\r\n                                    <td ><CurrencyFormat decimalScale={2} fixedDecimalScale={true} value={sumOfIncomes} displayType={'text'} thousandSeparator={true} prefix={'$'} />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr style={{ textAlign: 'center', backgroundColor: 'rgba(159, 214, 248, 0.1)' }}>\r\n                                    <th colSpan='2'>Utilidad Neta (Ingresos - Gastos)</th>\r\n                                    <th colSpan='2'>\r\n                                        <CurrencyFormat\r\n                                            decimalScale={2}\r\n                                            fixedDecimalScale={true}\r\n                                            value={sumOfIncomes - totalOutcome}\r\n                                            displayType={'text'}\r\n                                            thousandSeparator={true}\r\n                                            prefix={'$'}\r\n                                        />\r\n                                    </th>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        </div>\r\n    )\r\n}\r\nexport default Balance;","C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\outcomesCrud\\newoutcome.jsx",["90"],"import Navbar from \"../common/navbar\"\r\nimport Navbargen from \"../common/navbargeneral\"\r\nimport Breadcrum from \"../common/breadcrum\"\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faUpload } from '@fortawesome/free-solid-svg-icons'\r\nimport { useEffect, useState, useRef } from \"react\";\r\nimport firebase from '../../firebaseElements/firebase'\r\nimport Swal from 'sweetalert2'\r\nimport { Redirect } from \"react-router-dom\"\r\n\r\nconst db = firebase.firestore();\r\n\r\nfunction Newoutcome() {\r\n    const [kind, setKind] = useState('');\r\n    const [outcomeKind, setOutcomeKind] = useState('Gasto General');\r\n    const [concept, setConcept] = useState('');\r\n    const [quantity, setQuantity] = useState(0);\r\n    const [date, setDate] = useState('');\r\n    const [description, setDescription] = useState('');\r\n    const [paymethod, setPaymethod] = useState('');\r\n    const [responsable, setResponsable] = useState('');\r\n    const [authorizer, setAuthorizer] = useState('');\r\n    const [fileName, setFileName] = useState('');\r\n    const [redirect, setRedirect] = useState(false);\r\n    const [usertype, setUser] = useState('')\r\n\r\n    const ticket = useRef(null);\r\n    const kindRef = useRef(null);\r\n    const outcomeKindRef = useRef(null);\r\n    const conceptRef = useRef(null);\r\n    const quantityRef = useRef(null);\r\n    const dateRef = useRef(null);\r\n    const descriptionRef = useRef(null);\r\n    const paymethodRRef = useRef(null);\r\n    const responsableRef = useRef(null);\r\n    const authorizerRef = useRef(null);\r\n\r\n    const refs = [ticket,\r\n        kindRef,\r\n        conceptRef,\r\n        quantityRef,\r\n        dateRef,\r\n        descriptionRef,\r\n        paymethodRRef,\r\n        responsableRef,\r\n        authorizerRef\r\n    ]\r\n\r\n    const save = async () => {\r\n        console.log('working')\r\n        let storageRef = firebase.storage().ref();\r\n        const ticketImg = storageRef.child(`outcomes/${Date.now()}.webp`);\r\n\r\n        await ticketImg.put(ticket.current.files[0])\r\n        const downloadURL = await ticketImg.getDownloadURL()\r\n        const newOutcome = {\r\n            kind: kind,\r\n            concept: concept,\r\n            quantity: Number(quantity),\r\n            date: toDate(date, 12, 0, 0),\r\n            description: description,\r\n            paymethod: paymethod,\r\n            responsable: responsable,\r\n            authorizer: authorizer,\r\n            ticketImg: downloadURL,\r\n            status: 'Pendiente'\r\n        }\r\n        if (outcomeKind)\r\n            newOutcome.outcomeKind = outcomeKind\r\n        db.collection('outcomes').add(newOutcome).then(() => {\r\n            Swal.fire(\r\n                'Registrado!',\r\n                'El movimiento se registro con exito',\r\n                'success'\r\n            )\r\n            refs.forEach(ref => ref.current.value = '')\r\n            //outcomeKindRef.current.value='Gasto General'\r\n            //ticket.current.files[0]=''\r\n            setFileName('')\r\n        }).catch(error =>\r\n            Swal.fire(\r\n                'Error!',\r\n                `Ocurrio un error: ${error}`,\r\n                'warning'\r\n            )\r\n        );\r\n        console.log(downloadURL)\r\n        console.log('saved')\r\n    }\r\n    const toDate = (text, h, m, s) => {\r\n        const dataAux = text.split('-')\r\n        const temDate = new Date(Number(dataAux[0]), Number(dataAux[1]) - 1, Number(dataAux[2]), h, m, s)\r\n        return firebase.firestore.Timestamp.fromDate(temDate)\r\n    }\r\n\r\n    firebase.auth().onAuthStateChanged(function (user) {\r\n        if (user) {\r\n            db.collection(\"accounts\").doc(user.uid).onSnapshot((doc) => {\r\n                if (doc.data().type === 'admin') {\r\n                    setUser(\"admin\")\r\n                }\r\n                else setUser(\"user\")\r\n            })\r\n        } else {\r\n            setRedirect(true)\r\n            console.log(\"No estoy loggeado\")\r\n        }\r\n    });\r\n\r\n    return redirect ? <Redirect to='/' /> : (\r\n        <div>\r\n            {usertype === \"admin\" ? <Navbar /> : <Navbargen/>}\r\n            <section class=\"hero is-primary\">\r\n                <div class=\"hero-body\">\r\n                    <div class=\"container\">\r\n                        <h1 class=\"title\">Nuevo Gasto</h1>\r\n                        <h2 class=\"subtitle\">Dar de alta un nuevo gasto o ingreso</h2>\r\n                        <Breadcrum parent='Gastos e Ingresos' children='Nuevo Gasto' />\r\n                    </div>\r\n                </div>\r\n            </section>\r\n            <section class=\"section\">\r\n                <div class=\"container\">\r\n                    <div className='columns'>\r\n                        <div className=\"column\">\r\n                            <div className='card'>\r\n                                <header class=\"card-header\">\r\n                                    <p class=\"card-header-title\">\r\n                                        Información General\r\n                                    </p>\r\n                                </header>\r\n                                <div class=\"card-content\">\r\n                                    <div class=\"content\">\r\n                                        <div class=\"field\">\r\n                                            <label class=\"label\">*Tipo de Movimiento</label>\r\n                                            <div class=\"control\">\r\n                                                <div class=\"select is-fullwidth\">\r\n                                                    <select ref={kindRef} onChange={e => setKind(e.target.value)} >\r\n                                                        <option selected disabled>Movimiento</option>\r\n                                                        <option>Gasto</option>\r\n                                                        <option>Ingreso</option>\r\n                                                    </select>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        {kind === 'Gasto' ? <div class=\"field\">\r\n                                            <label class=\"label\">*Tipo de Gasto</label>\r\n                                            <div class=\"control\">\r\n                                                <div class=\"select is-fullwidth\">\r\n                                                    <select ref={outcomeKindRef} defaultChecked={'Gasto General'} onChange={e => setOutcomeKind(e.target.value)}>\r\n                                                        <option>Gasto General</option>\r\n                                                        <option>Gasto Operativo</option>\r\n                                                        <option>Gasto Administrativo</option>\r\n                                                    </select>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div> : null}\r\n\r\n                                        <div class=\"field\">\r\n                                            <label class=\"label\">*Concepto</label>\r\n                                            <div class=\"control\">\r\n                                                <input ref={conceptRef} onChange={e => setConcept(e.target.value)} class=\"input\" type=\"text\" placeholder=\"Nombre del producto\" />\r\n                                            </div>\r\n                                        </div>\r\n                                        <div class=\"field\">\r\n                                            <label class=\"label\">*Importe</label>\r\n                                            <div class=\"control\">\r\n                                                <input ref={quantityRef} onChange={e => setQuantity(e.target.value)} class=\"input\" type=\"number\" placeholder=\"Nombre del producto\" min=\"0\" step=\"0.01\" />\r\n                                            </div>\r\n                                        </div>\r\n                                        <div class=\"field\">\r\n                                            <label class=\"label\">*Fecha pago/cobro</label>\r\n                                            <div class=\"control\">\r\n                                                <input ref={dateRef} onChange={e => setDate(e.target.value)} class=\"input\" type=\"date\" placeholder=\"Nombre del producto\" />\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        <div class=\"field\">\r\n                                            <label class=\"label\">*Comentario/Descripción</label>\r\n                                            <div class=\"control\">\r\n                                                <textarea ref={descriptionRef} onChange={e => setDescription(e.target.value)} class=\"textarea\" placeholder=\"\"></textarea>\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        <div class=\"field\">\r\n                                            <label class=\"label\">*Método de pago/cobro</label>\r\n                                            <div class=\"control\">\r\n                                                <div class=\"select is-fullwidth\">\r\n                                                    <select ref={paymethodRRef} onChange={e => setPaymethod(e.target.value)}>\r\n                                                        <option selected disabled>Método</option>\r\n                                                        <option>Efectivo</option>\r\n                                                        <option>Cheque</option>\r\n                                                        <option>Tarjeta de Crédito</option>\r\n                                                        <option>Tarjeta de Débito</option>\r\n                                                        <option>Transferencia Electrónica</option>\r\n                                                    </select>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div class=\"field\">\r\n                                            <label class=\"label\">*Responsable</label>\r\n                                            <div class=\"control\">\r\n                                                <div class=\"select is-fullwidth\">\r\n                                                    <select ref={responsableRef} onChange={e => setResponsable(e.target.value)}>\r\n                                                        <option selected disabled value=\"\">Seleccione</option>\r\n                                                        <option value='Adriana Vargas'>Adriana Vargas</option>\r\n                                                    </select>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div class=\"field\">\r\n                                            <label class=\"label\">*Autoriza</label>\r\n                                            <div class=\"control\">\r\n                                                <div class=\"select is-fullwidth\">\r\n                                                    <select ref={authorizerRef} onChange={e => setAuthorizer(e.target.value)}>\r\n                                                        <option selected disabled value=\"\">Seleccione</option>\r\n                                                        <option value='Guillermo Sanjuanero'>Guillermo Sanjuanero</option>\r\n                                                        <option value='Juanita Maldonado'>Juanita Maldonado</option>\r\n                                                    </select>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"column\">\r\n                            <div className='card'>\r\n                                <header class=\"card-header\">\r\n                                    <p class=\"card-header-title\">\r\n                                        Comprobante de Pago/Cobro\r\n                                    </p>\r\n                                </header>\r\n                                <div class=\"card-content\">\r\n                                    <div class=\"content\">\r\n                                        <article class=\"message is-success\">\r\n                                            <div class=\"message-body\">\r\n                                                Requisitos del Comprobante\r\n                                                <br />\r\n                                                Para que tu Cobro/Pago sea válido, deberás anexar una imagen de tu comprobante. Este comprobante deberá ser: <strong>Ticket de compra, Factura, Recibo, Comprobante de Tranferencia Bancaria </strong>.\r\n                                                <br /> Es necesario que el monto del comprobante y la fecha coincidan con los datos ingresados en el sistema, de otro modo, este no será tomado en cuenta.\r\n                                            </div>\r\n                                        </article>\r\n\r\n                                        <div class=\"file has-name is-boxed is-fullwidth\">\r\n                                            <label class=\"file-label\">\r\n                                                <input onChange={e => setFileName(e.target.files[0].name)} ref={ticket} class=\"file-input\" type=\"file\" name=\"resume\"  accept=\"image/x-png,image/gif,image/jpeg\" />\r\n                                                <span class=\"file-cta\">\r\n                                                    <span class=\"file-icon\">\r\n                                                        <FontAwesomeIcon icon={faUpload} />\r\n                                                    </span>\r\n                                                    <span class=\"file-label is-center\" style={{ textAlign: 'center' }}>\r\n                                                        Seleccione un archivo\r\n                                                    </span>\r\n                                                </span>\r\n                                                <span class=\"file-name\" style={{ textAlign: 'center' }}>\r\n                                                    {fileName}\r\n                                                </span>\r\n                                            </label>\r\n                                        </div>\r\n                                        <br />\r\n                                        <button onClick={save} className='button is-fullwidth is-success'>REGISTRAR</button>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        </div>\r\n    )\r\n}\r\nexport default Newoutcome;","C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\outcomesCrud\\outcomes.jsx",["91","92","93","94"],"C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\Login\\index.jsx",["95","96"],"C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\productCrud\\index.jsx",["97","98","99","100"],"import Navbar from \"../common/navbar\"\r\nimport Navbargen from \"../common/navbargeneral\"\r\nimport Breadcrum from \"../common/breadcrum\"\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faDollarSign } from '@fortawesome/free-solid-svg-icons'\r\nimport { useEffect, useState, useRef } from \"react\"\r\nimport firebase from '../../firebaseElements/firebase'\r\nimport Swal from 'sweetalert2'\r\nimport { Modal } from 'react-responsive-modal'\r\nimport { Redirect } from \"react-router-dom\"\r\n\r\nfunction ProductCrud() {\r\n\r\n  const db = firebase.firestore();\r\n  //states\r\n  const [name, setName] = useState(\"\")\r\n  const [category, setCategory] = useState(\"\")\r\n  const [description, setDescription] = useState(\"\")\r\n  const [cal, setCal] = useState(0)\r\n  const [cost, setCost] = useState(0)\r\n  const [price, setPrice] = useState(0)\r\n  const [available, setAvailable] = useState(false)\r\n  const [newCategory, setNewCategory] = useState('')\r\n  const [extern, setExtern] = useState(false);\r\n  const [categoriesList, setCategoriesList] = useState([])\r\n  const [visible, setVisible] = useState(false)\r\n  const [categoryDescription, setCategoryDescription] = useState('');\r\n  const [fileName, setFileName] = useState('');\r\n  const [open, setOpen] = useState(false);\r\n  const [categoryDet, setCategoryDet] = useState();\r\n  const [redirect, setRedirect] = useState(false);\r\n  const [usertype, setUser] = useState('')\r\n  //refs\r\n  const categoryRef = useRef();\r\n  const categoryDescriptionRef = useRef();\r\n  const externRef = useRef();\r\n  const nameRef = useRef();\r\n  const categorySelectRef = useRef();\r\n  const descriptionRef = useRef();\r\n  const calRef = useRef();\r\n  const costRef = useRef();\r\n  const priceRef = useRef();\r\n  const availableRef = useRef();\r\n  const visibleRef = useRef();\r\n  const ticket = useRef();\r\n\r\n  const fields = [\r\n    nameRef,\r\n    categorySelectRef,\r\n    descriptionRef,\r\n    calRef,\r\n    costRef,\r\n    priceRef\r\n  ]\r\n\r\n  useEffect(() => {\r\n    db.collection(\"categories\").onSnapshot(doc => {\r\n      let allCategories = doc.docs.map(cat => {\r\n        return {\r\n          id: cat.id,\r\n          ...cat.data()\r\n        }\r\n      })\r\n      setCategoriesList(allCategories);\r\n    });\r\n  }, [])\r\n  const handleProductSubmit = e => {\r\n    e.preventDefault();\r\n    console.log(name, category, description, cal, cost, price, available)\r\n    db.collection(\"products\").add({\r\n      name: name,\r\n      category: category,\r\n      description: description,\r\n      cal: Number(cal),\r\n      cost: Number(cost),\r\n      price: Number(price),\r\n      available: available\r\n    }).then(() => {\r\n      fields.forEach(field => field.current.value = '')\r\n      availableRef.current.checked = false;\r\n      Swal.fire({\r\n        icon: 'success',\r\n        title: 'Creado',\r\n        text: `Producto agregado con exito!`,\r\n      })\r\n    }).catch(error => {\r\n      Swal.fire({\r\n        icon: 'error',\r\n        title: 'Oops...',\r\n        text: `Ocurrio un error: ${error}`,\r\n      })\r\n    })\r\n  }\r\n  const handleCategorySubmit = async e => {\r\n    e.preventDefault();\r\n\r\n    let storageRef = firebase.storage().ref();\r\n    const ticketImg = storageRef.child(`cathegories/${Date.now()}.webp`);\r\n    await ticketImg.put(ticket.current.files[0])\r\n    const downloadURL = await ticketImg.getDownloadURL()\r\n\r\n    categoryRef.current.value = '';\r\n    externRef.current.checked = false;\r\n    setExtern(false)\r\n    let newCat = {\r\n      name: newCategory,\r\n      visible: visible,\r\n      description: categoryDescription,\r\n      cover: downloadURL\r\n    }\r\n    if (extern)\r\n      newCat.extern = true\r\n    db.collection(\"categories\").add(newCat).then(() => {\r\n      Swal.fire({\r\n        icon: 'success',\r\n        title: 'Creada',\r\n        text: `¡Categoria agregada con exito!`,\r\n      })\r\n    }).catch(error => {\r\n      Swal.fire({\r\n        icon: 'error',\r\n        title: 'Oops...',\r\n        text: `Ocurrio un error: ${error}`,\r\n      })\r\n    })\r\n\r\n  }\r\n  async function deleteCategory(cat) {\r\n    const result = await Swal.fire({\r\n      icon: \"warning\",\r\n      title: `¿Seguro que quiere eliminar la categoria ${cat.name}?`,\r\n      showDenyButton: true,\r\n      confirmButtonText: `Si, eliminar`,\r\n      denyButtonText: `No`,\r\n    })\r\n    if (result.isConfirmed) {\r\n      db.collection(\"categories\").doc(cat.id).delete().then(() => {\r\n        Swal.fire('Categoria eliminada', '', 'success')\r\n      }).catch(error => {\r\n        Swal.fire(`Ocurrio un error: ${error}`, '', 'error')\r\n      });\r\n\r\n    }\r\n  }\r\n  function previewFile(file) {\r\n    const reader = new FileReader();\r\n\r\n    //esta es una forma\r\n    reader.readAsDataURL(file);\r\n    reader.onload = function (e) {\r\n      setFileName(this.result)\r\n    }\r\n\r\n    /* \r\n    //esta es la otra\r\n    reader.addEventListener(\"load\", function () {\r\n      // convert image file to base64 string\r\n      setFileName(reader.result)\r\n    }, false);\r\n  \r\n    if (file) {\r\n      reader.readAsDataURL(file);\r\n    } */\r\n  }\r\n  async function updateCategory(cat) {\r\n\r\n    let newData = {}\r\n    if (fileName) {\r\n      let storageRef = firebase.storage().ref();\r\n      const ticketImg = storageRef.child(`cathegories/${Date.now()}.webp`);\r\n      await ticketImg.put(ticket.current.files[0])\r\n      const downloadURL = await ticketImg.getDownloadURL()\r\n      newData.cover = downloadURL\r\n    }\r\n    /*     if (newCategory)\r\n          newData.name = newCategory */\r\n    if (cat.visible && visible !== cat.visible)\r\n      newData.visible = visible\r\n    if (cat.extern && extern !== cat.extern)\r\n      newData.extern = extern\r\n    if (categoryDescription)\r\n      newData.description = categoryDescription\r\n\r\n    db.collection('categories').doc(cat.id).update({\r\n      ...newData\r\n    }).then(() => {\r\n      Swal.fire(\r\n        'Actualizado!',\r\n        'El status se actulizo con exito',\r\n        'success'\r\n      )\r\n      setFileName('')\r\n      setNewCategory('')\r\n      setVisible('')\r\n      setExtern('')\r\n      setDescription('')\r\n    }).catch(error =>\r\n      Swal.fire(\r\n        'Error!',\r\n        `Ocurrio un error: ${error}`,\r\n        'warning'\r\n      )\r\n    );\r\n  }\r\n  function closeModal() {\r\n    setOpen(false)\r\n    setFileName('')\r\n    setNewCategory('')\r\n    setVisible('')\r\n    setExtern('')\r\n    setDescription('')\r\n  }\r\n\r\n  firebase.auth().onAuthStateChanged(function (user) {\r\n    if (user) {\r\n      db.collection(\"accounts\").doc(user.uid).onSnapshot((doc) => {\r\n        if (doc.data().type === 'admin') {\r\n          setUser(\"admin\")\r\n        }\r\n        else setUser(\"user\")\r\n      })\r\n    } else {\r\n      setRedirect(true)\r\n      console.log(\"No estoy loggeado\")\r\n    }\r\n  });\r\n\r\n  return redirect ? <Redirect to='/' /> : (\r\n    <div>\r\n      {usertype === \"admin\" ? <Navbar /> : <Navbargen />}\r\n      <section className=\"hero is-primary\">\r\n        <div className=\"hero-body\">\r\n          <div className=\"container\">\r\n            <h1 className=\"title\">Nuevo Producto</h1>\r\n            <h2 className=\"subtitle\">Alta de Productos</h2>\r\n            <Breadcrum parent='Productos' children='Nuevo Producto' />\r\n          </div>\r\n        </div>\r\n      </section>\r\n      <section className=\"section\">\r\n        <div className=\"container\">\r\n          <div className='columns'>\r\n            <div className=\"column\">\r\n              <div className='card'>\r\n                <header className=\"card-header\">\r\n                  <p className=\"card-header-title\">\r\n                    Nueva Categoría\r\n                </p>\r\n                  <a href=\"#\" className=\"card-header-icon\" aria-label=\"more options\">\r\n                    <span className=\"icon\">\r\n                      <i className=\"fas fa-angle-down\" aria-hidden=\"true\"></i>\r\n                    </span>\r\n                  </a>\r\n                </header>\r\n                <div className=\"card-content\">\r\n                  <div className=\"content\">\r\n                    <form onSubmit={handleCategorySubmit}>\r\n                      <div className=\"field\">\r\n                        <label className=\"label\">Nombre Categoría</label>\r\n                        <div className=\"control\">\r\n                          <input ref={categoryRef} onChange={e => setNewCategory(e.target.value)} className=\"input \" type=\"text\" placeholder=\"Nombre Categoría\" />\r\n                        </div>\r\n                      </div>\r\n\r\n                      <div className=\"field\">\r\n                        <label className=\"label\">Descripción</label>\r\n                        <div className=\"control\">\r\n                          <textarea ref={categoryDescriptionRef} onChange={e => setCategoryDescription(e.target.value)} className=\"textarea\" placeholder=\"Descripción de la Categoría\"></textarea>\r\n                        </div>\r\n                      </div>\r\n\r\n\r\n                      <label className=\"label\">Portada</label>\r\n                      <div className=\"file has-name is-fullwidth\">\r\n                        <label className=\"file-label\">\r\n                          <input onChange={e => setFileName(e.target.files[0].name)} ref={ticket} className=\"file-input\" type=\"file\" name=\"resume\" accept=\"image/x-png,image/gif,image/jpeg\" />\r\n                          <span className=\"file-cta\">\r\n                            <span className=\"file-icon\">\r\n                              <i className=\"fas fa-upload\"></i>\r\n                            </span>\r\n                            <span className=\"file-label\">\r\n                              Elige un Archivo...\r\n                            </span>\r\n                          </span>\r\n                          <span className=\"file-name\">\r\n                            {fileName}\r\n                          </span>\r\n                        </label>\r\n                      </div>\r\n\r\n                      <br />\r\n\r\n                      <div style={{ display: 'flex', justifyContent: 'space-around', marginBottom: '2%' }}>\r\n                        <div>\r\n                          <label className=\"checkbox\">\r\n                            <input ref={externRef} type=\"checkbox\" onChange={e => setExtern(e.target.checked)} />\r\n                          Proveedor Externo\r\n                      </label>\r\n                        </div>\r\n                        <div>\r\n                          < label className=\"checkbox\">\r\n                            <input ref={visibleRef} onChange={e => setVisible(e.target.checked)} type=\"checkbox\" />\r\n                          Categoria Visible\r\n                      </label>\r\n                        </div>\r\n                      </div>\r\n\r\n\r\n                      <button onClick={handleCategorySubmit} type=\"submit\" value='submit' className=\"button is-success is-fullwidth\">\r\n                        Crear Categoría\r\n                      </button>\r\n                    </form>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <br />\r\n              <div className='card'>\r\n                <header className=\"card-header\">\r\n                  <p className=\"card-header-title\">\r\n                    Categorías\r\n                </p>\r\n                  <a href=\"#\" className=\"card-header-icon\" aria-label=\"more options\">\r\n                    <span className=\"icon\">\r\n                      <i className=\"fas fa-angle-down\" aria-hidden=\"true\"></i>\r\n                    </span>\r\n                  </a>\r\n                </header>\r\n                <div className=\"card-content\">\r\n                  <div className=\"content\">\r\n                    <table>\r\n                      <tr>\r\n                        <th>Nombre</th>\r\n                        <th>Acciones</th>\r\n                      </tr>\r\n                      {categoriesList.map(cat =>\r\n                        <tr key={cat.id}>\r\n                          <td> {cat.name} </td>\r\n                          <td>\r\n                            <button style={{ marginRight: '3%' }} onClick={() => deleteCategory(cat)} className=\"button is-success is-outlined is-small\">Eliminar</button>\r\n                            <button onClick={() => { setOpen(true); setCategoryDet(cat) }} className=\"button is-success is-small\">Detalles</button>\r\n                          </td>\r\n                        </tr>\r\n                      )}\r\n                    </table>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <form className=\"column\" onSubmit={handleProductSubmit}>\r\n              <div className='card'>\r\n                <header className=\"card-header\">\r\n                  <p className=\"card-header-title\">\r\n                    Nuevo Producto\r\n                </p>\r\n                  <a href=\"#\" className=\"card-header-icon\" aria-label=\"more options\">\r\n                    <span className=\"icon\">\r\n                      <i className=\"fas fa-angle-down\" aria-hidden=\"true\"></i>\r\n                    </span>\r\n                  </a>\r\n                </header>\r\n                <div className=\"card-content\">\r\n                  <div className=\"content\">\r\n                    <div className=\"field\">\r\n                      <label className=\"label\">Nombre</label>\r\n                      <div className=\"control\">\r\n                        <input ref={nameRef} onChange={e => setName(e.target.value)} className=\"input\" type=\"text\" placeholder=\"Nombre del producto\" />\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"field\">\r\n                      <label className=\"label\">Categoría</label>\r\n                      <div className=\"control\">\r\n                        <div className=\"select is-fullwidth\">\r\n                          <select ref={categorySelectRef} onChange={e => setCategory(e.target.value)} required>\r\n                            <option selected disabled value='' >Seleccione una categoría</option>\r\n                            {categoriesList.map(cat =>\r\n                              <option key={cat.id} value={cat.name}> {cat.name} </option>\r\n                            )}\r\n                          </select>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"field\">\r\n                      <label className=\"label\">Descripción</label>\r\n                      <div className=\"control\">\r\n                        <textarea ref={descriptionRef} onChange={e => setDescription(e.target.value)} className=\"textarea\" placeholder=\"e.g. Naranja, Guayaba, Piña, Miel, Limón, Jengibre\"></textarea>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"field\">\r\n                      <label className=\"label\">Calorias</label>\r\n                      <div className=\"control\">\r\n                        <input ref={calRef} onChange={e => setCal(e.target.value)} className=\"input\" type=\"number\" placeholder=\"Calorias del producto\" />\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"field\">\r\n                      <label className=\"label\">Costo de Producción</label>\r\n                      <div className=\"control  has-icons-left\">\r\n                        <input ref={costRef} onChange={e => setCost(e.target.value)} className=\"input\" type=\"number\" min=\"0\" step=\"0.01\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                          <FontAwesomeIcon icon={faDollarSign} />\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"field\">\r\n                      <label className=\"label\">Precio de venta</label>\r\n                      <div className=\"control  has-icons-left\">\r\n                        <input ref={priceRef} onChange={e => setPrice(e.target.value)} className=\"input\" type=\"number\" min=\"0\" step=\"0.01\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                          <FontAwesomeIcon icon={faDollarSign} />\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n                    <label className=\"checkbox\">\r\n                      <input ref={availableRef} onChange={e => setAvailable(e.target.checked)} type=\"checkbox\" />\r\n                        Disponibilidad del Producto\r\n                    </label>\r\n                    <br />\r\n                    <br />\r\n                    <button type=\"submit\" value=\"Submit\" className=\"button is-success is-fullwidth\">Crear Producto</button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </section>\r\n      {categoryDet ? <Modal open={open} onClose={closeModal} center >\r\n        <div>\r\n          <br />\r\n          <div className=\"field\">\r\n            <h1 style={{ fontSize: '1.5rem' }}>Nombre Categoría: <b>{categoryDet.name}</b></h1>\r\n          </div>\r\n\r\n          <div className=\"field\">\r\n            <label className=\"label\">Descripción</label>\r\n            <div className=\"control\">\r\n              <textarea defaultValue={categoryDet.description} ref={categoryDescriptionRef} onChange={e => setCategoryDescription(e.target.value)} className=\"textarea is-primary\" placeholder=\"Descripción de la Categoría\"></textarea>\r\n            </div>\r\n          </div>\r\n\r\n\r\n          <label className=\"label\">Portada</label>\r\n          <img style={{ width: '25rem' }} src={fileName ? fileName : categoryDet.cover} alt=\"ticketImg\" />\r\n          <div className=\"file has-name is-fullwidth\">\r\n            <label className=\"file-label\">\r\n              <input onChange={e => previewFile(e.target.files[0])} ref={ticket} className=\"file-input\" type=\"file\" name=\"resume\" accept=\"image/x-png,image/gif,image/jpeg\" />\r\n              <span className=\"file-cta\">\r\n                <span className=\"file-icon\">\r\n                  <i className=\"fas fa-upload\"></i>\r\n                </span>\r\n                <span className=\"file-label\">\r\n                  Elige un Archivo...\r\n                            </span>\r\n              </span>\r\n              <span className=\"file-name\">\r\n                {fileName}\r\n              </span>\r\n            </label>\r\n          </div>\r\n\r\n          <br />\r\n\r\n          <div style={{ display: 'flex', justifyContent: 'space-around', marginBottom: '2%' }}>\r\n            <div>\r\n              <label className=\"checkbox\">\r\n                <input defaultChecked={categoryDet.extern} ref={externRef} type=\"checkbox\" onChange={e => setExtern(e.target.checked)} />\r\n                          Proveedor Externo\r\n                      </label>\r\n            </div>\r\n            <div>\r\n              < label className=\"checkbox\">\r\n                <input defaultChecked={categoryDet.visible} ref={visibleRef} onChange={e => setVisible(e.target.checked)} type=\"checkbox\" />\r\n                          Categoria Visible\r\n                      </label>\r\n            </div>\r\n          </div>\r\n\r\n\r\n          <button onClick={() => updateCategory(categoryDet)} type=\"submit\" value='submit' className=\"button is-success is-fullwidth\">\r\n            Modificar Categoría\r\n                      </button>\r\n        </div>\r\n      </Modal> : null}\r\n    </div>\r\n  );\r\n}\r\nexport default ProductCrud;","C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\firebaseElements\\firebase.js",[],"C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\common\\breadcrum.jsx",["101","102"],"function Breadcrum(props) {\r\n    const { parent, children} = props;\r\n    return (\r\n        <nav className=\"breadcrumb is-small\" aria-label=\"breadcrumbs\">\r\n            <ul>\r\n                <li><a href=\"#\">{parent}</a></li>\r\n                <li className=\"is-active\"><a href=\"#\">{children}</a></li>\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\nexport default Breadcrum;","C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\common\\navbar.jsx",["103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118"],"import logo from \"../../assets/images/logos/logo3.png\"\r\nimport { Link } from 'react-router-dom'\r\nimport firebase from '../../firebaseElements/firebase'\r\nimport { useEffect, useState } from \"react\";\r\n\r\n\r\nfunction close() {\r\n    firebase.auth().signOut().then(function () {\r\n        console.log('Sign-out uccessful')\r\n    }).catch(function (error) {\r\n        // An error happened.\r\n    });\r\n}\r\n\r\nfunction Navbar() {\r\n    const [isActive, setisActive] = useState(false);\r\n    return (\r\n        <div>\r\n            <nav className=\"navbar is-primary\" role=\"navigation\" aria-label=\"main navigation\">\r\n                <div className=\"navbar-brand\">\r\n                    <a className=\"navbar-item\" href=\"#\">\r\n                        <img src={logo} />\r\n                    </a>\r\n\r\n                    <a\r\n                        role=\"button\"\r\n                        className={`navbar-burger burger ${isActive ? \"is-active\" : \"\"}`}\r\n                        aria-label=\"menu\"\r\n                        aria-expanded=\"false\"\r\n                        data-target=\"navbarBasicExample\"\r\n\r\n                        onClick={() => {\r\n                            setisActive(!isActive);\r\n                        }}\r\n                    >\r\n                        <span aria-hidden=\"true\"></span>\r\n                        <span aria-hidden=\"true\"></span>\r\n                        <span aria-hidden=\"true\"></span>\r\n                    </a>\r\n                </div>\r\n\r\n                <div\r\n                    id=\"navbarBasicExample\"\r\n                    className={`navbar-menu ${isActive ? \"is-active\" : \"\"}`}\r\n                >\r\n                    <div className=\"navbar-start\">\r\n                        <div className=\"navbar-item has-dropdown is-hoverable\">\r\n                            <a className=\"navbar-link\">\r\n                                Productos\r\n                            </a>\r\n\r\n                            <div className=\"navbar-dropdown\">\r\n                                <Link to={`${process.env.PUBLIC_URL}/producto`}>\r\n                                    <a className=\"navbar-item\">\r\n                                        Nuevo Producto\r\n                                    </a>\r\n                                </Link>\r\n                                <Link to={`${process.env.PUBLIC_URL}/productos`}>\r\n                                    <a className=\"navbar-item\">\r\n                                        Todos los productos\r\n                                    </a>\r\n                                </Link>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"navbar-item has-dropdown is-hoverable\">\r\n                            <a className=\"navbar-link\">\r\n                                Gastos e Ingresos\r\n                            </a>\r\n\r\n                            <div className=\"navbar-dropdown\">\r\n                                <Link to={`${process.env.PUBLIC_URL}/alta-gasto`}>\r\n                                    <a className=\"navbar-item\">\r\n                                        Alta de Gastos e Ingresos\r\n                                    </a>\r\n                                </Link>\r\n                                <Link to={`${process.env.PUBLIC_URL}/gastos`}>\r\n                                    <a className=\"navbar-item\">\r\n                                        Consultar Gastos e Ingresos\r\n                                    </a>\r\n                                </Link>\r\n                                <Link to={`${process.env.PUBLIC_URL}/balance-general`}>\r\n                                    <a className=\"navbar-item\">\r\n                                        Balance General\r\n                            </a>\r\n                                </Link>\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n                        <div className=\"navbar-item has-dropdown is-hoverable\">\r\n                            <a className=\"navbar-link\">\r\n                                Ventas\r\n                            </a>\r\n\r\n                            <div className=\"navbar-dropdown\">\r\n                                <Link to={`${process.env.PUBLIC_URL}/nueva-venta`}>\r\n                                    <a className=\"navbar-item\">\r\n                                        Nueva Venta\r\n                                </a>\r\n                                </Link>\r\n                                <Link to={`${process.env.PUBLIC_URL}/ventas`}>\r\n                                    <a className=\"navbar-item\">\r\n                                        Ventas Generales\r\n                                </a>\r\n                                </Link>\r\n                                <Link to={`${process.env.PUBLIC_URL}/ventas-desglosado`}>\r\n                                    <a className=\"navbar-item\">\r\n                                        Ventas por Categoria\r\n                                </a>\r\n                                </Link>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                    <div className=\"navbar-end\">\r\n                        <div className=\"navbar-item\">\r\n                            <div className=\"buttons\">\r\n                                <Link onClick={close} to={`${process.env.PUBLIC_URL}`}>\r\n                                    <a className=\"button is-success is-outlined\">\r\n                                        Cerrar Sesión\r\n                                    </a>\r\n                                </Link>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    );\r\n}\r\nexport default Navbar;","C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\common\\navbargeneral.jsx",["119","120","121","122","123","124","125","126","127","128","129","130","131"],"import logo from \"../../assets/images/logos/logo3.png\"\r\nimport { Link } from 'react-router-dom'\r\nimport firebase from '../../firebaseElements/firebase'\r\nimport { useEffect, useState } from \"react\";\r\n\r\n\r\nfunction close() {\r\n    firebase.auth().signOut().then(function () {\r\n        console.log('Sign-out uccessful')\r\n    }).catch(function (error) {\r\n        // An error happened.\r\n    });\r\n}\r\n\r\nfunction Navbargen() {\r\n    const [isActive, setisActive] = useState(false);\r\n    return (\r\n        <div>\r\n            <nav className=\"navbar is-primary\" role=\"navigation\" aria-label=\"main navigation\">\r\n                <div className=\"navbar-brand\">\r\n                    <a className=\"navbar-item\" href=\"#\">\r\n                        <img src={logo} />\r\n                    </a>\r\n\r\n                    <a\r\n                        role=\"button\"\r\n                        className={`navbar-burger burger ${isActive ? \"is-active\" : \"\"}`}\r\n                        aria-label=\"menu\"\r\n                        aria-expanded=\"false\"\r\n                        data-target=\"navbarBasicExample\"\r\n\r\n                        onClick={() => {\r\n                            setisActive(!isActive);\r\n                        }}\r\n                    >\r\n                        <span aria-hidden=\"true\"></span>\r\n                        <span aria-hidden=\"true\"></span>\r\n                        <span aria-hidden=\"true\"></span>\r\n                    </a>\r\n                </div>\r\n\r\n                <div id=\"navbarBasicExample\"\r\n                    className={`navbar-menu ${isActive ? \"is-active\" : \"\"}`}>\r\n                    <div className=\"navbar-start\">\r\n                        <div className=\"navbar-item has-dropdown is-hoverable\">\r\n                            <a className=\"navbar-link\">\r\n                                Productos\r\n                            </a>\r\n\r\n                            <div className=\"navbar-dropdown\">\r\n                                <Link to={`${process.env.PUBLIC_URL}/producto`}>\r\n                                    <a className=\"navbar-item\">\r\n                                        Nuevo Producto\r\n                                    </a>\r\n                                </Link>\r\n                                <Link to={`${process.env.PUBLIC_URL}/productos`}>\r\n                                    <a className=\"navbar-item\">\r\n                                        Todos los productos\r\n                                    </a>\r\n                                </Link>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"navbar-item has-dropdown is-hoverable\">\r\n                            <a className=\"navbar-link\">\r\n                                Gastos e Ingresos\r\n                            </a>\r\n\r\n                            <div className=\"navbar-dropdown\">\r\n                                <Link to={`${process.env.PUBLIC_URL}/alta-gasto`}>\r\n                                    <a className=\"navbar-item\">\r\n                                        Alta de Gastos e Ingresos\r\n                                    </a>\r\n                                </Link>\r\n                                <Link to={`${process.env.PUBLIC_URL}/gastos`}>\r\n                                    <a className=\"navbar-item\">\r\n                                        Consultar Gastos e Ingresos\r\n                                    </a>\r\n                                </Link>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"navbar-item has-dropdown is-hoverable\">\r\n                            <a className=\"navbar-link\">\r\n                                Ventas\r\n                            </a>\r\n\r\n                            <div className=\"navbar-dropdown\">\r\n                                <Link to={`${process.env.PUBLIC_URL}/nueva-venta`}>\r\n                                    <a className=\"navbar-item\">\r\n                                        Nueva Venta\r\n                                </a>\r\n                                </Link>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"navbar-end\">\r\n                        <div className=\"navbar-item\">\r\n                            <div className=\"buttons\">\r\n                                <Link onClick={close} to={`${process.env.PUBLIC_URL}`}>\r\n                                    <a className=\"button is-success is-outlined\">\r\n                                        Cerrar Sesión\r\n                                    </a>\r\n                                </Link>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        </div >\r\n    );\r\n}\r\nexport default Navbargen;",{"ruleId":"132","replacedBy":"133"},{"ruleId":"134","replacedBy":"135"},{"ruleId":"136","severity":1,"message":"137","line":4,"column":21,"nodeType":"138","messageId":"139","endLine":4,"endColumn":27},{"ruleId":"140","severity":1,"message":"141","line":143,"column":7,"nodeType":"142","endLine":143,"endColumn":37,"suggestions":"143"},{"ruleId":"140","severity":1,"message":"141","line":133,"column":8,"nodeType":"142","endLine":133,"endColumn":30,"suggestions":"144"},{"ruleId":"140","severity":1,"message":"141","line":50,"column":8,"nodeType":"142","endLine":50,"endColumn":30,"suggestions":"145"},{"ruleId":"136","severity":1,"message":"146","line":6,"column":10,"nodeType":"138","messageId":"139","endLine":6,"endColumn":19},{"ruleId":"136","severity":1,"message":"147","line":16,"column":7,"nodeType":"138","messageId":"139","endLine":16,"endColumn":11},{"ruleId":"140","severity":1,"message":"141","line":172,"column":8,"nodeType":"142","endLine":172,"endColumn":36,"suggestions":"148"},{"ruleId":"136","severity":1,"message":"149","line":185,"column":19,"nodeType":"138","messageId":"139","endLine":185,"endColumn":32},{"ruleId":"136","severity":1,"message":"149","line":202,"column":19,"nodeType":"138","messageId":"139","endLine":202,"endColumn":32},{"ruleId":"136","severity":1,"message":"150","line":12,"column":18,"nodeType":"138","messageId":"139","endLine":12,"endColumn":29},{"ruleId":"151","severity":1,"message":"152","line":70,"column":21,"nodeType":"153","endLine":70,"endColumn":62},{"ruleId":"140","severity":1,"message":"154","line":66,"column":6,"nodeType":"142","endLine":66,"endColumn":8,"suggestions":"155"},{"ruleId":"156","severity":1,"message":"157","line":249,"column":19,"nodeType":"153","endLine":249,"endColumn":86},{"ruleId":"156","severity":1,"message":"157","line":322,"column":19,"nodeType":"153","endLine":322,"endColumn":86},{"ruleId":"156","severity":1,"message":"157","line":355,"column":19,"nodeType":"153","endLine":355,"endColumn":86},{"ruleId":"156","severity":1,"message":"157","line":6,"column":21,"nodeType":"153","endLine":6,"endColumn":33},{"ruleId":"156","severity":1,"message":"157","line":7,"column":43,"nodeType":"153","endLine":7,"endColumn":55},{"ruleId":"136","severity":1,"message":"146","line":4,"column":10,"nodeType":"138","messageId":"139","endLine":4,"endColumn":19},{"ruleId":"156","severity":1,"message":"157","line":21,"column":21,"nodeType":"153","endLine":21,"endColumn":57},{"ruleId":"151","severity":1,"message":"152","line":22,"column":25,"nodeType":"153","endLine":22,"endColumn":43},{"ruleId":"156","severity":1,"message":"158","line":25,"column":21,"nodeType":"153","endLine":35,"endColumn":22},{"ruleId":"156","severity":1,"message":"158","line":48,"column":29,"nodeType":"153","endLine":48,"endColumn":56},{"ruleId":"156","severity":1,"message":"158","line":54,"column":37,"nodeType":"153","endLine":54,"endColumn":64},{"ruleId":"156","severity":1,"message":"158","line":59,"column":37,"nodeType":"153","endLine":59,"endColumn":64},{"ruleId":"156","severity":1,"message":"158","line":67,"column":29,"nodeType":"153","endLine":67,"endColumn":56},{"ruleId":"156","severity":1,"message":"158","line":73,"column":37,"nodeType":"153","endLine":73,"endColumn":64},{"ruleId":"156","severity":1,"message":"158","line":78,"column":37,"nodeType":"153","endLine":78,"endColumn":64},{"ruleId":"156","severity":1,"message":"158","line":83,"column":37,"nodeType":"153","endLine":83,"endColumn":64},{"ruleId":"156","severity":1,"message":"158","line":92,"column":29,"nodeType":"153","endLine":92,"endColumn":56},{"ruleId":"156","severity":1,"message":"158","line":98,"column":37,"nodeType":"153","endLine":98,"endColumn":64},{"ruleId":"156","severity":1,"message":"158","line":103,"column":37,"nodeType":"153","endLine":103,"endColumn":64},{"ruleId":"156","severity":1,"message":"158","line":108,"column":37,"nodeType":"153","endLine":108,"endColumn":64},{"ruleId":"156","severity":1,"message":"158","line":121,"column":37,"nodeType":"153","endLine":121,"endColumn":82},{"ruleId":"136","severity":1,"message":"146","line":4,"column":10,"nodeType":"138","messageId":"139","endLine":4,"endColumn":19},{"ruleId":"156","severity":1,"message":"157","line":21,"column":21,"nodeType":"153","endLine":21,"endColumn":57},{"ruleId":"151","severity":1,"message":"152","line":22,"column":25,"nodeType":"153","endLine":22,"endColumn":43},{"ruleId":"156","severity":1,"message":"158","line":25,"column":21,"nodeType":"153","endLine":35,"endColumn":22},{"ruleId":"156","severity":1,"message":"158","line":46,"column":29,"nodeType":"153","endLine":46,"endColumn":56},{"ruleId":"156","severity":1,"message":"158","line":52,"column":37,"nodeType":"153","endLine":52,"endColumn":64},{"ruleId":"156","severity":1,"message":"158","line":57,"column":37,"nodeType":"153","endLine":57,"endColumn":64},{"ruleId":"156","severity":1,"message":"158","line":65,"column":29,"nodeType":"153","endLine":65,"endColumn":56},{"ruleId":"156","severity":1,"message":"158","line":71,"column":37,"nodeType":"153","endLine":71,"endColumn":64},{"ruleId":"156","severity":1,"message":"158","line":76,"column":37,"nodeType":"153","endLine":76,"endColumn":64},{"ruleId":"156","severity":1,"message":"158","line":83,"column":29,"nodeType":"153","endLine":83,"endColumn":56},{"ruleId":"156","severity":1,"message":"158","line":89,"column":37,"nodeType":"153","endLine":89,"endColumn":64},{"ruleId":"156","severity":1,"message":"158","line":101,"column":37,"nodeType":"153","endLine":101,"endColumn":82},"no-native-reassign",["159"],"no-negated-in-lhs",["160"],"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getAllData'. Either include it or remove the dependency array.","ArrayExpression",["161"],["162"],["163"],"'useEffect' is defined but never used.","'data' is assigned a value but never used.",["164"],"'querySnapshot' is assigned a value but never used.","'getUserType' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'db'. Either include it or remove the dependency array.",["165"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-global-assign","no-unsafe-negation",{"desc":"166","fix":"167"},{"desc":"168","fix":"169"},{"desc":"168","fix":"170"},{"desc":"171","fix":"172"},{"desc":"173","fix":"174"},"Update the dependencies array to be: [startDate, finalDate, category, getAllData]",{"range":"175","text":"176"},"Update the dependencies array to be: [startDate, finalDate, getAllData]",{"range":"177","text":"178"},{"range":"179","text":"178"},"Update the dependencies array to be: [startDate, finalDate, kind, getAllData]",{"range":"180","text":"181"},"Update the dependencies array to be: [db]",{"range":"182","text":"183"},[3750,3780],"[startDate, finalDate, category, getAllData]",[3723,3745],"[startDate, finalDate, getAllData]",[1826,1848],[5317,5345],"[startDate, finalDate, kind, getAllData]",[2210,2212],"[db]"]