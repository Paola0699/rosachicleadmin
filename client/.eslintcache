[{"/Users/kev/Desktop/themixeradmin/client/src/index.js":"1","/Users/kev/Desktop/themixeradmin/client/src/reportWebVitals.js":"2","/Users/kev/Desktop/themixeradmin/client/src/componets/Home.jsx":"3","/Users/kev/Desktop/themixeradmin/client/src/componets/common/Switch.js":"4","/Users/kev/Desktop/themixeradmin/client/src/componets/common/Helmet.js":"5","/Users/kev/Desktop/themixeradmin/client/src/componets/generalbalance.jsx":"6","/Users/kev/Desktop/themixeradmin/client/src/componets/productCrud/products.jsx":"7","/Users/kev/Desktop/themixeradmin/client/src/componets/saleCrud/salescat.jsx":"8","/Users/kev/Desktop/themixeradmin/client/src/componets/saleCrud/sales.jsx":"9","/Users/kev/Desktop/themixeradmin/client/src/componets/saleCrud/newsale.jsx":"10","/Users/kev/Desktop/themixeradmin/client/src/componets/outcomesCrud/newoutcome.jsx":"11","/Users/kev/Desktop/themixeradmin/client/src/componets/outcomesCrud/outcomes.jsx":"12","/Users/kev/Desktop/themixeradmin/client/src/componets/productCrud/index.jsx":"13","/Users/kev/Desktop/themixeradmin/client/src/componets/Login/index.jsx":"14","/Users/kev/Desktop/themixeradmin/client/src/firebaseElements/firebase.js":"15","/Users/kev/Desktop/themixeradmin/client/src/componets/common/navbar.jsx":"16","/Users/kev/Desktop/themixeradmin/client/src/componets/common/breadcrum.jsx":"17"},{"size":682,"mtime":1612066135156,"results":"18","hashOfConfig":"19"},{"size":362,"mtime":1612066135157,"results":"20","hashOfConfig":"19"},{"size":1486,"mtime":1612066135081,"results":"21","hashOfConfig":"19"},{"size":1044,"mtime":1612066135089,"results":"22","hashOfConfig":"19"},{"size":387,"mtime":1612066135087,"results":"23","hashOfConfig":"19"},{"size":14345,"mtime":1612211810312,"results":"24","hashOfConfig":"19"},{"size":11457,"mtime":1612066135147,"results":"25","hashOfConfig":"19"},{"size":9339,"mtime":1612066135150,"results":"26","hashOfConfig":"19"},{"size":11598,"mtime":1612211788551,"results":"27","hashOfConfig":"19"},{"size":17156,"mtime":1612066135148,"results":"28","hashOfConfig":"19"},{"size":14164,"mtime":1612211810314,"results":"29","hashOfConfig":"19"},{"size":11602,"mtime":1612211810314,"results":"30","hashOfConfig":"19"},{"size":10845,"mtime":1612211957932,"results":"31","hashOfConfig":"19"},{"size":3915,"mtime":1612066135082,"results":"32","hashOfConfig":"19"},{"size":606,"mtime":1612066135155,"results":"33","hashOfConfig":"19"},{"size":5966,"mtime":1612066135092,"results":"34","hashOfConfig":"19"},{"size":358,"mtime":1612066135091,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1n7gyu1",{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"49"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"49"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/kev/Desktop/themixeradmin/client/src/index.js",[],"/Users/kev/Desktop/themixeradmin/client/src/reportWebVitals.js",[],"/Users/kev/Desktop/themixeradmin/client/src/componets/Home.jsx",[],"/Users/kev/Desktop/themixeradmin/client/src/componets/common/Switch.js",[],"/Users/kev/Desktop/themixeradmin/client/src/componets/common/Helmet.js",[],"/Users/kev/Desktop/themixeradmin/client/src/componets/generalbalance.jsx",["74"],"import Navbar from \"./common/navbar\"\nimport Breadcrum from \"./common/breadcrum\"\nimport CurrencyFormat from 'react-currency-format';\nimport { useEffect, useState } from \"react\";\nimport firebase from '../firebaseElements/firebase'\n\nconst db = firebase.firestore();\n\nfunction Balance() {\n    const [startDate, setStartDate] = useState('');\n    const [finalDate, setFinalDate] = useState('');\n    const [generalOutcom, setGeneralOutcome] = useState(0);\n    const [operativeOutcome, setOperativeOutcome] = useState(0);\n    const [administrativeOutcome, setAdministrativeOutcome] = useState(0);\n    const [totalOutcome, setTotalOutcome] = useState(0);\n    const [otherIncomes, setOtherIncomes] = useState(0);\n    const [salesByCategory, setSalesByCategory] = useState([])\n    const [generalSales, setGeneralSales] = useState(0)\n    const [sumOfIncomes, setSumOfIncomes] = useState(0)\n\n\n\n    useEffect(() => {\n        getAllData()\n        console.log('effect')\n    }, [startDate, finalDate])\n\n    const getAllData = async () => {\n        if (startDate && finalDate) {\n            const querySnapshot = await db.collection(\"outcomes\")\n                .where('date', '>', toDate(startDate, 0, 0, 0))\n                .where('date', '<=', toDate(finalDate, 23, 59, 59))\n                .get()\n\n            const allOutcomes = querySnapshot.docs.map(sale => {\n                return {\n                    id: sale.id,\n                    ...sale.data()\n                }\n            })\n            setGeneralOutcome(getTotal(allOutcomes.filter(outcome => outcome.outcomeKind === 'Gasto General')))\n            setOperativeOutcome(getTotal(allOutcomes.filter(outcome => outcome.outcomeKind === 'Gasto Operativo')))\n            setAdministrativeOutcome(getTotal(allOutcomes.filter(outcome => outcome.outcomeKind === 'Gasto Administrativo')))\n            const tempOtherIncomes = getTotal(allOutcomes.filter(outcome => outcome.kind === 'Ingreso'))\n            setOtherIncomes(tempOtherIncomes)\n            setTotalOutcome(getTotal(allOutcomes.filter(o=>o.kind==='Gasto')))\n\n            const querySnapshot2 = await db.collection(\"orders\")\n                .where('date', '>', toDate(startDate, 0, 0, 0))\n                .where('date', '<=', toDate(finalDate, 23, 59, 59))\n                .get()\n\n            const allIncomes = querySnapshot2.docs.map(sale => {\n                return {\n                    id: sale.id,\n                    ...sale.data()\n                }\n            })\n\n            const categoriesData = await db.collection(\"categories\").get()\n            const allCategories = categoriesData.docs.map(cat => {\n                return {\n                    id: cat.id,\n                    ...cat.data()\n                }\n            })\n            const externCategories = allCategories.filter(c => c.extern === true)\n\n            const [totalGeneralSales, externTotals, totalIncomes] = totalGeneralSalesAndTotalSalesByCategory(allIncomes, externCategories)\n            setGeneralSales(totalGeneralSales)\n            setSalesByCategory(externTotals)\n            setSumOfIncomes(totalIncomes+tempOtherIncomes)\n        }\n    }\n    const getTotal = filteredOutcome => {\n        const reducer = (accumulator, outcome) => accumulator + (outcome.quantity);\n        return filteredOutcome.reduce(reducer, 0)\n    }\n    const totalGeneralSalesAndTotalSalesByCategory = (allIncomes, externCategories) => {\n\n        let allProducts = []\n        allIncomes.forEach(order => {\n            order.products.forEach(product => {\n                if (!externCategories.some(cat => cat.name === product.category))\n                    allProducts.push(product)\n                else {\n                    const i = externCategories.map(c => c.name).findIndex(c => c === product.category)\n                    externCategories[i].productsSold ? externCategories[i].productsSold.push(product) : externCategories[i].productsSold = [product]\n                }\n            })\n        });\n\n        const reducer = (accumulator, product) => accumulator + (product.quantity * product.price);\n\n        externCategories.forEach(c => {\n            if (c.productsSold)\n                c.total = c.productsSold.reduce(reducer, 0)\n            else\n                c.total = 0\n        })\n\n        const salesNotExtern = allProducts.reduce(reducer, 0)\n        const getSumOfTotals = (accumulator, category) => accumulator + category.total;\n        const totalIncomes = salesNotExtern + externCategories.reduce(getSumOfTotals,0)\n\n        return [salesNotExtern, externCategories, totalIncomes]\n    }\n\n    const toDate = (text, h, m, s) => {\n        const dataAux = text.split('-')\n        const temDate = new Date(Number(dataAux[0]), Number(dataAux[1]) - 1, Number(dataAux[2]), h, m, s)\n        return firebase.firestore.Timestamp.fromDate(temDate)\n    }\n    return (\n        <div>\n            <Navbar />\n            <section class=\"hero is-primary\">\n                <div class=\"hero-body\">\n                    <div class=\"container\">\n                        <h1 class=\"title\">Balance General </h1>\n                        <h2 class=\"subtitle\">Consulta la relación entre gastos e ingresos.</h2>\n                        <Breadcrum parent='Gastos e Ingresos' children='Balance General' />\n                    </div>\n                </div>\n            </section>\n            <section class=\"section\">\n                <div class=\"container\">\n                    <div className='columns'>\n                        <div className='column is-6'>\n                            <div class=\"field\">\n                                <label class=\"label\">Fecha de inicio</label>\n                                <div class=\"control\">\n                                    <input onChange={e => setStartDate(e.target.value)} class=\"input\" type=\"date\" placeholder=\"Nombre del producto\" />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='column is-6'>\n                            <div class=\"field\">\n                                <label class=\"label\">Fecha de Fin</label>\n                                <div class=\"control\">\n                                    <input onChange={e => setFinalDate(e.target.value)} class=\"input\" type=\"date\" placeholder=\"Nombre del producto\" />\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n\n\n                    <div className='table-container'>\n                        <table className='table' style={{ marginBottom: '2%', width: '100%' }}>\n                            <tbody >\n                                <tr style={{ textAlign: 'center' }}>\n                                    <th colSpan='2' className='is-success'>GASTOS</th>\n                                    <th colSpan='2' className='is-info'>INGRESOS</th>\n                                </tr>\n                                <tr>\n                                    <th>Concepto</th>\n                                    <th style={{ borderRight: '1px solid #dee2e6' }}>Monto</th>\n                                    <th>Concepto</th>\n                                    <th>Monto</th>\n                                </tr>\n                                <tr>\n                                    <td>Gastos en General</td>\n                                    <td style={{ borderRight: '1px solid #dee2e6' }}>\n                                        <CurrencyFormat\n                                            decimalScale={2}\n                                            fixedDecimalScale={true}\n                                            value={generalOutcom}\n                                            displayType={'text'}\n                                            thousandSeparator={true}\n                                            prefix={'$'}\n                                        />\n                                    </td>\n\n                                    <td >Ventas en General</td>\n                                    <td >\n                                        <CurrencyFormat\n                                            decimalScale={2}\n                                            fixedDecimalScale={true}\n                                            value={generalSales}\n                                            displayType={'text'}\n                                            thousandSeparator={true}\n                                            prefix={'$'}\n                                        />\n                                    </td>\n\n\n                                </tr>\n                                <tr>\n                                    <td>Gastos Operativos</td>\n                                    <td style={{ borderRight: '1px solid #dee2e6' }}>\n                                        <CurrencyFormat\n                                            decimalScale={2}\n                                            fixedDecimalScale={true}\n                                            value={operativeOutcome}\n                                            displayType={'text'}\n                                            thousandSeparator={true}\n                                            prefix={'$'}\n                                        />\n                                    </td>\n\n                                    {/* <td >Proteínas NA</td>\n                                    <td >\n                                        <CurrencyFormat\n                                            decimalScale={2}\n                                            fixedDecimalScale={true}\n                                            value={120}\n                                            displayType={'text'}\n                                            thousandSeparator={true}\n                                            prefix={'$'}\n                                        />\n                                    </td> */}\n\n                                </tr>\n                                <tr>\n                                    <td>Gastos Administrativos</td>\n                                    <td style={{ borderRight: '1px solid #dee2e6' }}>\n                                        <CurrencyFormat\n                                            decimalScale={2}\n                                            fixedDecimalScale={true}\n                                            value={administrativeOutcome}\n                                            displayType={'text'}\n                                            thousandSeparator={true}\n                                            prefix={'$'}\n                                        />\n                                    </td>\n\n                                    {/* <td >Polka Donuts</td>\n                                    <td >\n                                        <CurrencyFormat\n                                            decimalScale={2}\n                                            fixedDecimalScale={true}\n                                            value={250}\n                                            displayType={'text'}\n                                            thousandSeparator={true}\n                                            prefix={'$'}\n                                        />\n                                    </td> */}\n                                </tr>\n                                {salesByCategory.map(c =>\n                                    <tr>\n                                        <td></td>\n                                        <td style={{ borderRight: '1px solid #dee2e6' }}>\n                                        </td>\n                                        <td > {c.name} </td>\n                                        <td >\n                                            <CurrencyFormat\n                                                decimalScale={2}\n                                                fixedDecimalScale={true}\n                                                value={c.total}\n                                                displayType={'text'}\n                                                thousandSeparator={true}\n                                                prefix={'$'}\n                                            />\n                                        </td>\n                                    </tr>\n                                )}\n                                <tr>\n                                    <td></td>\n                                    <td style={{ borderRight: '1px solid #dee2e6' }}>\n                                    </td>\n\n                                    <td >Otros Ingresos</td>\n                                    <td >\n                                        <CurrencyFormat\n                                            decimalScale={2}\n                                            fixedDecimalScale={true}\n                                            value={otherIncomes}\n                                            displayType={'text'}\n                                            thousandSeparator={true}\n                                            prefix={'$'}\n                                        />\n                                    </td>\n\n\n                                </tr>\n\n                                <tr style={{ fontWeight: '900', backgroundColor: '#e0e0e0' }}>\n                                    <td >TOTAL GASTOS</td>\n                                    <td> <CurrencyFormat decimalScale={2} fixedDecimalScale={true} value={totalOutcome} displayType={'text'} thousandSeparator={true} prefix={'$'} /></td>\n                                    <td >TOTAL INGRESOS</td>\n                                    <td ><CurrencyFormat decimalScale={2} fixedDecimalScale={true} value={sumOfIncomes} displayType={'text'} thousandSeparator={true} prefix={'$'} />\n                                    </td>\n                                </tr>\n\n                                <tr style={{ textAlign: 'center', backgroundColor: 'rgba(159, 214, 248, 0.1)' }}>\n                                    <th colSpan='2'>Utilidad Neta (Ingresos - Gastos)</th>\n                                    <th colSpan='2'>\n                                        <CurrencyFormat\n                                            decimalScale={2}\n                                            fixedDecimalScale={true}\n                                            value={sumOfIncomes-totalOutcome}\n                                            displayType={'text'}\n                                            thousandSeparator={true}\n                                            prefix={'$'}\n                                        />\n                                    </th>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n            </section>\n        </div>\n    )\n}\nexport default Balance;",["75","76"],"/Users/kev/Desktop/themixeradmin/client/src/componets/productCrud/products.jsx",[],"/Users/kev/Desktop/themixeradmin/client/src/componets/saleCrud/salescat.jsx",["77"],"/Users/kev/Desktop/themixeradmin/client/src/componets/saleCrud/sales.jsx",["78"],"/Users/kev/Desktop/themixeradmin/client/src/componets/saleCrud/newsale.jsx",["79"],"/Users/kev/Desktop/themixeradmin/client/src/componets/outcomesCrud/newoutcome.jsx",["80"],"import Navbar from \"../common/navbar\"\nimport Breadcrum from \"../common/breadcrum\"\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faUpload } from '@fortawesome/free-solid-svg-icons'\nimport { useEffect, useState, useRef } from \"react\";\nimport firebase from '../../firebaseElements/firebase'\nimport Swal from 'sweetalert2'\n\nconst db = firebase.firestore();\n\nfunction Newoutcome() {\n    const [kind, setKind] = useState('');\n    const [outcomeKind, setOutcomeKind] = useState('Gasto General');\n    const [concept, setConcept] = useState('');\n    const [quantity, setQuantity] = useState(0);\n    const [date, setDate] = useState('');\n    const [description, setDescription] = useState('');\n    const [paymethod, setPaymethod] = useState('');\n    const [responsable, setResponsable] = useState('');\n    const [authorizer, setAuthorizer] = useState('');\n    const [fileName, setFileName] = useState('');\n\n    const ticket = useRef(null);\n    const kindRef = useRef(null);\n    const outcomeKindRef = useRef(null);\n    const conceptRef = useRef(null);\n    const quantityRef = useRef(null);\n    const dateRef = useRef(null);\n    const descriptionRef = useRef(null);\n    const paymethodRRef = useRef(null);\n    const responsableRef = useRef(null);\n    const authorizerRef = useRef(null);\n\n    const refs=[ticket,\n        kindRef,\n        conceptRef,\n        quantityRef,\n        dateRef,\n        descriptionRef,\n        paymethodRRef,\n        responsableRef,\n        authorizerRef\n    ]\n\n    const save = async () => {\n        console.log('working')\n        let storageRef = firebase.storage().ref();\n        const ticketImg = storageRef.child(`outcomes/${Date.now()}.webp`);\n\n        await ticketImg.put(ticket.current.files[0])\n        const downloadURL = await ticketImg.getDownloadURL()\n        const newOutcome = {\n            kind: kind,\n            concept: concept,\n            quantity: Number(quantity),\n            date: toDate(date, 12, 0, 0),\n            description: description,\n            paymethod: paymethod,\n            responsable: responsable,\n            authorizer: authorizer,\n            ticketImg: downloadURL,\n            status: 'Pendiente'\n        }\n        if(outcomeKind) \n            newOutcome.outcomeKind = outcomeKind\n        db.collection('outcomes').add(newOutcome).then(() => {\n            Swal.fire(\n                'Registrado!',\n                'El movimiento se registro con exito',\n                'success'\n            )\n            refs.forEach(ref=>ref.current.value='')\n            //outcomeKindRef.current.value='Gasto General'\n            //ticket.current.files[0]=''\n            setFileName('')\n        }).catch(error =>\n            Swal.fire(\n                'Error!',\n                `Ocurrio un error: ${error}`,\n                'warning'\n            )\n        );\n        console.log(downloadURL)\n        console.log('saved')\n    }\n    const toDate = (text, h, m, s) => {\n        const dataAux = text.split('-')\n        const temDate = new Date(Number(dataAux[0]), Number(dataAux[1]) - 1, Number(dataAux[2]), h, m, s)\n        return firebase.firestore.Timestamp.fromDate(temDate)\n    }\n    return (\n        <div>\n            <Navbar />\n            <section class=\"hero is-primary\">\n                <div class=\"hero-body\">\n                    <div class=\"container\">\n                        <h1 class=\"title\">Nuevo Gasto</h1>\n                        <h2 class=\"subtitle\">Dar de alta un nuevo gasto o ingreso</h2>\n                        <Breadcrum  parent='Gastos e Ingresos' children='Nuevo Gasto' />\n                    </div>\n                </div>\n            </section>\n            <section class=\"section\">\n                <div class=\"container\">\n                    <div className='columns'>\n                        <div className=\"column\">\n                            <div className='card'>\n                                <header class=\"card-header\">\n                                    <p class=\"card-header-title\">\n                                        Información General\n                                    </p>\n                                </header>\n                                <div class=\"card-content\">\n                                    <div class=\"content\">\n                                        <div class=\"field\">\n                                            <label class=\"label\">*Tipo de Movimiento</label>\n                                            <div class=\"control\">\n                                                <div class=\"select is-fullwidth\">\n                                                    <select ref={kindRef} onChange={e => setKind(e.target.value)} >\n                                                        <option selected disabled>Movimiento</option>\n                                                        <option>Gasto</option>\n                                                        <option>Ingreso</option>\n                                                    </select>\n                                                </div>\n                                            </div>\n                                        </div>\n\n                                        {kind === 'Gasto' ? <div class=\"field\">\n                                            <label class=\"label\">*Tipo de Gasto</label>\n                                            <div class=\"control\">\n                                                <div class=\"select is-fullwidth\">\n                                                    <select ref={outcomeKindRef} defaultChecked={'Gasto General'} onChange={e => setOutcomeKind(e.target.value)}>\n                                                        <option>Gasto General</option>\n                                                        <option>Gasto Operativo</option>\n                                                        <option>Gasto Administrativo</option>\n                                                    </select>\n                                                </div>\n                                            </div>\n                                        </div> : null}\n\n                                        <div class=\"field\">\n                                            <label class=\"label\">*Concepto</label>\n                                            <div class=\"control\">\n                                                <input ref={conceptRef} onChange={e => setConcept(e.target.value)} class=\"input\" type=\"text\" placeholder=\"Nombre del producto\" />\n                                            </div>\n                                        </div>\n                                        <div class=\"field\">\n                                            <label class=\"label\">*Importe</label>\n                                            <div class=\"control\">\n                                                <input ref={quantityRef} onChange={e => setQuantity(e.target.value)} class=\"input\" type=\"number\" placeholder=\"Nombre del producto\" />\n                                            </div>\n                                        </div>\n                                        <div class=\"field\">\n                                            <label class=\"label\">*Fecha pago/cobro</label>\n                                            <div class=\"control\">\n                                                <input ref={dateRef} onChange={e => setDate(e.target.value)} class=\"input\" type=\"date\" placeholder=\"Nombre del producto\" />\n                                            </div>\n                                        </div>\n\n                                        <div class=\"field\">\n                                            <label class=\"label\">*Comentario/Descripción</label>\n                                            <div class=\"control\">\n                                                <textarea ref={descriptionRef} onChange={e => setDescription(e.target.value)} class=\"textarea\" placeholder=\"\"></textarea>\n                                            </div>\n                                        </div>\n\n                                        <div class=\"field\">\n                                            <label class=\"label\">*Método de pago/cobro</label>\n                                            <div class=\"control\">\n                                                <div class=\"select is-fullwidth\">\n                                                    <select ref={paymethodRRef} onChange={e => setPaymethod(e.target.value)}>\n                                                        <option selected disabled>Método</option>\n                                                        <option>Efectivo</option>\n                                                        <option>Cheque</option>\n                                                        <option>Tarjeta de Crédito</option>\n                                                        <option>Tarjeta de Débito</option>\n                                                        <option>Transferencia Electrónica</option>\n                                                    </select>\n                                                </div>\n                                            </div>\n                                        </div>\n                                        <div class=\"field\">\n                                            <label class=\"label\">*Responsable</label>\n                                            <div class=\"control\">\n                                                <div class=\"select is-fullwidth\">\n                                                    <select ref={responsableRef} onChange={e => setResponsable(e.target.value)}>\n                                                        <option selected disabled value=\"\">Seleccione</option>\n                                                        <option value='juanPerez'>Juan Pérez</option>\n                                                    </select>\n                                                </div>\n                                            </div>\n                                        </div>\n                                        <div class=\"field\">\n                                            <label class=\"label\">*Autoriza</label>\n                                            <div class=\"control\">\n                                                <div class=\"select is-fullwidth\">\n                                                    <select ref={authorizerRef} onChange={e => setAuthorizer(e.target.value)}>\n                                                        <option selected disabled value=\"\">Seleccione</option>\n                                                        <option value='sanjuanero'>Guillermo Sanjuanero</option>\n                                                    </select>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"column\">\n                            <div className='card'>\n                                <header class=\"card-header\">\n                                    <p class=\"card-header-title\">\n                                        Comprobante de Pago/Cobro\n                                    </p>\n                                </header>\n                                <div class=\"card-content\">\n                                    <div class=\"content\">\n                                        <article class=\"message is-success\">\n                                            <div class=\"message-body\">\n                                                Requisitos del Comprobante\n                                                <br />\n                                                Para que tu Cobro/Pago sea válido, deberás anexar una imagen de tu comprobante. Este comprobante deberá ser: <strong>Ticket de compra, Factura, Recibo, Comprobante de Tranferencia Bancaria </strong>.\n                                                <br /> Es necesario que el monto del comprobante y la fecha coincidan con los datos ingresados en el sistema, de otro modo, este no será tomado en cuenta.\n                                            </div>\n                                        </article>\n\n                                        <div class=\"file has-name is-boxed is-fullwidth\">\n                                            <label class=\"file-label\">\n                                                <input onChange={e => setFileName(e.target.files[0].name)} ref={ticket} class=\"file-input\" type=\"file\" name=\"resume\" />\n                                                <span class=\"file-cta\">\n                                                    <span class=\"file-icon\">\n                                                        <FontAwesomeIcon icon={faUpload} />\n                                                    </span>\n                                                    <span class=\"file-label is-center\" style={{ textAlign: 'center' }}>\n                                                        Seleccione un archivo\n                                                    </span>\n                                                </span>\n                                                <span class=\"file-name\" style={{ textAlign: 'center' }}>\n                                                    {fileName}\n                                                </span>\n                                            </label>\n                                        </div>\n                                        <br />\n                                        <button onClick={save} className='button is-fullwidth is-success'>REGISTRAR</button>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </section>\n        </div>\n    )\n}\nexport default Newoutcome;","/Users/kev/Desktop/themixeradmin/client/src/componets/outcomesCrud/outcomes.jsx",["81","82","83"],"import Navbar from \"../common/navbar\"\nimport Breadcrum from \"../common/breadcrum\"\nimport DataTable from 'react-data-table-component';\nimport firebase from '../../firebaseElements/firebase'\nimport { useEffect, useState } from \"react\";\nimport { Modal } from 'react-responsive-modal'\nimport memoize from 'memoize-one';\nimport 'react-responsive-modal/styles.css';\nimport CurrencyFormat from 'react-currency-format';\nimport Swal from 'sweetalert2'\nimport './outcome.scss'\n\nconst db = firebase.firestore();\nconst data = [{ id: 1, name: 'VITA - C', cathegory: 'Juice', description: 'naranja, guayaba, piña, miel, limón, jengibre', year: '1982' }];\nconst columns = memoize((modal, outcome) => [\n    {\n        name: 'Concepto',\n        selector: 'concept',\n        sortable: true,\n    },\n    {\n        name: 'Fecha',\n        cell: row => row.date.toDate().toLocaleString('es-MX', {\n            weekday: 'long',\n            year: 'numeric',\n            month: 'long',\n            day: 'numeric'\n        }),\n        sortable: true,\n        right: true,\n    },\n\n    {\n        name: 'Importe',\n        selector: row => row.quantity,\n        cell: row => <CurrencyFormat\n            decimalScale={2}\n            fixedDecimalScale={true}\n            value={row.quantity}\n            displayType={'text'}\n            thousandSeparator={true}\n            prefix={'$'}\n        />,\n    },\n\n    {\n        name: 'Status',\n        selector: 'year',\n        sortable: true,\n        right: true,\n    },\n    {\n        name: 'Detalles',\n        selector: 'year',\n        cell: row => <button onClick={() => { modal(true); outcome(row) }} className='button is-success' style={{ marginRight: '2%' }}>Detalles</button>,\n        right: true,\n    },\n\n]);\n\nconst customStyles = {\n    header: {\n        style: {\n            fontSize: '22px',\n            color: 'white',\n            backgroundColor: '#e91e63',\n            minHeight: '56px',\n            paddingLeft: '16px',\n            paddingRight: '8px',\n        },\n    },\n    headRow: {\n        style: {\n            backgroundColor: '#fafafa',\n            minHeight: '56px',\n            borderBottomWidth: '1.5px',\n            borderBottomColor: '#1293e1',\n            borderBottomStyle: 'solid',\n        },\n        denseStyle: {\n            minHeight: '32px',\n        },\n    },\n    headCells: {\n        style: {\n            fontSize: '1rem',\n            fontWeight: 700,\n            color: '#616161',\n            paddingLeft: '16px',\n            paddingRight: '16px',\n        },\n        activeSortStyle: {\n            color: '#1293e1',\n            '&:focus': {\n                outline: 'none',\n            },\n            '&:hover:not(:focus)': {\n                color: '#1293e1',\n            },\n        },\n        inactiveSortStyle: {\n            '&:focus': {\n                outline: 'none',\n                color: '#1293e1',\n            },\n            '&:hover': {\n                color: '#4dbbff',\n            },\n        },\n    },\n};\n\n\nfunction Outcomes() {\n\n    const [outcome, setOutcome] = useState();\n    const [open, setOpen] = useState(false);\n    const [startDate, setStartDate] = useState('');\n    const [finalDate, setFinalDate] = useState('');\n    const [kind, setKind] = useState('');\n    const [outcomes, setOutcomes] = useState([]);\n    const [userType, setUserType] = useState(\"\")\n    const [newSatate, setNewState] = useState()\n\n    async function getUserType(user, setUserType) {\n        const userType = await db.collection(\"accounts\").doc(user.uid).get()\n        if (userType.exists)\n            if (userType.data().type === 'admin') {\n                setUserType('admin')\n                console.log('admin')\n            } else {\n                setUserType('user')\n                console.log('user')\n            }\n    }\n\n    useEffect(() => {\n        firebase.auth().onAuthStateChanged(user => {\n            if (user) {\n                getUserType(user, setUserType)\n                console.log(`Hay un user ${user.email}`)\n            }\n            else\n                console.log('no user')\n        });\n    }, []);\n\n    useEffect(() => {\n        getAllData()\n        console.log('effect')\n    }, [startDate, finalDate, kind])\n\n    const toDate = (text, h, m, s) => {\n        const dataAux = text.split('-')\n        const temDate = new Date(Number(dataAux[0]), Number(dataAux[1]) - 1, Number(dataAux[2]), h, m, s)\n        return firebase.firestore.Timestamp.fromDate(temDate)\n    }\n\n    const getAllData = async () => {\n        if (startDate && finalDate && kind) {\n\n            console.log('get data')\n            const querySnapshot = await db.collection(\"outcomes\")\n                .where('kind', '==', kind)\n                .where('date', '>', toDate(startDate, 0, 0, 0))\n                .where('date', '<=', toDate(finalDate, 23, 59, 59)).onSnapshot(querySnapshot => {\n                    const temOutcomes = querySnapshot.docs.map(sale => {\n                        return {\n                            id: sale.id,\n                            ...sale.data()\n                        }\n                    })\n                    setOutcomes(temOutcomes)\n                })\n        }\n    }\n\n    const changeStatus = () => {\n        db.collection('outcomes').doc(outcome.id).update({\n            status: newSatate\n        }).then(() => {\n            Swal.fire(\n                'Actualizado!',\n                'El status se actulizo con exito',\n                'success'\n            )\n        }).catch(error =>\n            Swal.fire(\n                'Error!',\n                `Ocurrio un error: ${error}`,\n                'warning'\n            )\n        );\n    }\n    return (\n        <div>\n            <Navbar />\n            <section class=\"hero is-primary\">\n                <div class=\"hero-body\">\n                    <div class=\"container\">\n                        <h1 class=\"title\">Gastos e Ingresos</h1>\n                        <h2 class=\"subtitle\">Consulta los gastos e ingresos del periodo</h2>\n                        <Breadcrum parent='Gastos e Ingresos' children='Consultar Gastos e Ingresos' />\n                    </div>\n                </div>\n            </section>\n            <section class=\"section\">\n                <div class=\"container\">\n                    <div className='columns'>\n                        <div className='column'>\n                            <div class=\"field\">\n                                <label class=\"label\">Gastos / Ingresos</label>\n                                <div class=\"control\">\n                                    <div class=\"select is-fullwidth\">\n                                        <select onChange={e => setKind(e.target.value)}  >\n                                            <option selected disabled>Seleccione concepto</option>\n                                            <option value='Gasto'>Gastos</option>\n                                            <option value='Ingreso'>Ingresos</option>\n                                        </select>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div className='columns'>\n                        <div className='column is-6'>\n                            <div class=\"field\">\n                                <label class=\"label\">Fecha de inicio</label>\n                                <div class=\"control\">\n                                    <input onChange={e => setStartDate(e.target.value)} class=\"input\" type=\"date\" placeholder=\"Nombre del producto\" />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='column is-6'>\n                            <div class=\"field\">\n                                <label class=\"label\">Fecha de Fin</label>\n                                <div class=\"control\">\n                                    <input onChange={e => setFinalDate(e.target.value)} class=\"input\" type=\"date\" placeholder=\"Nombre del producto\" />\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n\n                    <DataTable\n                        columns={columns(setOpen, setOutcome)}\n                        data={outcomes}\n                        pagination={true}\n                        customStyles={customStyles}\n                        paginationComponentOptions={{ rowsPerPageText: 'Filas por pagina:', rangeSeparatorText: 'de' }}\n                    />\n                </div>\n            </section>\n            {outcome ? <Modal open={open} onClose={() => setOpen(false)} center >\n                <div style={{ padding: '2.8rem' }}>\n                    <h2 class=\"subtitle\"> {outcome.id}</h2>\n                    <h1 class=\"title\"><small>Concepto:</small> {outcome.concept}</h1>\n                    <br />\n                    <h3 class=\"subtitle is-size-6\"> <b>Descripción: </b> {outcome.description}</h3>\n                    <h3 class=\"subtitle is-size-6\"> <b>Fecha: </b> {outcome.date.toDate().toLocaleString('es-MX', {\n                        weekday: 'long',\n                        year: 'numeric',\n                        month: 'long',\n                        day: 'numeric'\n                    })}</h3>\n                    <h3 class=\"subtitle is-size-6\"> <b>Importe: </b><CurrencyFormat\n                        decimalScale={2}\n                        fixedDecimalScale={true}\n                        value={outcome.quantity}\n                        displayType={'text'}\n                        thousandSeparator={true}\n                        prefix={'$'}\n                    /></h3>\n                    <h3 class=\"subtitle is-size-6\"> <b>Método de pago/cobro: </b> {outcome.paymethod}</h3>\n                    <h3 class=\"subtitle is-size-6\"> <b>Responsable: </b> {outcome.responsable}</h3>\n                    <h3 class=\"subtitle is-size-6\"> <b>Autoriza: </b> {outcome.authorizer}</h3>\n                    {userType === 'admin' ? (<>\n                        <select className='select ' defaultValue={outcome.status} onChange={e => setNewState(e.target.value)} >\n                            <option>No autorizado</option>\n                            <option>Autorizado</option>\n                        </select> <br />\n                        <button className='button is-success' onClick={changeStatus} >Cambiar status</button>\n                        <br />\n                    </>) :\n                        <h3 class=\"subtitle is-size-6\"> <b>Status: </b> {outcome.status}</h3>\n                    }\n                    <img style={{ width: '25rem' }} src={outcome.ticketImg} alt=\"ticketImg\" />x\n                    <div className=\"modal-footer\">\n\n                    </div>\n                </div>\n            </Modal> : null}\n        </div>\n    )\n}\nexport default Outcomes;","/Users/kev/Desktop/themixeradmin/client/src/componets/productCrud/index.jsx",["84","85","86"],"/Users/kev/Desktop/themixeradmin/client/src/componets/Login/index.jsx",["87","88"],"/Users/kev/Desktop/themixeradmin/client/src/firebaseElements/firebase.js",[],"/Users/kev/Desktop/themixeradmin/client/src/componets/common/navbar.jsx",["89","90","91","92","93","94","95","96","97","98","99","100","101","102"],"/Users/kev/Desktop/themixeradmin/client/src/componets/common/breadcrum.jsx",["103","104"],{"ruleId":"105","severity":1,"message":"106","line":39,"column":8,"nodeType":"107","endLine":39,"endColumn":30,"suggestions":"108"},{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","replacedBy":"112"},{"ruleId":"105","severity":1,"message":"106","line":132,"column":7,"nodeType":"107","endLine":132,"endColumn":37,"suggestions":"113"},{"ruleId":"105","severity":1,"message":"106","line":118,"column":8,"nodeType":"107","endLine":118,"endColumn":30,"suggestions":"114"},{"ruleId":"115","severity":1,"message":"116","line":3,"column":21,"nodeType":"117","messageId":"118","endLine":3,"endColumn":27},{"ruleId":"115","severity":1,"message":"119","line":5,"column":10,"nodeType":"117","messageId":"118","endLine":5,"endColumn":19},{"ruleId":"115","severity":1,"message":"120","line":14,"column":7,"nodeType":"117","messageId":"118","endLine":14,"endColumn":11},{"ruleId":"105","severity":1,"message":"106","line":165,"column":8,"nodeType":"107","endLine":165,"endColumn":36,"suggestions":"121"},{"ruleId":"115","severity":1,"message":"122","line":177,"column":19,"nodeType":"117","messageId":"118","endLine":177,"endColumn":32},{"ruleId":"105","severity":1,"message":"123","line":56,"column":6,"nodeType":"107","endLine":56,"endColumn":8,"suggestions":"124"},{"ruleId":"125","severity":1,"message":"126","line":147,"column":19,"nodeType":"127","endLine":147,"endColumn":86},{"ruleId":"125","severity":1,"message":"126","line":205,"column":19,"nodeType":"127","endLine":205,"endColumn":86},{"ruleId":"115","severity":1,"message":"128","line":11,"column":18,"nodeType":"117","messageId":"118","endLine":11,"endColumn":29},{"ruleId":"129","severity":1,"message":"130","line":62,"column":21,"nodeType":"127","endLine":62,"endColumn":62},{"ruleId":"129","severity":1,"message":"130","line":45,"column":25,"nodeType":"127","endLine":45,"endColumn":43},{"ruleId":"125","severity":1,"message":"131","line":48,"column":21,"nodeType":"127","endLine":48,"endColumn":137},{"ruleId":"125","severity":1,"message":"131","line":58,"column":29,"nodeType":"127","endLine":58,"endColumn":56},{"ruleId":"125","severity":1,"message":"131","line":64,"column":37,"nodeType":"127","endLine":64,"endColumn":64},{"ruleId":"125","severity":1,"message":"131","line":69,"column":37,"nodeType":"127","endLine":69,"endColumn":64},{"ruleId":"125","severity":1,"message":"131","line":77,"column":29,"nodeType":"127","endLine":77,"endColumn":56},{"ruleId":"125","severity":1,"message":"131","line":83,"column":37,"nodeType":"127","endLine":83,"endColumn":64},{"ruleId":"125","severity":1,"message":"131","line":88,"column":37,"nodeType":"127","endLine":88,"endColumn":64},{"ruleId":"125","severity":1,"message":"131","line":93,"column":37,"nodeType":"127","endLine":93,"endColumn":64},{"ruleId":"125","severity":1,"message":"131","line":102,"column":29,"nodeType":"127","endLine":102,"endColumn":56},{"ruleId":"125","severity":1,"message":"131","line":108,"column":37,"nodeType":"127","endLine":108,"endColumn":64},{"ruleId":"125","severity":1,"message":"131","line":113,"column":37,"nodeType":"127","endLine":113,"endColumn":64},{"ruleId":"125","severity":1,"message":"131","line":118,"column":37,"nodeType":"127","endLine":118,"endColumn":64},{"ruleId":"125","severity":1,"message":"131","line":131,"column":37,"nodeType":"127","endLine":131,"endColumn":79},{"ruleId":"125","severity":1,"message":"126","line":6,"column":21,"nodeType":"127","endLine":6,"endColumn":33},{"ruleId":"125","severity":1,"message":"126","line":7,"column":43,"nodeType":"127","endLine":7,"endColumn":55},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getAllData'. Either include it or remove the dependency array.","ArrayExpression",["132"],"no-native-reassign",["133"],"no-negated-in-lhs",["134"],["135"],["136"],"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'data' is assigned a value but never used.",["137"],"'querySnapshot' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'db'. Either include it or remove the dependency array.",["138"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'getUserType' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md",{"desc":"139","fix":"140"},"no-global-assign","no-unsafe-negation",{"desc":"141","fix":"142"},{"desc":"139","fix":"143"},{"desc":"144","fix":"145"},{"desc":"146","fix":"147"},"Update the dependencies array to be: [startDate, finalDate, getAllData]",{"range":"148","text":"149"},"Update the dependencies array to be: [startDate, finalDate, category, getAllData]",{"range":"150","text":"151"},{"range":"152","text":"149"},"Update the dependencies array to be: [startDate, finalDate, kind, getAllData]",{"range":"153","text":"154"},"Update the dependencies array to be: [db]",{"range":"155","text":"156"},[1460,1482],"[startDate, finalDate, getAllData]",[3291,3321],"[startDate, finalDate, category, getAllData]",[3270,3292],[4608,4636],"[startDate, finalDate, kind, getAllData]",[1630,1632],"[db]"]