[{"C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\index.js":"1","C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\reportWebVitals.js":"2","C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\Home.jsx":"3","C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\common\\Switch.js":"4","C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\common\\Helmet.js":"5","C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\productCrud\\index.jsx":"6","C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\Login\\index.jsx":"7","C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\firebaseElements\\firebase.js":"8","C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\common\\navbar.jsx":"9","C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\common\\breadcrum.jsx":"10","C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\productCrud\\products.jsx":"11","C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\saleCrud\\newsale.jsx":"12","C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\saleCrud\\sales.jsx":"13","C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\saleCrud\\salescat.jsx":"14","C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\generalbalance.jsx":"15","C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\outcomesCrud\\newoutcome.jsx":"16","C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\outcomesCrud\\outcomes.jsx":"17"},{"size":702,"mtime":1611632465612,"results":"18","hashOfConfig":"19"},{"size":375,"mtime":1611632465721,"results":"20","hashOfConfig":"19"},{"size":1558,"mtime":1611632490918,"results":"21","hashOfConfig":"19"},{"size":1091,"mtime":1611632465612,"results":"22","hashOfConfig":"19"},{"size":403,"mtime":1611632465612,"results":"23","hashOfConfig":"19"},{"size":10182,"mtime":1611708522101,"results":"24","hashOfConfig":"19"},{"size":4023,"mtime":1611632490918,"results":"25","hashOfConfig":"19"},{"size":623,"mtime":1611632490918,"results":"26","hashOfConfig":"19"},{"size":6108,"mtime":1611632490918,"results":"27","hashOfConfig":"19"},{"size":450,"mtime":1611632490918,"results":"28","hashOfConfig":"19"},{"size":10120,"mtime":1611704543314,"results":"29","hashOfConfig":"19"},{"size":16905,"mtime":1611632490918,"results":"30","hashOfConfig":"19"},{"size":11280,"mtime":1611706478827,"results":"31","hashOfConfig":"19"},{"size":9541,"mtime":1611707495099,"results":"32","hashOfConfig":"19"},{"size":10723,"mtime":1611632490918,"results":"33","hashOfConfig":"19"},{"size":14319,"mtime":1611632490918,"results":"34","hashOfConfig":"19"},{"size":8022,"mtime":1611692775253,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"g1tjon",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"38"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"38"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"38"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"38"},"C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\index.js",[],["78","79"],"C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\reportWebVitals.js",[],"C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\Home.jsx",[],"C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\common\\Switch.js",[],"C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\common\\Helmet.js",[],"C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\productCrud\\index.jsx",["80","81","82"],"C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\Login\\index.jsx",["83","84"],"import React, { useEffect, useState } from \"react\";\r\nimport firebase from '../../firebaseElements/firebase'\r\nimport './login.scss'\r\nimport logo from \"../../assets/images/logos/logo.png\"\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCheck, faLock, faUser } from '@fortawesome/free-solid-svg-icons'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nfunction Login() {\r\n  const db = firebase.firestore();\r\n  async function getUserType(user, setUserType) {\r\n    const userType = await db.doc('accounts').collection(\"accounts\").doc(user.uid).get()\r\n    if (userType.exists)\r\n      db.doc('accounts').collection(\"accounts\").doc(user.uid).onSnapshot((doc) => {\r\n        if (doc.data().type === 'admin')\r\n          setUserType('admin')\r\n      });\r\n  }\r\n  function singIn(email, password){\r\n    firebase.auth().signInWithEmailAndPassword(email, password)\r\n    .then((user) => {\r\n      // Signed in \r\n      // ...\r\n    })\r\n    .catch((error) => {\r\n      var errorCode = error.code;\r\n      var errorMessage = error.message;\r\n      console.log(errorCode,'-----', errorMessage)\r\n    });\r\n  }\r\n\r\n  const [userType, setUserType]= useState(\"\")\r\n  const [mail, setMail]= useState(\"\")\r\n  const [pass, setPass]= useState(\"\")\r\n\r\n  useEffect(() => {\r\n    //firebase.auth().signOut()//ELIMINAR close sesion at refresh \r\n    firebase.auth().onAuthStateChanged(user => {\r\n      if (user){\r\n        //getUserType(user, setUserType)\r\n        console.log(`Hay un user ${user.email}`)\r\n        setUserType(true)//teporal\r\n      }\r\n      else\r\n        console.log('no user')\r\n    });\r\n  }, []);\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    singIn(mail,pass)\r\n}\r\n  return userType ? <Redirect to={'productos'} /> :(\r\n    <div className=\"App\">\r\n      <section className=\"hero is-primary is-fullheight\">\r\n        <div className=\"hero-body\">\r\n          <div className=\"container\">\r\n            <div className=\"columns is-centered\">\r\n              <div className=\"column is-5-tablet is-4-desktop is-5-widescreen\">\r\n                <form action=\"\" className=\"box\" onSubmit={handleSubmit}>\r\n\r\n                  <div className=\"has-text-centered\">\r\n                    <img className=\"login-logo\" src={logo} />\r\n                    <h1 className=\"title is-3\" style={{ color: '#555' }}>Iniciar sesión</h1>\r\n                    <h2 className=\"subtitle is-6\" style={{ color: '#757575' }}>Ingrese sus datos para continuar</h2>\r\n                    <hr className=\"login-hr\" />\r\n                  </div>\r\n\r\n                  <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                      <input onChange={e=>setMail(e.target.value)} className=\"input\" type=\"email\" placeholder=\"Usuario\" />\r\n                      <span className=\"icon is-small is-left\">\r\n                        <FontAwesomeIcon icon={faUser} />\r\n                      </span>\r\n                      <span className=\"icon is-small is-right\">\r\n                        <FontAwesomeIcon icon={faCheck} />\r\n                      </span>\r\n                    </p>\r\n                  </div>\r\n\r\n                  <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                      <input onChange={e=>setPass(e.target.value)} className=\"input\" type=\"password\" placeholder=\"Contraseña\" />\r\n                      <span className=\"icon is-small is-left\">\r\n                        <FontAwesomeIcon icon={faLock} />\r\n                      </span>\r\n                    </p>\r\n                  </div>\r\n\r\n                  <hr className=\"login-hr\" />\r\n                  <div className=\"field\">\r\n                    <button type=\"submit\" value=\"Submit\"  className=\"button is-success is-fullwidth \">\r\n                      Iniciar sesión\r\n                    </button>\r\n                  </div>\r\n                </form>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default Login;\r\n\r\n\r\n","C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\firebaseElements\\firebase.js",[],"C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\common\\navbar.jsx",["85","86","87","88","89","90","91","92","93","94","95","96","97","98"],"import logo from \"../../assets/images/logos/logo3.png\"\r\nimport { Link } from 'react-router-dom'\r\nimport firebase from '../../firebaseElements/firebase'\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n\r\n    // Get all \"navbar-burger\" elements\r\n    const $navbarBurgers = Array.prototype.slice.call(document.querySelectorAll('.navbar-burger'), 0);\r\n\r\n    // Check if there are any navbar burgers\r\n    if ($navbarBurgers.length > 0) {\r\n\r\n        // Add a click event on each of them\r\n        $navbarBurgers.forEach(el => {\r\n            el.addEventListener('click', () => {\r\n\r\n                // Get the target from the \"data-target\" attribute\r\n                const target = el.dataset.target;\r\n                const $target = document.getElementById(target);\r\n\r\n                // Toggle the \"is-active\" class on both the \"navbar-burger\" and the \"navbar-menu\"\r\n                el.classList.toggle('is-active');\r\n                $target.classList.toggle('is-active');\r\n\r\n            });\r\n        });\r\n    }\r\n\r\n});\r\n\r\nfunction close(){\r\n    firebase.auth().signOut().then(function() {\r\n        console.log('Sign-out uccessful')\r\n      }).catch(function(error) {\r\n        // An error happened.\r\n      }); \r\n}\r\n\r\nfunction Navbar() {\r\n    return (\r\n        <div>\r\n            <nav className=\"navbar is-primary\" role=\"navigation\" aria-label=\"main navigation\">\r\n                <div className=\"navbar-brand\">\r\n                    <a className=\"navbar-item\" href=\"https://bulma.io\">\r\n                        <img src={logo} />\r\n                    </a>\r\n\r\n                    <a role=\"button\" className=\"navbar-burger\" aria-label=\"menu\" aria-expanded=\"false\" data-target=\"navbarBasicExample\">\r\n                        <span aria-hidden=\"true\"></span>\r\n                        <span aria-hidden=\"true\"></span>\r\n                        <span aria-hidden=\"true\"></span>\r\n                    </a>\r\n                </div>\r\n\r\n                <div id=\"navbarBasicExample\" className=\"navbar-menu\">\r\n                    <div className=\"navbar-start\">\r\n                        <div className=\"navbar-item has-dropdown is-hoverable\">\r\n                            <a className=\"navbar-link\">\r\n                                Productos\r\n                            </a>\r\n\r\n                            <div className=\"navbar-dropdown\">\r\n                                <Link to={`${process.env.PUBLIC_URL}/producto`}>\r\n                                    <a className=\"navbar-item\">\r\n                                        Nuevo Producto\r\n                                    </a>\r\n                                </Link>\r\n                                <Link to={`${process.env.PUBLIC_URL}/productos`}>\r\n                                    <a className=\"navbar-item\">\r\n                                        Todos los productos\r\n                                    </a>\r\n                                </Link>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"navbar-item has-dropdown is-hoverable\">\r\n                            <a className=\"navbar-link\">\r\n                                Gastos e Ingresos\r\n                            </a>\r\n\r\n                            <div className=\"navbar-dropdown\">\r\n                                <Link to={`${process.env.PUBLIC_URL}/alta-gasto`}>\r\n                                    <a className=\"navbar-item\">\r\n                                        Alta de Gastos e Ingresos\r\n                                    </a>\r\n                                </Link>\r\n                                <Link to={`${process.env.PUBLIC_URL}/gastos`}>\r\n                                    <a className=\"navbar-item\">\r\n                                        Consultar Gastos e Ingresos\r\n                                    </a>\r\n                                </Link>\r\n                                <Link to={`${process.env.PUBLIC_URL}/balance-general`}>\r\n                                    <a className=\"navbar-item\">\r\n                                        Balance General\r\n                            </a>\r\n                                </Link>\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n                        <div className=\"navbar-item has-dropdown is-hoverable\">\r\n                            <a className=\"navbar-link\">\r\n                                Ventas\r\n                            </a>\r\n\r\n                            <div className=\"navbar-dropdown\">\r\n                                <Link to={`${process.env.PUBLIC_URL}/nueva-venta`}>\r\n                                    <a className=\"navbar-item\">\r\n                                        Nueva Venta\r\n                                </a>\r\n                                </Link>\r\n                                <Link to={`${process.env.PUBLIC_URL}/ventas`}>\r\n                                    <a className=\"navbar-item\">\r\n                                        Ventas Generales\r\n                                </a>\r\n                                </Link>\r\n                                <Link to={`${process.env.PUBLIC_URL}/ventas-desglosado`}>\r\n                                    <a className=\"navbar-item\">\r\n                                        Ventas por Categoria\r\n                                </a>\r\n                                </Link>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                    <div className=\"navbar-end\">\r\n                        <div className=\"navbar-item\">\r\n                            <div className=\"buttons\">\r\n                                <Link onClick={close} to={`${process.env.PUBLIC_URL}`}>\r\n                                    <a className=\"button is-link is-outlined\">\r\n                                        Cerrar Sesión\r\n                                    </a>\r\n                                </Link>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    );\r\n}\r\nexport default Navbar;","C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\common\\breadcrum.jsx",["99","100","101","102"],"function Breadcrum() {\r\n    return (\r\n        <nav className=\"breadcrumb is-small\" aria-label=\"breadcrumbs\">\r\n            <ul>\r\n                <li><a href=\"#\">Bulma</a></li>\r\n                <li><a href=\"#\">Documentation</a></li>\r\n                <li><a href=\"#\">Components</a></li>\r\n                <li className=\"is-active\"><a href=\"#\" aria-current=\"page\">Breadcrumb</a></li>\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\nexport default Breadcrum;","C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\productCrud\\products.jsx",[],"C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\saleCrud\\newsale.jsx",["103"],"import Navbar from \"../common/navbar\"\r\nimport Breadcrum from \"../common/breadcrum\"\r\n//import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n//import { faDollarSign } from '@fortawesome/free-solid-svg-icons'\r\nimport { useEffect, useRef, useState } from 'react'\r\nimport firebase from '../../firebaseElements/firebase'\r\nimport { Modal } from 'react-responsive-modal'\r\nimport 'react-responsive-modal/styles.css';\r\nimport CurrencyFormat from 'react-currency-format';\r\nimport Swal from 'sweetalert2'\r\n\r\nconst db = firebase.firestore();\r\nconst quantityButtonStyle = {\r\n    backgroundColor: 'transparent',\r\n    border: '1px solid #ddd',\r\n    padding: '.5rem .8rem',\r\n    fontWeight: '900',\r\n    borderRadius: '4px 0px 0px 4px'\r\n}\r\nconst productQuantityStyle = {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    padding: '.5rem .8rem',\r\n    border: '1px solid rgb(221, 221, 221)'\r\n}\r\n\r\nfunction Newsale() {\r\n    const [categoriesList, setCategoriesList] = useState([])\r\n    const [productsList, setProductsList] = useState([])\r\n    const [filteredProductsList, setFilteredProductsList] = useState([])\r\n    const [orderProducts, setOrderProducts] = useState([])\r\n    const [open, setOpen] = useState(false);\r\n    const [payMethod,setPayMethod] = useState('cash')\r\n\r\n    useEffect(() => {\r\n        db.collection(\"products\").onSnapshot(doc => {\r\n            let allProducts = doc.docs.map(product => {\r\n                return {\r\n                    id: product.id,\r\n                    ...product.data()\r\n                }\r\n            })\r\n            setProductsList(allProducts);\r\n            db.collection(\"categories\").onSnapshot(doc => {\r\n                let allCategories = doc.docs.map(category => {\r\n                    return {\r\n                        id: category.id,\r\n                        ...category.data()\r\n                    }\r\n                })\r\n                setCategoriesList(allCategories);\r\n                setFilteredProductsList(allProducts.filter(product => product.category === allCategories[0].name))\r\n            });\r\n        });\r\n    }, [])\r\n    const filterProducts = filterBy => {\r\n        setFilteredProductsList(productsList.filter(product => product.category === filterBy))\r\n    }\r\n    const getCurrentOrderProducts = product=>{\r\n        const i = orderProducts.map(e => e.id).findIndex(ele => ele === product.id);\r\n        let aux = orderProducts.map(e => e)\r\n        return [i, aux];\r\n    }\r\n    const addProduct = product => {\r\n        let [i, aux] = getCurrentOrderProducts(product)\r\n        if (i === -1)\r\n            aux.push({ quantity: 1, ...product })\r\n        else\r\n            aux[i].quantity++;\r\n        setOrderProducts(aux)\r\n    }\r\n    const moreProduct = product => {\r\n        let [i, aux] = getCurrentOrderProducts(product)\r\n        aux[i].quantity++;\r\n        setOrderProducts(aux)\r\n    }\r\n    const lessProduct = product => {\r\n        let [i, aux] = getCurrentOrderProducts(product)\r\n        if (product.quantity === 1)\r\n            aux.splice(i, 1)\r\n        else\r\n            aux[i].quantity--;\r\n        setOrderProducts(aux)\r\n    }\r\n    const totalOrder = ()=>{\r\n        const reducer = (accumulator, product) => accumulator + (product.quantity*product.price);\r\n        return orderProducts.reduce(reducer,0)\r\n    }\r\n     const order = ()=>{\r\n        if (payMethod === 'debit' ||payMethod === 'credit') {\r\n            console.log('handeled')\r\n            Swal.fire({\r\n                title: '¿Pasó la tarjeta?',\r\n                text: \"Confirma el cobro en tu terminal antes de registrar la compra\",\r\n                icon: 'question',\r\n                showCancelButton: true,\r\n                confirmButtonColor: '#e91e63',\r\n                cancelButtonColor: '#bdbdbd ',\r\n                confirmButtonText: 'Si',\r\n                cancelButtonText: 'No'\r\n            }).then(result => {\r\n                setOrderOnDB(result)\r\n            }) \r\n        }  else {\r\n            Swal.fire({\r\n                title: '¿El cobro fue correcto?',\r\n                text: \"Confirma el cobro antes de registrar la compra\",\r\n                icon: 'question',\r\n                showCancelButton: true,\r\n                confirmButtonColor: '#e91e63',\r\n                cancelButtonColor: '#bdbdbd ',\r\n                confirmButtonText: 'Si',\r\n                cancelButtonText: 'No'\r\n            }).then(result => {\r\n                setOrderOnDB(result)\r\n            }) \r\n\r\n        }\r\n    } \r\n    const setOrderOnDB = result=>{\r\n            if (result.value) {\r\n                let order = {\r\n                    paymethod: payMethod,\r\n                    date: firebase.firestore.Timestamp.now(),\r\n                    toprint: true,\r\n                    products: orderProducts.map(product=>{\r\n                        return {\r\n                            name: product.name,\r\n                            price: product.price,\r\n                            cost: product.cost,\r\n                            quantity: product.quantity,\r\n                            id: product.id,\r\n                            category: product.category\r\n                        }\r\n                    })\r\n                }\r\n                db.collection('orders').add(order).then(()=>{\r\n                    Swal.fire(\r\n                        '¡Ordenado!',\r\n                        'La orden está siendo preparada',\r\n                        'success'\r\n                    )\r\n                    setOrderProducts([]);\r\n                }).catch(error =>\r\n                    Swal.fire(\r\n                        'Error!',\r\n                        `Ocurrio un error: ${error}`,\r\n                        'warning'\r\n                    )\r\n                );\r\n                setOpen(false);\r\n            }\r\n    }\r\n    return (<>\r\n        <div>\r\n            <Navbar />\r\n            <section className=\"hero is-primary\">\r\n                <div className=\"hero-body\">\r\n                    <div className=\"container\">\r\n                        <h1 className=\"title\">Nueva Venta</h1>\r\n                        <h2 className=\"subtitle\">Generar Venta</h2>\r\n                        <Breadcrum />\r\n                    </div>\r\n                </div>\r\n            </section>\r\n            <section className=\"section\">\r\n                <div className=\"container\">\r\n                    <div className='columns'>\r\n                        <div className=\"column\">\r\n                            <label>Seleccione Categoría:</label>\r\n                            <div className=\"field has-addons\">\r\n                                <div className=\"control is-expanded\">\r\n                                    <div className=\"select is-fullwidth\">\r\n                                        <select onChange={e => filterProducts(e.target.value)} name=\"country\">\r\n                                            {categoriesList.map(cat =>\r\n                                                <option key={cat.id} value={cat.name}> {cat.name} </option>\r\n                                            )}\r\n                                        </select>\r\n                                    </div>\r\n                                </div>\r\n                                {/* <div className=\"control\">\r\n                                    <button type=\"submit\" className=\"button is-success\">Seleccionar</button>\r\n                                </div> */}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className='columns'>\r\n                        <div className=\"column\">\r\n                            <div className='card'>\r\n                                <header className=\"card-header\">\r\n                                    <p className=\"card-header-title\">\r\n                                        Productos de la  Categoría\r\n                                    </p>\r\n                                </header>\r\n                                <div className=\"card-content\" style={{ overflow: 'scroll', height: '20rem' }}>\r\n                                    <div className=\"content\">\r\n                                        <table className=\"table is-hoverable\">\r\n                                            <tr>\r\n                                                <th>Producto</th>\r\n                                                <th>Descripción</th>\r\n                                                <th>Precio</th>\r\n                                            </tr>\r\n                                            {filteredProductsList.map(product =>\r\n                                                <tr onClick={() => addProduct(product)} key={product.id}>\r\n                                                    <td>{product.name} </td>\r\n                                                    <td>{product.description} </td>\r\n                                                    <td> {product.price} </td>\r\n                                                </tr>\r\n                                            )}\r\n                                        </table>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"column\">\r\n                            <div className='card'>\r\n                                <header className=\"card-header\">\r\n                                    <p className=\"card-header-title\">\r\n                                        Productos en la Orden\r\n                                    </p>\r\n                                </header>\r\n                                <div className=\"card-content\" style={{ overflow: 'scroll', height: '20rem' }}>\r\n                                    <div className=\"content\">\r\n                                        <table className=\"table is-hoverable\">\r\n                                            <tr>\r\n                                                <th>Producto</th>\r\n                                                <th>Descripción</th>\r\n                                                <th>Cantidad</th>\r\n                                                <th>Precio Unitario</th>\r\n                                                <th>Total</th>\r\n                                            </tr>\r\n                                            {orderProducts.map(product =>\r\n                                                <tr key={product.id}>\r\n                                                    <td>{product.name} </td>\r\n                                                    <td>{product.description} </td>\r\n                                                    <td><div style={{ display: 'flex' }}>\r\n                                                        <button onClick={() => lessProduct(product)} style={quantityButtonStyle}>-</button>\r\n                                                        <div style={productQuantityStyle}> {product.quantity} </div>\r\n                                                        <button onClick={() => moreProduct(product)} style={quantityButtonStyle}>+</button>\r\n                                                    </div>\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        <CurrencyFormat decimalScale={2} fixedDecimalScale={true} \r\n                                                        value={product.price} displayType={'text'} thousandSeparator={true} \r\n                                                        prefix={'$'} />\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        <CurrencyFormat decimalScale={2} fixedDecimalScale={true} \r\n                                                        value={product.price*product.quantity} displayType={'text'} thousandSeparator={true} \r\n                                                        prefix={'$'} />\r\n                                                    </td>\r\n                                                </tr>)}\r\n                                        </table>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <br />\r\n                            <button onClick={() => setOpen(true)} disabled={orderProducts.length > 0 ? false : true} className='button is-success is-fullwidth'>CONFIRMAR ORDEN</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        </div>\r\n        <Modal open={open} onClose={() => setOpen(false)} center >\r\n            <div className=\"modal-header\">\r\n                <h5 className=\"modal-title f-w-600\" id=\"exampleModalLabel2\">Confirmar orden</h5>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n                <br />\r\n                <div className=\"user-status table-responsive products-table\">\r\n                    <table className=\"table table-bordernone mb-0\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th scope=\"col\">Cantidad</th>\r\n                                <th scope=\"col\">Producto</th>\r\n                                <th scope=\"col\">Descripción</th>\r\n                                <th scope=\"col\">Precio Unitario</th>\r\n                                <th scope=\"col\">Total</th>\r\n                            </tr>\r\n                        </thead>\r\n                        {orderProducts.map(product =>\r\n                            <tr key={product.id}>\r\n                                <td>{product.quantity} </td>\r\n                                <td>{product.name} </td>\r\n                                <td>{product.description} </td>\r\n                                <td>\r\n                                    <CurrencyFormat decimalScale={2} fixedDecimalScale={true} \r\n                                    value={product.price} displayType={'text'} thousandSeparator={true} \r\n                                    prefix={'$'} />\r\n                                </td>\r\n                                <td>\r\n                                    <CurrencyFormat decimalScale={2} fixedDecimalScale={true} \r\n                                    value={product.price*product.quantity} displayType={'text'} thousandSeparator={true} \r\n                                    prefix={'$'} />\r\n                                </td>\r\n                            </tr>\r\n                        )}\r\n                        <tr>\r\n                            <td></td>\r\n                            <td></td>\r\n                            <td></td>\r\n                            <td>Total a pagar</td>\r\n                            <td>\r\n                                <CurrencyFormat decimalScale={2} fixedDecimalScale={true} \r\n                                value={totalOrder()} displayType={'text'} thousandSeparator={true} \r\n                                prefix={'$'} />\r\n                            </td>\r\n                        </tr>\r\n                        <tbody>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <div>\r\n                    <div className=\"row\" style={{ /* backgroundColor: '#f5f5f5', */ padding: '3%', marginTop: '4%' }}>\r\n                        <div className='col'><b>Forma de pago</b></div>\r\n                        <div className=\"col\" >\r\n                            <label className=\"d-block\" >\r\n                                <input onChange={()=>setPayMethod('cash')}  className=\"radio_animated\" id=\"edo-ani3\" type=\"radio\" name=\"rdo-ani2\" defaultChecked />Efectivo\r\n                            </label>\r\n                        </div>\r\n                        <div className=\"col\" >\r\n                            <label className=\"d-block\">\r\n                                <input onChange={()=>setPayMethod('debit')}  className=\"radio_animated\" id=\"edo-ani4\" type=\"radio\" name=\"rdo-ani2\" />Tarjeta de debito\r\n                            </label>\r\n                        </div>\r\n                        <div className=\"col\" >\r\n                            <label className=\"d-block\">\r\n                                <input onChange={()=>setPayMethod('credit')} className=\"radio_animated\" id=\"edo-ani4\" type=\"radio\" name=\"rdo-ani2\" /> Tarjeta de credito\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"modal-footer\">\r\n                <button onClick={order} className=\"button\" style={{ backgroundColor: '#e91e63 ', color: 'white' }}>Ordenar</button>\r\n                <button className=\"button\" onClick={() => setOpen(false)}>Cancelar</button>\r\n            </div>\r\n        </Modal>\r\n    </>)\r\n}\r\nexport default Newsale;","C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\saleCrud\\sales.jsx",["104"],"C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\saleCrud\\salescat.jsx",["105"],"C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\generalbalance.jsx",["106","107"],"import Navbar from \"./common/navbar\"\r\nimport Breadcrum from \"./common/breadcrum\"\r\nimport CurrencyFormat from 'react-currency-format';\r\nimport { useEffect, useState } from \"react\";\r\nimport firebase from '../firebaseElements/firebase'\r\n\r\nconst db = firebase.firestore();\r\n\r\nfunction Balance() {\r\n    const [startDate, setStartDate] = useState('');\r\n    const [finalDate, setFinalDate] = useState('');\r\n\r\n    useEffect(() => {\r\n        getAllData()\r\n        console.log('effect')\r\n    },[startDate,finalDate])\r\n\r\n    const getAllData = async () => {\r\n        if (startDate && finalDate) {\r\n            const querySnapshot = await db.collection(\"orders\")\r\n                .where('date', '>', toDate(startDate, 0, 0, 0))\r\n                .where('date', '<=', toDate(finalDate, 23, 59, 59))\r\n                .get()\r\n\r\n            const orders = querySnapshot.docs.map(sale => {\r\n                return {\r\n                    id: sale.id,\r\n                    ...sale.data(),\r\n                    total: totalOrder(sale.data().products)\r\n                }\r\n            })\r\n           \r\n        }\r\n    }\r\n    const totalOrder = products => {\r\n        const reducer = (accumulator, product) => accumulator + (product.quantity * product.price);\r\n        return products.reduce(reducer, 0)\r\n    }\r\n    const toDate = (text, h, m, s) => {\r\n        const dataAux = text.split('-')\r\n        const temDate = new Date(Number(dataAux[0]), Number(dataAux[1]) - 1, Number(dataAux[2]), h, m, s)\r\n        return firebase.firestore.Timestamp.fromDate(temDate)\r\n    }\r\n    return (\r\n        <div>\r\n            <Navbar />\r\n            <section class=\"hero is-primary\">\r\n                <div class=\"hero-body\">\r\n                    <div class=\"container\">\r\n                        <h1 class=\"title\">Balance General </h1>\r\n                        <h2 class=\"subtitle\">Consulta la relación entre gastos e ingresos.</h2>\r\n                        <Breadcrum />\r\n                    </div>\r\n                </div>\r\n            </section>\r\n            <section class=\"section\">\r\n                <div class=\"container\">\r\n                    <div className='columns'>\r\n                        <div className='column is-6'>\r\n                            <div class=\"field\">\r\n                                <label class=\"label\">Fecha de inicio</label>\r\n                                <div class=\"control\">\r\n                                    <input onChange={e => setStartDate(e.target.value)} class=\"input\" type=\"date\" placeholder=\"Nombre del producto\" />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className='column is-6'>\r\n                            <div class=\"field\">\r\n                                <label class=\"label\">Fecha de Fin</label>\r\n                                <div class=\"control\">\r\n                                    <input onChange={e => setFinalDate(e.target.value)} class=\"input\" type=\"date\" placeholder=\"Nombre del producto\" />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                    <div className='table-container'>\r\n                        <table className='table' style={{ marginBottom: '2%', width: '100%' }}>\r\n                            <tbody >\r\n                                <tr style={{ textAlign: 'center' }}>\r\n                                    <th colSpan='2' className='is-success'>GASTOS</th>\r\n                                    <th colSpan='2' className='is-info'>INGRESOS</th>\r\n                                </tr>\r\n                                <tr>\r\n                                    <th>Concepto</th>\r\n                                    <th style={{ borderRight: '1px solid #dee2e6' }}>Monto</th>\r\n                                    <th>Concepto</th>\r\n                                    <th>Monto</th>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Gastos en General</td>\r\n                                    <td style={{ borderRight: '1px solid #dee2e6' }}>\r\n                                        <CurrencyFormat\r\n                                            decimalScale={2}\r\n                                            fixedDecimalScale={true}\r\n                                            value={200}\r\n                                            displayType={'text'}\r\n                                            thousandSeparator={true}\r\n                                            prefix={'$'}\r\n                                        />\r\n                                    </td>\r\n\r\n                                    <td >Ventas en General</td>\r\n                                    <td >\r\n                                        <CurrencyFormat\r\n                                            decimalScale={2}\r\n                                            fixedDecimalScale={true}\r\n                                            value={250}\r\n                                            displayType={'text'}\r\n                                            thousandSeparator={true}\r\n                                            prefix={'$'}\r\n                                        />\r\n                                    </td>\r\n\r\n\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Gastos Operativos</td>\r\n                                    <td style={{ borderRight: '1px solid #dee2e6' }}>\r\n                                        <CurrencyFormat\r\n                                            decimalScale={2}\r\n                                            fixedDecimalScale={true}\r\n                                            value={150}\r\n                                            displayType={'text'}\r\n                                            thousandSeparator={true}\r\n                                            prefix={'$'}\r\n                                        />\r\n                                    </td>\r\n\r\n                                    <td >Proteínas NA</td>\r\n                                    <td >\r\n                                        <CurrencyFormat\r\n                                            decimalScale={2}\r\n                                            fixedDecimalScale={true}\r\n                                            value={120}\r\n                                            displayType={'text'}\r\n                                            thousandSeparator={true}\r\n                                            prefix={'$'}\r\n                                        />\r\n                                    </td>\r\n\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Gastos Administrativos</td>\r\n                                    <td style={{ borderRight: '1px solid #dee2e6' }}>\r\n                                        <CurrencyFormat\r\n                                            decimalScale={2}\r\n                                            fixedDecimalScale={true}\r\n                                            value={100}\r\n                                            displayType={'text'}\r\n                                            thousandSeparator={true}\r\n                                            prefix={'$'}\r\n                                        />\r\n                                    </td>\r\n\r\n                                    <td >Polka Donuts</td>\r\n                                    <td >\r\n                                        <CurrencyFormat\r\n                                            decimalScale={2}\r\n                                            fixedDecimalScale={true}\r\n                                            value={250}\r\n                                            displayType={'text'}\r\n                                            thousandSeparator={true}\r\n                                            prefix={'$'}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td></td>\r\n                                    <td style={{ borderRight: '1px solid #dee2e6' }}>\r\n                                    </td>\r\n\r\n                                    <td >Otros Ingresos</td>\r\n                                    <td >\r\n                                        <CurrencyFormat\r\n                                            decimalScale={2}\r\n                                            fixedDecimalScale={true}\r\n                                            value={250}\r\n                                            displayType={'text'}\r\n                                            thousandSeparator={true}\r\n                                            prefix={'$'}\r\n                                        />\r\n                                    </td>\r\n\r\n\r\n                                </tr>\r\n\r\n                                <tr style={{ fontWeight: '900', backgroundColor: '#e0e0e0' }}>\r\n                                    <td >TOTAL GASTOS</td>\r\n                                    <td> <CurrencyFormat decimalScale={2} fixedDecimalScale={true} value={250} displayType={'text'} thousandSeparator={true} prefix={'$'} /></td>\r\n                                    <td >TOTAL INGRESOS</td>\r\n                                    <td ><CurrencyFormat decimalScale={2} fixedDecimalScale={true} value={120} displayType={'text'} thousandSeparator={true} prefix={'$'} />\r\n                                    </td>\r\n                                </tr>\r\n\r\n                                <tr style={{ textAlign: 'center', backgroundColor: 'rgba(159, 214, 248, 0.1)' }}>\r\n                                    <th colSpan='2'>Utilidad Neta (Ingresos - Gastos)</th>\r\n                                    <th colSpan='2'>\r\n                                        <CurrencyFormat\r\n                                            decimalScale={2}\r\n                                            fixedDecimalScale={true}\r\n                                            value={120}\r\n                                            displayType={'text'}\r\n                                            thousandSeparator={true}\r\n                                            prefix={'$'}\r\n                                        />\r\n                                    </th>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        </div>\r\n    )\r\n}\r\nexport default Balance;","C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\outcomesCrud\\newoutcome.jsx",["108"],"import Navbar from \"../common/navbar\"\r\nimport Breadcrum from \"../common/breadcrum\"\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faUpload } from '@fortawesome/free-solid-svg-icons'\r\nimport { useEffect, useState, useRef } from \"react\";\r\nimport firebase from '../../firebaseElements/firebase'\r\nimport Swal from 'sweetalert2'\r\n\r\nconst db = firebase.firestore();\r\n\r\nfunction Newoutcome() {\r\n    const [kind, setKind] = useState('');\r\n    const [outcomeKind, setOutcomeKind] = useState('');\r\n    const [concept, setConcept] = useState('');\r\n    const [quantity, setQuantity] = useState(0);\r\n    const [date, setDate] = useState('');\r\n    const [description, setDescription] = useState('');\r\n    const [paymethod, setPaymethod] = useState('');\r\n    const [responsable, setResponsable] = useState('');\r\n    const [authorizer, setAuthorizer] = useState('');\r\n    const [fileName, setFileName] = useState('');\r\n\r\n    const ticket = useRef(null);\r\n    const kindRef = useRef(null);\r\n    const outcomeKindRef = useRef(null);\r\n    const conceptRef = useRef(null);\r\n    const quantityRef = useRef(null);\r\n    const dateRef = useRef(null);\r\n    const descriptionRef = useRef(null);\r\n    const paymethodRRef = useRef(null);\r\n    const responsableRef = useRef(null);\r\n    const authorizerRef = useRef(null);\r\n\r\n    const refs=[ticket,\r\n        kindRef,\r\n        conceptRef,\r\n        quantityRef,\r\n        dateRef,\r\n        descriptionRef,\r\n        paymethodRRef,\r\n        responsableRef,\r\n        authorizerRef\r\n    ]\r\n\r\n    const save = async () => {\r\n        console.log('working')\r\n        let storageRef = firebase.storage().ref();\r\n        const ticketImg = storageRef.child(`outcomes/${Date.now()}.webp`);\r\n\r\n        await ticketImg.put(ticket.current.files[0])\r\n        const downloadURL = await ticketImg.getDownloadURL()\r\n        const newOutcome = {\r\n            kind: kind,\r\n            concept: concept,\r\n            quantity: Number(quantity),\r\n            date: toDate(date, 12, 0, 0),\r\n            description: description,\r\n            paymethod: paymethod,\r\n            responsable: responsable,\r\n            authorizer: authorizer,\r\n            ticketImg: downloadURL\r\n        }\r\n        if(outcomeKind) \r\n            newOutcome.outcomeKind = outcomeKind\r\n        db.collection('outcomes').add(newOutcome).then(() => {\r\n            Swal.fire(\r\n                'Registrado!',\r\n                'El movimiento se registro con exito',\r\n                'success'\r\n            )\r\n            refs.forEach(ref=>ref.current.value='')\r\n            //outcomeKindRef.current.value='Gasto General'\r\n            //ticket.current.files[0]=''\r\n            setFileName('')\r\n        }).catch(error =>\r\n            Swal.fire(\r\n                'Error!',\r\n                `Ocurrio un error: ${error}`,\r\n                'warning'\r\n            )\r\n        );\r\n        console.log(downloadURL)\r\n        console.log('saved')\r\n    }\r\n    const toDate = (text, h, m, s) => {\r\n        const dataAux = text.split('-')\r\n        const temDate = new Date(Number(dataAux[0]), Number(dataAux[1]) - 1, Number(dataAux[2]), h, m, s)\r\n        return firebase.firestore.Timestamp.fromDate(temDate)\r\n    }\r\n    return (\r\n        <div>\r\n            <Navbar />\r\n            <section class=\"hero is-primary\">\r\n                <div class=\"hero-body\">\r\n                    <div class=\"container\">\r\n                        <h1 class=\"title\">Nuevo Gasto</h1>\r\n                        <h2 class=\"subtitle\">Dar de alta un nuevo gasto o ingreso</h2>\r\n                        <Breadcrum />\r\n                    </div>\r\n                </div>\r\n            </section>\r\n            <section class=\"section\">\r\n                <div class=\"container\">\r\n                    <div className='columns'>\r\n                        <div className=\"column\">\r\n                            <div className='card'>\r\n                                <header class=\"card-header\">\r\n                                    <p class=\"card-header-title\">\r\n                                        Información General\r\n                                    </p>\r\n                                </header>\r\n                                <div class=\"card-content\">\r\n                                    <div class=\"content\">\r\n                                        <div class=\"field\">\r\n                                            <label class=\"label\">*Tipo de Movimiento</label>\r\n                                            <div class=\"control\">\r\n                                                <div class=\"select is-fullwidth\">\r\n                                                    <select ref={kindRef} onChange={e => setKind(e.target.value)} >\r\n                                                        <option selected disabled>Movimiento</option>\r\n                                                        <option>Gasto</option>\r\n                                                        <option>Ingreso</option>\r\n                                                    </select>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        {kind === 'Gasto' ? <div class=\"field\">\r\n                                            <label class=\"label\">*Tipo de Gasto</label>\r\n                                            <div class=\"control\">\r\n                                                <div class=\"select is-fullwidth\">\r\n                                                    <select ref={outcomeKindRef} defaultChecked={'Gasto General'} onChange={e => setOutcomeKind(e.target.value)}>\r\n                                                        <option>Gasto General</option>\r\n                                                        <option>Gasto Operativo</option>\r\n                                                        <option>Gasto Administrativo</option>\r\n                                                    </select>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div> : null}\r\n\r\n                                        <div class=\"field\">\r\n                                            <label class=\"label\">*Concepto</label>\r\n                                            <div class=\"control\">\r\n                                                <input ref={conceptRef} onChange={e => setConcept(e.target.value)} class=\"input\" type=\"text\" placeholder=\"Nombre del producto\" />\r\n                                            </div>\r\n                                        </div>\r\n                                        <div class=\"field\">\r\n                                            <label class=\"label\">*Importe</label>\r\n                                            <div class=\"control\">\r\n                                                <input ref={quantityRef} onChange={e => setQuantity(e.target.value)} class=\"input\" type=\"number\" placeholder=\"Nombre del producto\" />\r\n                                            </div>\r\n                                        </div>\r\n                                        <div class=\"field\">\r\n                                            <label class=\"label\">*Fecha pago/cobro</label>\r\n                                            <div class=\"control\">\r\n                                                <input ref={dateRef} onChange={e => setDate(e.target.value)} class=\"input\" type=\"date\" placeholder=\"Nombre del producto\" />\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        <div class=\"field\">\r\n                                            <label class=\"label\">*Comentario/Descripción</label>\r\n                                            <div class=\"control\">\r\n                                                <textarea ref={descriptionRef} onChange={e => setDescription(e.target.value)} class=\"textarea\" placeholder=\"\"></textarea>\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        <div class=\"field\">\r\n                                            <label class=\"label\">*Método de pago/cobro</label>\r\n                                            <div class=\"control\">\r\n                                                <div class=\"select is-fullwidth\">\r\n                                                    <select ref={paymethodRRef} onChange={e => setPaymethod(e.target.value)}>\r\n                                                        <option selected disabled>Método</option>\r\n                                                        <option>Efectivo</option>\r\n                                                        <option>Cheque</option>\r\n                                                        <option>Tarjeta de Crédito</option>\r\n                                                        <option>Tarjeta de Débito</option>\r\n                                                        <option>Transferencia Electrónica</option>\r\n                                                    </select>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div class=\"field\">\r\n                                            <label class=\"label\">*Responsable</label>\r\n                                            <div class=\"control\">\r\n                                                <div class=\"select is-fullwidth\">\r\n                                                    <select ref={responsableRef} onChange={e => setResponsable(e.target.value)}>\r\n                                                        <option selected disabled value=\"\">Seleccione</option>\r\n                                                        <option value='juanPerez'>Juan Pérez</option>\r\n                                                    </select>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div class=\"field\">\r\n                                            <label class=\"label\">*Autoriza</label>\r\n                                            <div class=\"control\">\r\n                                                <div class=\"select is-fullwidth\">\r\n                                                    <select ref={authorizerRef} onChange={e => setAuthorizer(e.target.value)}>\r\n                                                        <option selected disabled value=\"\">Seleccione</option>\r\n                                                        <option value='sanjuanero'>Guillermo Sanjuanero</option>\r\n                                                    </select>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"column\">\r\n                            <div className='card'>\r\n                                <header class=\"card-header\">\r\n                                    <p class=\"card-header-title\">\r\n                                        Comprobante de Pago/Cobro\r\n                                    </p>\r\n                                </header>\r\n                                <div class=\"card-content\">\r\n                                    <div class=\"content\">\r\n                                        <article class=\"message is-success\">\r\n                                            <div class=\"message-body\">\r\n                                                Requisitos del Comprobante\r\n                                                <br />\r\n                                                Para que tu Cobro/Pago sea válido, deberás anexar una imagen de tu comprobante. Este comprobante deberá ser: <strong>Ticket de compra, Factura, Recibo, Comprobante de Tranferencia Bancaria </strong>.\r\n                                                <br /> Es necesario que el monto del comprobante y la fecha coincidan con los datos ingresados en el sistema, de otro modo, este no será tomado en cuenta.\r\n                                            </div>\r\n                                        </article>\r\n\r\n                                        <div class=\"file has-name is-boxed is-fullwidth\">\r\n                                            <label class=\"file-label\">\r\n                                                <input onChange={e => setFileName(e.target.files[0].name)} ref={ticket} class=\"file-input\" type=\"file\" name=\"resume\" />\r\n                                                <span class=\"file-cta\">\r\n                                                    <span class=\"file-icon\">\r\n                                                        <FontAwesomeIcon icon={faUpload} />\r\n                                                    </span>\r\n                                                    <span class=\"file-label is-center\" style={{ textAlign: 'center' }}>\r\n                                                        Seleccione un archivo\r\n                                                    </span>\r\n                                                </span>\r\n                                                <span class=\"file-name\" style={{ textAlign: 'center' }}>\r\n                                                    {fileName}\r\n                                                </span>\r\n                                            </label>\r\n                                        </div>\r\n                                        <br />\r\n                                        <button onClick={save} className='button is-fullwidth is-success'>REGISTRAR</button>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        </div>\r\n    )\r\n}\r\nexport default Newoutcome;","C:\\Users\\Paola\\Desktop\\theMixerAdmin\\client\\src\\componets\\outcomesCrud\\outcomes.jsx",["109","110"],"import Navbar from \"../common/navbar\"\r\nimport Breadcrum from \"../common/breadcrum\"\r\nimport DataTable from 'react-data-table-component';\r\nimport firebase from '../../firebaseElements/firebase'\r\nimport { useEffect, useState } from \"react\";\r\nimport { Modal } from 'react-responsive-modal'\r\nimport memoize from 'memoize-one';\r\nimport 'react-responsive-modal/styles.css';\r\nconst db = firebase.firestore();\r\n\r\nconst data = [{ id: 1, name: 'VITA - C', cathegory: 'Juice', description: 'naranja, guayaba, piña, miel, limón, jengibre', year: '1982' }];\r\nconst columns = memoize((modal, outcome) => [\r\n    {\r\n        name: 'Concepto',\r\n        selector: 'concept',\r\n        sortable: true,\r\n    },\r\n    {\r\n        name: 'Fecha',\r\n        cell: row => row.date.toDate().toLocaleString('es-MX', {\r\n            weekday: 'long',\r\n            year: 'numeric',\r\n            month: 'long',\r\n            day: 'numeric'\r\n        }),\r\n        sortable: true,\r\n        right: true,\r\n    },\r\n\r\n    {\r\n        name: 'Importe',\r\n        selector: 'quantity',\r\n        sortable: true,\r\n        right: true,\r\n    },\r\n\r\n    {\r\n        name: 'Status',\r\n        selector: 'year',\r\n        sortable: true,\r\n        right: true,\r\n    },\r\n    {\r\n        name: 'Detalles',\r\n        selector: 'year',\r\n        cell: row => <button onClick={() => { modal(true); outcome(row) }} className='button is-success' style={{ marginRight: '2%' }}>Detalles</button>,\r\n        right: true,\r\n    },\r\n\r\n]);\r\n\r\nconst customStyles = {\r\n    header: {\r\n        style: {\r\n            fontSize: '22px',\r\n            color: 'white',\r\n            backgroundColor: '#e91e63',\r\n            minHeight: '56px',\r\n            paddingLeft: '16px',\r\n            paddingRight: '8px',\r\n        },\r\n    },\r\n    headRow: {\r\n        style: {\r\n            backgroundColor: '#fafafa',\r\n            minHeight: '56px',\r\n            borderBottomWidth: '1.5px',\r\n            borderBottomColor: '#1293e1',\r\n            borderBottomStyle: 'solid',\r\n        },\r\n        denseStyle: {\r\n            minHeight: '32px',\r\n        },\r\n    },\r\n    headCells: {\r\n        style: {\r\n            fontSize: '1rem',\r\n            fontWeight: 700,\r\n            color: '#616161',\r\n            paddingLeft: '16px',\r\n            paddingRight: '16px',\r\n        },\r\n        activeSortStyle: {\r\n            color: '#1293e1',\r\n            '&:focus': {\r\n                outline: 'none',\r\n            },\r\n            '&:hover:not(:focus)': {\r\n                color: '#1293e1',\r\n            },\r\n        },\r\n        inactiveSortStyle: {\r\n            '&:focus': {\r\n                outline: 'none',\r\n                color: '#1293e1',\r\n            },\r\n            '&:hover': {\r\n                color: '#4dbbff',\r\n            },\r\n        },\r\n    },\r\n};\r\n\r\n\r\nfunction Outcomes() {\r\n\r\n    const [outcome, setOutcome] = useState();\r\n    const [open, setOpen] = useState(false);\r\n    const [startDate, setStartDate] = useState('');\r\n    const [finalDate, setFinalDate] = useState('');\r\n    const [kind, setKind] = useState('');\r\n    const [outcomes, setOutcomes] = useState([]);\r\n\r\n\r\n    useEffect(() => {\r\n        getAllData()\r\n        console.log('effect')\r\n    }, [startDate, finalDate, kind])\r\n\r\n    const toDate = (text, h, m, s) => {\r\n        const dataAux = text.split('-')\r\n        const temDate = new Date(Number(dataAux[0]), Number(dataAux[1]) - 1, Number(dataAux[2]), h, m, s)\r\n        return firebase.firestore.Timestamp.fromDate(temDate)\r\n    }\r\n\r\n    const getAllData = async () => {\r\n        if (startDate && finalDate && kind) {\r\n\r\n            console.log('get data')\r\n            const querySnapshot = await db.collection(\"outcomes\")\r\n                .where('kind', '==', kind)\r\n                .where('date', '>', toDate(startDate, 0, 0, 0))\r\n                .where('date', '<=', toDate(finalDate, 23, 59, 59))\r\n                .get()\r\n            console.log(querySnapshot.docs)\r\n            const temOutcomes = querySnapshot.docs.map(sale => {\r\n                return {\r\n                    id: sale.id,\r\n                    ...sale.data()\r\n                }\r\n            })\r\n            setOutcomes(temOutcomes)\r\n\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <Navbar />\r\n            <section class=\"hero is-primary\">\r\n                <div class=\"hero-body\">\r\n                    <div class=\"container\">\r\n                        <h1 class=\"title\">Gastos e Ingresos</h1>\r\n                        <h2 class=\"subtitle\">Consulta los gastos e ingresos del periodo</h2>\r\n                        <Breadcrum />\r\n                    </div>\r\n                </div>\r\n            </section>\r\n            <section class=\"section\">\r\n                <div class=\"container\">\r\n                    <div className='columns'>\r\n                        <div className='column'>\r\n                            <div class=\"field\">\r\n                                <label class=\"label\">Gastos / Ingresos</label>\r\n                                <div class=\"control\">\r\n                                    <div class=\"select is-fullwidth\">\r\n                                        <select onChange={e => setKind(e.target.value)}  >\r\n                                            <option selected disabled>Seleccione concepto</option>\r\n                                            <option value='Gasto'>Gastos</option>\r\n                                            <option value='Ingreso'>Ingresos</option>\r\n                                        </select>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className='columns'>\r\n                        <div className='column is-6'>\r\n                            <div class=\"field\">\r\n                                <label class=\"label\">Fecha de inicio</label>\r\n                                <div class=\"control\">\r\n                                    <input onChange={e => setStartDate(e.target.value)} class=\"input\" type=\"date\" placeholder=\"Nombre del producto\" />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className='column is-6'>\r\n                            <div class=\"field\">\r\n                                <label class=\"label\">Fecha de Fin</label>\r\n                                <div class=\"control\">\r\n                                    <input onChange={e => setFinalDate(e.target.value)} class=\"input\" type=\"date\" placeholder=\"Nombre del producto\" />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <DataTable\r\n                        columns={columns(setOpen, setOutcome)}\r\n                        data={outcomes}\r\n                        pagination={true}\r\n                        customStyles={customStyles}\r\n                        paginationComponentOptions={{ rowsPerPageText: 'Filas por pagina:', rangeSeparatorText: 'de' }}\r\n                    />\r\n                </div>\r\n            </section>\r\n            {outcome ? <Modal open={open} onClose={() => setOpen(false)} center >\r\n                <div className=\"modal-header\">\r\n                    <h5 className=\"modal-title f-w-600\" id=\"exampleModalLabel2\"> id: {outcome.id} </h5>\r\n                </div>\r\n                <div className=\"modal-body\">\r\n                    <br />\r\n                    concept: {outcome.concept}\r\n                    <br />\r\n                    monto: {outcome.quantity}\r\n                    <br />\r\n                    responsable: {outcome.responsable}\r\n                    <br />\r\n                    authorizer: {outcome.authorizer}\r\n                    <br />\r\n                    <img src={outcome.ticketImg} alt=\"ticketImg\" />\r\n                </div>\r\n                <div className=\"modal-footer\">\r\n\r\n                </div>\r\n            </Modal> : null}\r\n        </div>\r\n    )\r\n}\r\nexport default Outcomes;",{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","severity":1,"message":"116","line":52,"column":6,"nodeType":"117","endLine":52,"endColumn":8,"suggestions":"118"},{"ruleId":"119","severity":1,"message":"120","line":137,"column":19,"nodeType":"121","endLine":137,"endColumn":86},{"ruleId":"119","severity":1,"message":"120","line":183,"column":19,"nodeType":"121","endLine":183,"endColumn":86},{"ruleId":"122","severity":1,"message":"123","line":11,"column":18,"nodeType":"124","messageId":"125","endLine":11,"endColumn":29},{"ruleId":"126","severity":1,"message":"127","line":62,"column":21,"nodeType":"121","endLine":62,"endColumn":62},{"ruleId":"126","severity":1,"message":"127","line":45,"column":25,"nodeType":"121","endLine":45,"endColumn":43},{"ruleId":"119","severity":1,"message":"128","line":48,"column":21,"nodeType":"121","endLine":48,"endColumn":137},{"ruleId":"119","severity":1,"message":"128","line":58,"column":29,"nodeType":"121","endLine":58,"endColumn":56},{"ruleId":"119","severity":1,"message":"128","line":64,"column":37,"nodeType":"121","endLine":64,"endColumn":64},{"ruleId":"119","severity":1,"message":"128","line":69,"column":37,"nodeType":"121","endLine":69,"endColumn":64},{"ruleId":"119","severity":1,"message":"128","line":77,"column":29,"nodeType":"121","endLine":77,"endColumn":56},{"ruleId":"119","severity":1,"message":"128","line":83,"column":37,"nodeType":"121","endLine":83,"endColumn":64},{"ruleId":"119","severity":1,"message":"128","line":88,"column":37,"nodeType":"121","endLine":88,"endColumn":64},{"ruleId":"119","severity":1,"message":"128","line":93,"column":37,"nodeType":"121","endLine":93,"endColumn":64},{"ruleId":"119","severity":1,"message":"128","line":102,"column":29,"nodeType":"121","endLine":102,"endColumn":56},{"ruleId":"119","severity":1,"message":"128","line":108,"column":37,"nodeType":"121","endLine":108,"endColumn":64},{"ruleId":"119","severity":1,"message":"128","line":113,"column":37,"nodeType":"121","endLine":113,"endColumn":64},{"ruleId":"119","severity":1,"message":"128","line":118,"column":37,"nodeType":"121","endLine":118,"endColumn":64},{"ruleId":"119","severity":1,"message":"128","line":131,"column":37,"nodeType":"121","endLine":131,"endColumn":79},{"ruleId":"119","severity":1,"message":"120","line":5,"column":21,"nodeType":"121","endLine":5,"endColumn":33},{"ruleId":"119","severity":1,"message":"120","line":6,"column":21,"nodeType":"121","endLine":6,"endColumn":33},{"ruleId":"119","severity":1,"message":"120","line":7,"column":21,"nodeType":"121","endLine":7,"endColumn":33},{"ruleId":"119","severity":1,"message":"120","line":8,"column":43,"nodeType":"121","endLine":8,"endColumn":75},{"ruleId":"122","severity":1,"message":"129","line":5,"column":21,"nodeType":"124","messageId":"125","endLine":5,"endColumn":27},{"ruleId":"115","severity":1,"message":"130","line":118,"column":8,"nodeType":"117","endLine":118,"endColumn":30,"suggestions":"131"},{"ruleId":"115","severity":1,"message":"130","line":132,"column":7,"nodeType":"117","endLine":132,"endColumn":37,"suggestions":"132"},{"ruleId":"115","severity":1,"message":"130","line":16,"column":7,"nodeType":"117","endLine":16,"endColumn":28,"suggestions":"133"},{"ruleId":"122","severity":1,"message":"134","line":25,"column":19,"nodeType":"124","messageId":"125","endLine":25,"endColumn":25},{"ruleId":"122","severity":1,"message":"135","line":5,"column":10,"nodeType":"124","messageId":"125","endLine":5,"endColumn":19},{"ruleId":"122","severity":1,"message":"136","line":11,"column":7,"nodeType":"124","messageId":"125","endLine":11,"endColumn":11},{"ruleId":"115","severity":1,"message":"130","line":118,"column":8,"nodeType":"117","endLine":118,"endColumn":36,"suggestions":"137"},"no-native-reassign",["138"],"no-negated-in-lhs",["139"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'db'. Either include it or remove the dependency array.","ArrayExpression",["140"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'getUserType' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'useRef' is defined but never used.","React Hook useEffect has a missing dependency: 'getAllData'. Either include it or remove the dependency array.",["141"],["142"],["143"],"'orders' is assigned a value but never used.","'useEffect' is defined but never used.","'data' is assigned a value but never used.",["144"],"no-global-assign","no-unsafe-negation",{"desc":"145","fix":"146"},{"desc":"147","fix":"148"},{"desc":"149","fix":"150"},{"desc":"147","fix":"151"},{"desc":"152","fix":"153"},"Update the dependencies array to be: [db]",{"range":"154","text":"155"},"Update the dependencies array to be: [startDate, finalDate, getAllData]",{"range":"156","text":"157"},"Update the dependencies array to be: [startDate, finalDate, category, getAllData]",{"range":"158","text":"159"},{"range":"160","text":"157"},"Update the dependencies array to be: [startDate, finalDate, kind, getAllData]",{"range":"161","text":"162"},[1525,1527],"[db]",[3335,3357],"[startDate, finalDate, getAllData]",[3422,3452],"[startDate, finalDate, category, getAllData]",[484,505],[3155,3183],"[startDate, finalDate, kind, getAllData]"]